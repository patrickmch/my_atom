/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @generated
 */

//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.PollEventType = {
  'NEW_OUTPUT' : 1,
  'TIMEOUT' : 2,
  'NO_PTY' : 3
};
var Error = module.exports.Error = function(args) {
  Thrift.TException.call(this, "Error");
  this.name = "Error";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(Error, Thrift.TException);
Error.prototype.name = 'Error';
Error.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Error.prototype.write = function(output) {
  output.writeStructBegin('Error');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PollEvent = module.exports.PollEvent = function(args) {
  this.eventType = null;
  this.chunk = null;
  this.exitCode = null;
  if (args) {
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.chunk !== undefined && args.chunk !== null) {
      this.chunk = args.chunk;
    }
    if (args.exitCode !== undefined && args.exitCode !== null) {
      this.exitCode = args.exitCode;
    }
  }
};
PollEvent.prototype = {};
PollEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chunk = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.exitCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PollEvent.prototype.write = function(output) {
  output.writeStructBegin('PollEvent');
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 1);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.chunk !== null && this.chunk !== undefined) {
    output.writeFieldBegin('chunk', Thrift.Type.STRING, 2);
    output.writeBinary(this.chunk);
    output.writeFieldEnd();
  }
  if (this.exitCode !== null && this.exitCode !== undefined) {
    output.writeFieldBegin('exitCode', Thrift.Type.I32, 3);
    output.writeI32(this.exitCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SpawnArguments = module.exports.SpawnArguments = function(args) {
  this.command = null;
  this.commandArgs = null;
  this.envPatches = null;
  this.cwd = null;
  this.name = null;
  this.cols = null;
  this.rows = null;
  if (args) {
    if (args.command !== undefined && args.command !== null) {
      this.command = args.command;
    }
    if (args.commandArgs !== undefined && args.commandArgs !== null) {
      this.commandArgs = Thrift.copyList(args.commandArgs, [null]);
    }
    if (args.envPatches !== undefined && args.envPatches !== null) {
      this.envPatches = Thrift.copyMap(args.envPatches, [null]);
    }
    if (args.cwd !== undefined && args.cwd !== null) {
      this.cwd = args.cwd;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.cols !== undefined && args.cols !== null) {
      this.cols = args.cols;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = args.rows;
    }
  }
};
SpawnArguments.prototype = {};
SpawnArguments.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.command = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.commandArgs = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.commandArgs.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size7 = 0;
        var _rtmp311;
        this.envPatches = {};
        var _ktype8 = 0;
        var _vtype9 = 0;
        _rtmp311 = input.readMapBegin();
        _ktype8 = _rtmp311.ktype;
        _vtype9 = _rtmp311.vtype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var key13 = null;
          var val14 = null;
          key13 = input.readString();
          val14 = input.readString();
          this.envPatches[key13] = val14;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cwd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.cols = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.rows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpawnArguments.prototype.write = function(output) {
  output.writeStructBegin('SpawnArguments');
  if (this.command !== null && this.command !== undefined) {
    output.writeFieldBegin('command', Thrift.Type.STRING, 1);
    output.writeString(this.command);
    output.writeFieldEnd();
  }
  if (this.commandArgs !== null && this.commandArgs !== undefined) {
    output.writeFieldBegin('commandArgs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.commandArgs.length);
    for (var iter15 in this.commandArgs)
    {
      if (this.commandArgs.hasOwnProperty(iter15))
      {
        iter15 = this.commandArgs[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.envPatches !== null && this.envPatches !== undefined) {
    output.writeFieldBegin('envPatches', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.envPatches));
    for (var kiter16 in this.envPatches)
    {
      if (this.envPatches.hasOwnProperty(kiter16))
      {
        var viter17 = this.envPatches[kiter16];
        output.writeString(kiter16);
        output.writeString(viter17);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.cwd !== null && this.cwd !== undefined) {
    output.writeFieldBegin('cwd', Thrift.Type.STRING, 4);
    output.writeString(this.cwd);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.cols !== null && this.cols !== undefined) {
    output.writeFieldBegin('cols', Thrift.Type.I32, 6);
    output.writeI32(this.cols);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.I32, 7);
    output.writeI32(this.rows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

