/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @generated
 */

//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./filesystem_types');
//HELPER FUNCTIONS AND STRUCTURES

var ThriftFileSystemService_chmod_args = function(args) {
  this.path = null;
  this.mode = null;
  if (args) {
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.mode !== undefined && args.mode !== null) {
      this.mode = args.mode;
    }
  }
};
ThriftFileSystemService_chmod_args.prototype = {};
ThriftFileSystemService_chmod_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_chmod_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_chmod_args');
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 1);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 2);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_chmod_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_chmod_result.prototype = {};
ThriftFileSystemService_chmod_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_chmod_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_chmod_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_chown_args = function(args) {
  this.path = null;
  this.uid = null;
  this.gid = null;
  if (args) {
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.gid !== undefined && args.gid !== null) {
      this.gid = args.gid;
    }
  }
};
ThriftFileSystemService_chown_args.prototype = {};
ThriftFileSystemService_chown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.gid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_chown_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_chown_args');
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 1);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 2);
    output.writeI32(this.uid);
    output.writeFieldEnd();
  }
  if (this.gid !== null && this.gid !== undefined) {
    output.writeFieldBegin('gid', Thrift.Type.I32, 3);
    output.writeI32(this.gid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_chown_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_chown_result.prototype = {};
ThriftFileSystemService_chown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_chown_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_chown_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_close_args = function(args) {
  this.fd = null;
  if (args) {
    if (args.fd !== undefined && args.fd !== null) {
      this.fd = args.fd;
    }
  }
};
ThriftFileSystemService_close_args.prototype = {};
ThriftFileSystemService_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.fd = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_close_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_close_args');
  if (this.fd !== null && this.fd !== undefined) {
    output.writeFieldBegin('fd', Thrift.Type.I32, 1);
    output.writeI32(this.fd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_close_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_close_result.prototype = {};
ThriftFileSystemService_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_close_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_close_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_copy_args = function(args) {
  this.source = null;
  this.destination = null;
  this.options = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.destination !== undefined && args.destination !== null) {
      this.destination = args.destination;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.CopyOpt(args.options);
    }
  }
};
ThriftFileSystemService_copy_args.prototype = {};
ThriftFileSystemService_copy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.destination = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.CopyOpt();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_copy_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_copy_args');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.destination !== null && this.destination !== undefined) {
    output.writeFieldBegin('destination', Thrift.Type.STRING, 2);
    output.writeString(this.destination);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_copy_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_copy_result.prototype = {};
ThriftFileSystemService_copy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_copy_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_copy_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_createDirectory_args = function(args) {
  this.uri = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
ThriftFileSystemService_createDirectory_args.prototype = {};
ThriftFileSystemService_createDirectory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_createDirectory_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_createDirectory_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_createDirectory_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_createDirectory_result.prototype = {};
ThriftFileSystemService_createDirectory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_createDirectory_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_createDirectory_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_deletePath_args = function(args) {
  this.uri = null;
  this.options = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.DeleteOpt(args.options);
    }
  }
};
ThriftFileSystemService_deletePath_args.prototype = {};
ThriftFileSystemService_deletePath_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.DeleteOpt();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_deletePath_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_deletePath_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_deletePath_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_deletePath_result.prototype = {};
ThriftFileSystemService_deletePath_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_deletePath_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_deletePath_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_expandHomeDir_args = function(args) {
  this.uri = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
ThriftFileSystemService_expandHomeDir_args.prototype = {};
ThriftFileSystemService_expandHomeDir_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_expandHomeDir_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_expandHomeDir_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_expandHomeDir_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_expandHomeDir_result.prototype = {};
ThriftFileSystemService_expandHomeDir_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_expandHomeDir_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_expandHomeDir_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_fsync_args = function(args) {
  this.fd = null;
  if (args) {
    if (args.fd !== undefined && args.fd !== null) {
      this.fd = args.fd;
    }
  }
};
ThriftFileSystemService_fsync_args.prototype = {};
ThriftFileSystemService_fsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.fd = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_fsync_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_fsync_args');
  if (this.fd !== null && this.fd !== undefined) {
    output.writeFieldBegin('fd', Thrift.Type.I32, 1);
    output.writeI32(this.fd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_fsync_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_fsync_result.prototype = {};
ThriftFileSystemService_fsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_fsync_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_fsync_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_fstat_args = function(args) {
  this.fd = null;
  if (args) {
    if (args.fd !== undefined && args.fd !== null) {
      this.fd = args.fd;
    }
  }
};
ThriftFileSystemService_fstat_args.prototype = {};
ThriftFileSystemService_fstat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.fd = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_fstat_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_fstat_args');
  if (this.fd !== null && this.fd !== undefined) {
    output.writeFieldBegin('fd', Thrift.Type.I32, 1);
    output.writeI32(this.fd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_fstat_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FileStat(args.success);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_fstat_result.prototype = {};
ThriftFileSystemService_fstat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FileStat();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_fstat_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_fstat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_ftruncate_args = function(args) {
  this.fd = null;
  this.len = null;
  if (args) {
    if (args.fd !== undefined && args.fd !== null) {
      this.fd = args.fd;
    }
    if (args.len !== undefined && args.len !== null) {
      this.len = args.len;
    }
  }
};
ThriftFileSystemService_ftruncate_args.prototype = {};
ThriftFileSystemService_ftruncate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.fd = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.len = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_ftruncate_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_ftruncate_args');
  if (this.fd !== null && this.fd !== undefined) {
    output.writeFieldBegin('fd', Thrift.Type.I32, 1);
    output.writeI32(this.fd);
    output.writeFieldEnd();
  }
  if (this.len !== null && this.len !== undefined) {
    output.writeFieldBegin('len', Thrift.Type.I32, 2);
    output.writeI32(this.len);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_ftruncate_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_ftruncate_result.prototype = {};
ThriftFileSystemService_ftruncate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_ftruncate_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_ftruncate_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_lstat_args = function(args) {
  this.uri = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
ThriftFileSystemService_lstat_args.prototype = {};
ThriftFileSystemService_lstat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_lstat_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_lstat_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_lstat_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FileStat(args.success);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_lstat_result.prototype = {};
ThriftFileSystemService_lstat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FileStat();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_lstat_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_lstat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_mkdirp_args = function(args) {
  this.path = null;
  if (args) {
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
  }
};
ThriftFileSystemService_mkdirp_args.prototype = {};
ThriftFileSystemService_mkdirp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_mkdirp_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_mkdirp_args');
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 1);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_mkdirp_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_mkdirp_result.prototype = {};
ThriftFileSystemService_mkdirp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_mkdirp_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_mkdirp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_open_args = function(args) {
  this.path = null;
  this.permissionFlags = null;
  this.mode = null;
  if (args) {
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.permissionFlags !== undefined && args.permissionFlags !== null) {
      this.permissionFlags = args.permissionFlags;
    }
    if (args.mode !== undefined && args.mode !== null) {
      this.mode = args.mode;
    }
  }
};
ThriftFileSystemService_open_args.prototype = {};
ThriftFileSystemService_open_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.permissionFlags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_open_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_open_args');
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 1);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.permissionFlags !== null && this.permissionFlags !== undefined) {
    output.writeFieldBegin('permissionFlags', Thrift.Type.I32, 2);
    output.writeI32(this.permissionFlags);
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 3);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_open_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_open_result.prototype = {};
ThriftFileSystemService_open_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_open_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_open_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_pollFileChanges_args = function(args) {
  this.watchId = null;
  if (args) {
    if (args.watchId !== undefined && args.watchId !== null) {
      this.watchId = args.watchId;
    }
  }
};
ThriftFileSystemService_pollFileChanges_args.prototype = {};
ThriftFileSystemService_pollFileChanges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.watchId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_pollFileChanges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_pollFileChanges_args');
  if (this.watchId !== null && this.watchId !== undefined) {
    output.writeFieldBegin('watchId', Thrift.Type.STRING, 1);
    output.writeString(this.watchId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_pollFileChanges_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FileChangeEvent]);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_pollFileChanges_result.prototype = {};
ThriftFileSystemService_pollFileChanges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.FileChangeEvent();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_pollFileChanges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_pollFileChanges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_readDirectory_args = function(args) {
  this.uri = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
ThriftFileSystemService_readDirectory_args.prototype = {};
ThriftFileSystemService_readDirectory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_readDirectory_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_readDirectory_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_readDirectory_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FileEntry]);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_readDirectory_result.prototype = {};
ThriftFileSystemService_readDirectory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.FileEntry();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_readDirectory_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_readDirectory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_readFile_args = function(args) {
  this.uri = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
ThriftFileSystemService_readFile_args.prototype = {};
ThriftFileSystemService_readFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_readFile_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_readFile_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_readFile_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_readFile_result.prototype = {};
ThriftFileSystemService_readFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_readFile_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_readFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_realpath_args = function(args) {
  this.uri = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
ThriftFileSystemService_realpath_args.prototype = {};
ThriftFileSystemService_realpath_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_realpath_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_realpath_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_realpath_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_realpath_result.prototype = {};
ThriftFileSystemService_realpath_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_realpath_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_realpath_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_resolveRealPath_args = function(args) {
  this.uri = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
ThriftFileSystemService_resolveRealPath_args.prototype = {};
ThriftFileSystemService_resolveRealPath_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_resolveRealPath_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_resolveRealPath_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_resolveRealPath_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_resolveRealPath_result.prototype = {};
ThriftFileSystemService_resolveRealPath_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_resolveRealPath_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_resolveRealPath_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_rename_args = function(args) {
  this.oldUri = null;
  this.newUri = null;
  this.options = null;
  if (args) {
    if (args.oldUri !== undefined && args.oldUri !== null) {
      this.oldUri = args.oldUri;
    }
    if (args.newUri !== undefined && args.newUri !== null) {
      this.newUri = args.newUri;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.RenameOpt(args.options);
    }
  }
};
ThriftFileSystemService_rename_args.prototype = {};
ThriftFileSystemService_rename_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.oldUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.RenameOpt();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_rename_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_rename_args');
  if (this.oldUri !== null && this.oldUri !== undefined) {
    output.writeFieldBegin('oldUri', Thrift.Type.STRING, 1);
    output.writeString(this.oldUri);
    output.writeFieldEnd();
  }
  if (this.newUri !== null && this.newUri !== undefined) {
    output.writeFieldBegin('newUri', Thrift.Type.STRING, 2);
    output.writeString(this.newUri);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_rename_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_rename_result.prototype = {};
ThriftFileSystemService_rename_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_rename_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_rename_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_stat_args = function(args) {
  this.uri = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
ThriftFileSystemService_stat_args.prototype = {};
ThriftFileSystemService_stat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_stat_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_stat_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_stat_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FileStat(args.success);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_stat_result.prototype = {};
ThriftFileSystemService_stat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FileStat();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_stat_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_stat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_unwatch_args = function(args) {
  this.watchId = null;
  if (args) {
    if (args.watchId !== undefined && args.watchId !== null) {
      this.watchId = args.watchId;
    }
  }
};
ThriftFileSystemService_unwatch_args.prototype = {};
ThriftFileSystemService_unwatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.watchId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_unwatch_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_unwatch_args');
  if (this.watchId !== null && this.watchId !== undefined) {
    output.writeFieldBegin('watchId', Thrift.Type.STRING, 1);
    output.writeString(this.watchId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_unwatch_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_unwatch_result.prototype = {};
ThriftFileSystemService_unwatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_unwatch_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_unwatch_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_utimes_args = function(args) {
  this.path = null;
  this.atime = null;
  this.mtime = null;
  if (args) {
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.atime !== undefined && args.atime !== null) {
      this.atime = args.atime;
    }
    if (args.mtime !== undefined && args.mtime !== null) {
      this.mtime = args.mtime;
    }
  }
};
ThriftFileSystemService_utimes_args.prototype = {};
ThriftFileSystemService_utimes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.atime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.mtime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_utimes_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_utimes_args');
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 1);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.atime !== null && this.atime !== undefined) {
    output.writeFieldBegin('atime', Thrift.Type.I32, 2);
    output.writeI32(this.atime);
    output.writeFieldEnd();
  }
  if (this.mtime !== null && this.mtime !== undefined) {
    output.writeFieldBegin('mtime', Thrift.Type.I32, 3);
    output.writeI32(this.mtime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_utimes_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_utimes_result.prototype = {};
ThriftFileSystemService_utimes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_utimes_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_utimes_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_watch_args = function(args) {
  this.uri = null;
  this.options = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.WatchOpt(args.options);
    }
  }
};
ThriftFileSystemService_watch_args.prototype = {};
ThriftFileSystemService_watch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.WatchOpt();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_watch_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_watch_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_watch_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_watch_result.prototype = {};
ThriftFileSystemService_watch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_watch_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_watch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_writeFile_args = function(args) {
  this.uri = null;
  this.content = null;
  this.options = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.WriteFileOpt(args.options);
    }
  }
};
ThriftFileSystemService_writeFile_args.prototype = {};
ThriftFileSystemService_writeFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.WriteFileOpt();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_writeFile_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_writeFile_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 2);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemService_writeFile_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ThriftFileSystemService_writeFile_result.prototype = {};
ThriftFileSystemService_writeFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftFileSystemService_writeFile_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftFileSystemService_writeFile_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftFileSystemServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ThriftFileSystemServiceClient.prototype = {};
ThriftFileSystemServiceClient.prototype.seqid = function() { return this._seqid; };
ThriftFileSystemServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
ThriftFileSystemServiceClient.prototype.chmod = function(path, mode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_chmod(path, mode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_chmod(path, mode);
  }
};

ThriftFileSystemServiceClient.prototype.send_chmod = function(path, mode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('chmod', Thrift.MessageType.CALL, this.seqid());
  var params = {
    path: path,
    mode: mode
  };
  var args = new ThriftFileSystemService_chmod_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_chmod = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_chmod_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
ThriftFileSystemServiceClient.prototype.chown = function(path, uid, gid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_chown(path, uid, gid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_chown(path, uid, gid);
  }
};

ThriftFileSystemServiceClient.prototype.send_chown = function(path, uid, gid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('chown', Thrift.MessageType.CALL, this.seqid());
  var params = {
    path: path,
    uid: uid,
    gid: gid
  };
  var args = new ThriftFileSystemService_chown_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_chown = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_chown_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
ThriftFileSystemServiceClient.prototype.close = function(fd, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_close(fd);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_close(fd);
  }
};

ThriftFileSystemServiceClient.prototype.send_close = function(fd) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('close', Thrift.MessageType.CALL, this.seqid());
  var params = {
    fd: fd
  };
  var args = new ThriftFileSystemService_close_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
ThriftFileSystemServiceClient.prototype.copy = function(source, destination, options, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_copy(source, destination, options);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_copy(source, destination, options);
  }
};

ThriftFileSystemServiceClient.prototype.send_copy = function(source, destination, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('copy', Thrift.MessageType.CALL, this.seqid());
  var params = {
    source: source,
    destination: destination,
    options: options
  };
  var args = new ThriftFileSystemService_copy_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_copy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_copy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
ThriftFileSystemServiceClient.prototype.createDirectory = function(uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createDirectory(uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createDirectory(uri);
  }
};

ThriftFileSystemServiceClient.prototype.send_createDirectory = function(uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createDirectory', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri
  };
  var args = new ThriftFileSystemService_createDirectory_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_createDirectory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_createDirectory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
ThriftFileSystemServiceClient.prototype.deletePath = function(uri, options, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePath(uri, options);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePath(uri, options);
  }
};

ThriftFileSystemServiceClient.prototype.send_deletePath = function(uri, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePath', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri,
    options: options
  };
  var args = new ThriftFileSystemService_deletePath_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_deletePath = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_deletePath_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
ThriftFileSystemServiceClient.prototype.expandHomeDir = function(uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_expandHomeDir(uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_expandHomeDir(uri);
  }
};

ThriftFileSystemServiceClient.prototype.send_expandHomeDir = function(uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('expandHomeDir', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri
  };
  var args = new ThriftFileSystemService_expandHomeDir_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_expandHomeDir = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_expandHomeDir_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('expandHomeDir failed: unknown result');
};
ThriftFileSystemServiceClient.prototype.fsync = function(fd, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fsync(fd);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fsync(fd);
  }
};

ThriftFileSystemServiceClient.prototype.send_fsync = function(fd) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fsync', Thrift.MessageType.CALL, this.seqid());
  var params = {
    fd: fd
  };
  var args = new ThriftFileSystemService_fsync_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_fsync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_fsync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
ThriftFileSystemServiceClient.prototype.fstat = function(fd, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fstat(fd);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fstat(fd);
  }
};

ThriftFileSystemServiceClient.prototype.send_fstat = function(fd) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fstat', Thrift.MessageType.CALL, this.seqid());
  var params = {
    fd: fd
  };
  var args = new ThriftFileSystemService_fstat_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_fstat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_fstat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fstat failed: unknown result');
};
ThriftFileSystemServiceClient.prototype.ftruncate = function(fd, len, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ftruncate(fd, len);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ftruncate(fd, len);
  }
};

ThriftFileSystemServiceClient.prototype.send_ftruncate = function(fd, len) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ftruncate', Thrift.MessageType.CALL, this.seqid());
  var params = {
    fd: fd,
    len: len
  };
  var args = new ThriftFileSystemService_ftruncate_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_ftruncate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_ftruncate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
ThriftFileSystemServiceClient.prototype.lstat = function(uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_lstat(uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_lstat(uri);
  }
};

ThriftFileSystemServiceClient.prototype.send_lstat = function(uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('lstat', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri
  };
  var args = new ThriftFileSystemService_lstat_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_lstat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_lstat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('lstat failed: unknown result');
};
ThriftFileSystemServiceClient.prototype.mkdirp = function(path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mkdirp(path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mkdirp(path);
  }
};

ThriftFileSystemServiceClient.prototype.send_mkdirp = function(path) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mkdirp', Thrift.MessageType.CALL, this.seqid());
  var params = {
    path: path
  };
  var args = new ThriftFileSystemService_mkdirp_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_mkdirp = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_mkdirp_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('mkdirp failed: unknown result');
};
ThriftFileSystemServiceClient.prototype.open = function(path, permissionFlags, mode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_open(path, permissionFlags, mode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_open(path, permissionFlags, mode);
  }
};

ThriftFileSystemServiceClient.prototype.send_open = function(path, permissionFlags, mode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('open', Thrift.MessageType.CALL, this.seqid());
  var params = {
    path: path,
    permissionFlags: permissionFlags,
    mode: mode
  };
  var args = new ThriftFileSystemService_open_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_open = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_open_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('open failed: unknown result');
};
ThriftFileSystemServiceClient.prototype.pollFileChanges = function(watchId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_pollFileChanges(watchId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_pollFileChanges(watchId);
  }
};

ThriftFileSystemServiceClient.prototype.send_pollFileChanges = function(watchId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('pollFileChanges', Thrift.MessageType.CALL, this.seqid());
  var params = {
    watchId: watchId
  };
  var args = new ThriftFileSystemService_pollFileChanges_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_pollFileChanges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_pollFileChanges_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('pollFileChanges failed: unknown result');
};
ThriftFileSystemServiceClient.prototype.readDirectory = function(uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_readDirectory(uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_readDirectory(uri);
  }
};

ThriftFileSystemServiceClient.prototype.send_readDirectory = function(uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('readDirectory', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri
  };
  var args = new ThriftFileSystemService_readDirectory_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_readDirectory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_readDirectory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('readDirectory failed: unknown result');
};
ThriftFileSystemServiceClient.prototype.readFile = function(uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_readFile(uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_readFile(uri);
  }
};

ThriftFileSystemServiceClient.prototype.send_readFile = function(uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('readFile', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri
  };
  var args = new ThriftFileSystemService_readFile_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_readFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_readFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('readFile failed: unknown result');
};
ThriftFileSystemServiceClient.prototype.realpath = function(uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_realpath(uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_realpath(uri);
  }
};

ThriftFileSystemServiceClient.prototype.send_realpath = function(uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('realpath', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri
  };
  var args = new ThriftFileSystemService_realpath_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_realpath = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_realpath_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('realpath failed: unknown result');
};
ThriftFileSystemServiceClient.prototype.resolveRealPath = function(uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resolveRealPath(uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resolveRealPath(uri);
  }
};

ThriftFileSystemServiceClient.prototype.send_resolveRealPath = function(uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('resolveRealPath', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri
  };
  var args = new ThriftFileSystemService_resolveRealPath_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_resolveRealPath = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_resolveRealPath_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('resolveRealPath failed: unknown result');
};
ThriftFileSystemServiceClient.prototype.rename = function(oldUri, newUri, options, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rename(oldUri, newUri, options);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rename(oldUri, newUri, options);
  }
};

ThriftFileSystemServiceClient.prototype.send_rename = function(oldUri, newUri, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rename', Thrift.MessageType.CALL, this.seqid());
  var params = {
    oldUri: oldUri,
    newUri: newUri,
    options: options
  };
  var args = new ThriftFileSystemService_rename_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_rename = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_rename_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
ThriftFileSystemServiceClient.prototype.stat = function(uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stat(uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stat(uri);
  }
};

ThriftFileSystemServiceClient.prototype.send_stat = function(uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('stat', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri
  };
  var args = new ThriftFileSystemService_stat_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_stat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_stat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('stat failed: unknown result');
};
ThriftFileSystemServiceClient.prototype.unwatch = function(watchId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unwatch(watchId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unwatch(watchId);
  }
};

ThriftFileSystemServiceClient.prototype.send_unwatch = function(watchId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unwatch', Thrift.MessageType.CALL, this.seqid());
  var params = {
    watchId: watchId
  };
  var args = new ThriftFileSystemService_unwatch_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_unwatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_unwatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
ThriftFileSystemServiceClient.prototype.utimes = function(path, atime, mtime, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_utimes(path, atime, mtime);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_utimes(path, atime, mtime);
  }
};

ThriftFileSystemServiceClient.prototype.send_utimes = function(path, atime, mtime) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('utimes', Thrift.MessageType.CALL, this.seqid());
  var params = {
    path: path,
    atime: atime,
    mtime: mtime
  };
  var args = new ThriftFileSystemService_utimes_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_utimes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_utimes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
ThriftFileSystemServiceClient.prototype.watch = function(uri, options, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_watch(uri, options);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_watch(uri, options);
  }
};

ThriftFileSystemServiceClient.prototype.send_watch = function(uri, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('watch', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri,
    options: options
  };
  var args = new ThriftFileSystemService_watch_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_watch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_watch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('watch failed: unknown result');
};
ThriftFileSystemServiceClient.prototype.writeFile = function(uri, content, options, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_writeFile(uri, content, options);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_writeFile(uri, content, options);
  }
};

ThriftFileSystemServiceClient.prototype.send_writeFile = function(uri, content, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('writeFile', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri,
    content: content,
    options: options
  };
  var args = new ThriftFileSystemService_writeFile_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftFileSystemServiceClient.prototype.recv_writeFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftFileSystemService_writeFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
var ThriftFileSystemServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
ThriftFileSystemServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ThriftFileSystemServiceProcessor.prototype.process_chmod = function(seqid, input, output) {
  var args = new ThriftFileSystemService_chmod_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.chmod.length === 2) {
    Q.fcall(this._handler.chmod.bind(this._handler), args.path, args.mode)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_chmod_result({success: result});
        output.writeMessageBegin("chmod", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_chmod_result(err);
          output.writeMessageBegin("chmod", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chmod", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.chmod(args.path, args.mode, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_chmod_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("chmod", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("chmod", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_chown = function(seqid, input, output) {
  var args = new ThriftFileSystemService_chown_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.chown.length === 3) {
    Q.fcall(this._handler.chown.bind(this._handler), args.path, args.uid, args.gid)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_chown_result({success: result});
        output.writeMessageBegin("chown", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_chown_result(err);
          output.writeMessageBegin("chown", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chown", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.chown(args.path, args.uid, args.gid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_chown_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("chown", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("chown", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_close = function(seqid, input, output) {
  var args = new ThriftFileSystemService_close_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.close.length === 1) {
    Q.fcall(this._handler.close.bind(this._handler), args.fd)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_close_result({success: result});
        output.writeMessageBegin("close", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_close_result(err);
          output.writeMessageBegin("close", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("close", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.close(args.fd, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_close_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("close", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_copy = function(seqid, input, output) {
  var args = new ThriftFileSystemService_copy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.copy.length === 3) {
    Q.fcall(this._handler.copy.bind(this._handler), args.source, args.destination, args.options)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_copy_result({success: result});
        output.writeMessageBegin("copy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_copy_result(err);
          output.writeMessageBegin("copy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("copy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.copy(args.source, args.destination, args.options, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_copy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("copy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("copy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_createDirectory = function(seqid, input, output) {
  var args = new ThriftFileSystemService_createDirectory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createDirectory.length === 1) {
    Q.fcall(this._handler.createDirectory.bind(this._handler), args.uri)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_createDirectory_result({success: result});
        output.writeMessageBegin("createDirectory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_createDirectory_result(err);
          output.writeMessageBegin("createDirectory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createDirectory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createDirectory(args.uri, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_createDirectory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createDirectory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createDirectory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_deletePath = function(seqid, input, output) {
  var args = new ThriftFileSystemService_deletePath_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePath.length === 2) {
    Q.fcall(this._handler.deletePath.bind(this._handler), args.uri, args.options)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_deletePath_result({success: result});
        output.writeMessageBegin("deletePath", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_deletePath_result(err);
          output.writeMessageBegin("deletePath", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePath", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePath(args.uri, args.options, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_deletePath_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePath", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePath", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_expandHomeDir = function(seqid, input, output) {
  var args = new ThriftFileSystemService_expandHomeDir_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.expandHomeDir.length === 1) {
    Q.fcall(this._handler.expandHomeDir.bind(this._handler), args.uri)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_expandHomeDir_result({success: result});
        output.writeMessageBegin("expandHomeDir", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_expandHomeDir_result(err);
          output.writeMessageBegin("expandHomeDir", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("expandHomeDir", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.expandHomeDir(args.uri, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_expandHomeDir_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("expandHomeDir", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("expandHomeDir", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_fsync = function(seqid, input, output) {
  var args = new ThriftFileSystemService_fsync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fsync.length === 1) {
    Q.fcall(this._handler.fsync.bind(this._handler), args.fd)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_fsync_result({success: result});
        output.writeMessageBegin("fsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_fsync_result(err);
          output.writeMessageBegin("fsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.fsync(args.fd, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_fsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("fsync", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_fstat = function(seqid, input, output) {
  var args = new ThriftFileSystemService_fstat_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fstat.length === 1) {
    Q.fcall(this._handler.fstat.bind(this._handler), args.fd)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_fstat_result({success: result});
        output.writeMessageBegin("fstat", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_fstat_result(err);
          output.writeMessageBegin("fstat", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fstat", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.fstat(args.fd, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_fstat_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("fstat", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fstat", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_ftruncate = function(seqid, input, output) {
  var args = new ThriftFileSystemService_ftruncate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ftruncate.length === 2) {
    Q.fcall(this._handler.ftruncate.bind(this._handler), args.fd, args.len)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_ftruncate_result({success: result});
        output.writeMessageBegin("ftruncate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_ftruncate_result(err);
          output.writeMessageBegin("ftruncate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("ftruncate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ftruncate(args.fd, args.len, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_ftruncate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ftruncate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ftruncate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_lstat = function(seqid, input, output) {
  var args = new ThriftFileSystemService_lstat_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.lstat.length === 1) {
    Q.fcall(this._handler.lstat.bind(this._handler), args.uri)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_lstat_result({success: result});
        output.writeMessageBegin("lstat", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_lstat_result(err);
          output.writeMessageBegin("lstat", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lstat", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.lstat(args.uri, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_lstat_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("lstat", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("lstat", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_mkdirp = function(seqid, input, output) {
  var args = new ThriftFileSystemService_mkdirp_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mkdirp.length === 1) {
    Q.fcall(this._handler.mkdirp.bind(this._handler), args.path)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_mkdirp_result({success: result});
        output.writeMessageBegin("mkdirp", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_mkdirp_result(err);
          output.writeMessageBegin("mkdirp", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("mkdirp", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mkdirp(args.path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_mkdirp_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mkdirp", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mkdirp", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_open = function(seqid, input, output) {
  var args = new ThriftFileSystemService_open_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.open.length === 3) {
    Q.fcall(this._handler.open.bind(this._handler), args.path, args.permissionFlags, args.mode)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_open_result({success: result});
        output.writeMessageBegin("open", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_open_result(err);
          output.writeMessageBegin("open", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("open", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.open(args.path, args.permissionFlags, args.mode, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_open_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("open", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_pollFileChanges = function(seqid, input, output) {
  var args = new ThriftFileSystemService_pollFileChanges_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.pollFileChanges.length === 1) {
    Q.fcall(this._handler.pollFileChanges.bind(this._handler), args.watchId)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_pollFileChanges_result({success: result});
        output.writeMessageBegin("pollFileChanges", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_pollFileChanges_result(err);
          output.writeMessageBegin("pollFileChanges", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("pollFileChanges", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.pollFileChanges(args.watchId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_pollFileChanges_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("pollFileChanges", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("pollFileChanges", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_readDirectory = function(seqid, input, output) {
  var args = new ThriftFileSystemService_readDirectory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.readDirectory.length === 1) {
    Q.fcall(this._handler.readDirectory.bind(this._handler), args.uri)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_readDirectory_result({success: result});
        output.writeMessageBegin("readDirectory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_readDirectory_result(err);
          output.writeMessageBegin("readDirectory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("readDirectory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.readDirectory(args.uri, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_readDirectory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("readDirectory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("readDirectory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_readFile = function(seqid, input, output) {
  var args = new ThriftFileSystemService_readFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.readFile.length === 1) {
    Q.fcall(this._handler.readFile.bind(this._handler), args.uri)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_readFile_result({success: result});
        output.writeMessageBegin("readFile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_readFile_result(err);
          output.writeMessageBegin("readFile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("readFile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.readFile(args.uri, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_readFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("readFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("readFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_realpath = function(seqid, input, output) {
  var args = new ThriftFileSystemService_realpath_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.realpath.length === 1) {
    Q.fcall(this._handler.realpath.bind(this._handler), args.uri)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_realpath_result({success: result});
        output.writeMessageBegin("realpath", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_realpath_result(err);
          output.writeMessageBegin("realpath", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("realpath", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.realpath(args.uri, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_realpath_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("realpath", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("realpath", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_resolveRealPath = function(seqid, input, output) {
  var args = new ThriftFileSystemService_resolveRealPath_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resolveRealPath.length === 1) {
    Q.fcall(this._handler.resolveRealPath.bind(this._handler), args.uri)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_resolveRealPath_result({success: result});
        output.writeMessageBegin("resolveRealPath", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_resolveRealPath_result(err);
          output.writeMessageBegin("resolveRealPath", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("resolveRealPath", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.resolveRealPath(args.uri, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_resolveRealPath_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("resolveRealPath", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("resolveRealPath", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_rename = function(seqid, input, output) {
  var args = new ThriftFileSystemService_rename_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rename.length === 3) {
    Q.fcall(this._handler.rename.bind(this._handler), args.oldUri, args.newUri, args.options)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_rename_result({success: result});
        output.writeMessageBegin("rename", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_rename_result(err);
          output.writeMessageBegin("rename", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rename", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rename(args.oldUri, args.newUri, args.options, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_rename_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("rename", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rename", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_stat = function(seqid, input, output) {
  var args = new ThriftFileSystemService_stat_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stat.length === 1) {
    Q.fcall(this._handler.stat.bind(this._handler), args.uri)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_stat_result({success: result});
        output.writeMessageBegin("stat", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_stat_result(err);
          output.writeMessageBegin("stat", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stat", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.stat(args.uri, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_stat_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("stat", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stat", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_unwatch = function(seqid, input, output) {
  var args = new ThriftFileSystemService_unwatch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unwatch.length === 1) {
    Q.fcall(this._handler.unwatch.bind(this._handler), args.watchId)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_unwatch_result({success: result});
        output.writeMessageBegin("unwatch", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_unwatch_result(err);
          output.writeMessageBegin("unwatch", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unwatch", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unwatch(args.watchId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_unwatch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unwatch", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unwatch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_utimes = function(seqid, input, output) {
  var args = new ThriftFileSystemService_utimes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.utimes.length === 3) {
    Q.fcall(this._handler.utimes.bind(this._handler), args.path, args.atime, args.mtime)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_utimes_result({success: result});
        output.writeMessageBegin("utimes", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_utimes_result(err);
          output.writeMessageBegin("utimes", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("utimes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.utimes(args.path, args.atime, args.mtime, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_utimes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("utimes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("utimes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_watch = function(seqid, input, output) {
  var args = new ThriftFileSystemService_watch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.watch.length === 2) {
    Q.fcall(this._handler.watch.bind(this._handler), args.uri, args.options)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_watch_result({success: result});
        output.writeMessageBegin("watch", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_watch_result(err);
          output.writeMessageBegin("watch", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("watch", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.watch(args.uri, args.options, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_watch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("watch", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("watch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftFileSystemServiceProcessor.prototype.process_writeFile = function(seqid, input, output) {
  var args = new ThriftFileSystemService_writeFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.writeFile.length === 3) {
    Q.fcall(this._handler.writeFile.bind(this._handler), args.uri, args.content, args.options)
      .then(function(result) {
        var result_obj = new ThriftFileSystemService_writeFile_result({success: result});
        output.writeMessageBegin("writeFile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new ThriftFileSystemService_writeFile_result(err);
          output.writeMessageBegin("writeFile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("writeFile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.writeFile(args.uri, args.content, args.options, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new ThriftFileSystemService_writeFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("writeFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("writeFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
