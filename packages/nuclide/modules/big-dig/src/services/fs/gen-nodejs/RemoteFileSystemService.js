/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @generated
 */

//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./filesystem_types');
//HELPER FUNCTIONS AND STRUCTURES

var RemoteFileSystemService_watch_args = function(args) {
  this.uri = null;
  this.options = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.WatchOpt(args.options);
    }
  }
};
RemoteFileSystemService_watch_args.prototype = {};
RemoteFileSystemService_watch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.WatchOpt();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_watch_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_watch_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_watch_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
RemoteFileSystemService_watch_result.prototype = {};
RemoteFileSystemService_watch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_watch_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_watch_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_pollFileChanges_args = function(args) {
};
RemoteFileSystemService_pollFileChanges_args.prototype = {};
RemoteFileSystemService_pollFileChanges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_pollFileChanges_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_pollFileChanges_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_pollFileChanges_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FileChangeEvent]);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
RemoteFileSystemService_pollFileChanges_result.prototype = {};
RemoteFileSystemService_pollFileChanges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.FileChangeEvent();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_pollFileChanges_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_pollFileChanges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_stat_args = function(args) {
  this.uri = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
RemoteFileSystemService_stat_args.prototype = {};
RemoteFileSystemService_stat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_stat_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_stat_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_stat_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FileStat(args.success);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
RemoteFileSystemService_stat_result.prototype = {};
RemoteFileSystemService_stat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FileStat();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_stat_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_stat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_readDirectory_args = function(args) {
  this.uri = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
RemoteFileSystemService_readDirectory_args.prototype = {};
RemoteFileSystemService_readDirectory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_readDirectory_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_readDirectory_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_readDirectory_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FileEntry]);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
RemoteFileSystemService_readDirectory_result.prototype = {};
RemoteFileSystemService_readDirectory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.FileEntry();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_readDirectory_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_readDirectory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_createDirectory_args = function(args) {
  this.uri = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
RemoteFileSystemService_createDirectory_args.prototype = {};
RemoteFileSystemService_createDirectory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_createDirectory_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_createDirectory_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_createDirectory_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
RemoteFileSystemService_createDirectory_result.prototype = {};
RemoteFileSystemService_createDirectory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_createDirectory_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_createDirectory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_readFile_args = function(args) {
  this.uri = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
RemoteFileSystemService_readFile_args.prototype = {};
RemoteFileSystemService_readFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_readFile_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_readFile_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_readFile_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
RemoteFileSystemService_readFile_result.prototype = {};
RemoteFileSystemService_readFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_readFile_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_readFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_writeFile_args = function(args) {
  this.uri = null;
  this.content = null;
  this.options = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.WriteFileOpt(args.options);
    }
  }
};
RemoteFileSystemService_writeFile_args.prototype = {};
RemoteFileSystemService_writeFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.WriteFileOpt();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_writeFile_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_writeFile_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 2);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_writeFile_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
RemoteFileSystemService_writeFile_result.prototype = {};
RemoteFileSystemService_writeFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_writeFile_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_writeFile_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_deletePath_args = function(args) {
  this.uri = null;
  this.options = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.DeleteOpt(args.options);
    }
  }
};
RemoteFileSystemService_deletePath_args.prototype = {};
RemoteFileSystemService_deletePath_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.DeleteOpt();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_deletePath_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_deletePath_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_deletePath_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
RemoteFileSystemService_deletePath_result.prototype = {};
RemoteFileSystemService_deletePath_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_deletePath_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_deletePath_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_rename_args = function(args) {
  this.oldUri = null;
  this.newUri = null;
  this.options = null;
  if (args) {
    if (args.oldUri !== undefined && args.oldUri !== null) {
      this.oldUri = args.oldUri;
    }
    if (args.newUri !== undefined && args.newUri !== null) {
      this.newUri = args.newUri;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.RenameOpt(args.options);
    }
  }
};
RemoteFileSystemService_rename_args.prototype = {};
RemoteFileSystemService_rename_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.oldUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.RenameOpt();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_rename_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_rename_args');
  if (this.oldUri !== null && this.oldUri !== undefined) {
    output.writeFieldBegin('oldUri', Thrift.Type.STRING, 1);
    output.writeString(this.oldUri);
    output.writeFieldEnd();
  }
  if (this.newUri !== null && this.newUri !== undefined) {
    output.writeFieldBegin('newUri', Thrift.Type.STRING, 2);
    output.writeString(this.newUri);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_rename_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
RemoteFileSystemService_rename_result.prototype = {};
RemoteFileSystemService_rename_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_rename_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_rename_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_copy_args = function(args) {
  this.source = null;
  this.destination = null;
  this.options = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.destination !== undefined && args.destination !== null) {
      this.destination = args.destination;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.CopyOpt(args.options);
    }
  }
};
RemoteFileSystemService_copy_args.prototype = {};
RemoteFileSystemService_copy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.destination = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.CopyOpt();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_copy_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_copy_args');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.destination !== null && this.destination !== undefined) {
    output.writeFieldBegin('destination', Thrift.Type.STRING, 2);
    output.writeString(this.destination);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemService_copy_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
RemoteFileSystemService_copy_result.prototype = {};
RemoteFileSystemService_copy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteFileSystemService_copy_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteFileSystemService_copy_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteFileSystemServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
RemoteFileSystemServiceClient.prototype = {};
RemoteFileSystemServiceClient.prototype.seqid = function() { return this._seqid; };
RemoteFileSystemServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
RemoteFileSystemServiceClient.prototype.watch = function(uri, options, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_watch(uri, options);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_watch(uri, options);
  }
};

RemoteFileSystemServiceClient.prototype.send_watch = function(uri, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('watch', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri,
    options: options
  };
  var args = new RemoteFileSystemService_watch_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RemoteFileSystemServiceClient.prototype.recv_watch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteFileSystemService_watch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
RemoteFileSystemServiceClient.prototype.pollFileChanges = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_pollFileChanges();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_pollFileChanges();
  }
};

RemoteFileSystemServiceClient.prototype.send_pollFileChanges = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('pollFileChanges', Thrift.MessageType.CALL, this.seqid());
  var args = new RemoteFileSystemService_pollFileChanges_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RemoteFileSystemServiceClient.prototype.recv_pollFileChanges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteFileSystemService_pollFileChanges_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('pollFileChanges failed: unknown result');
};
RemoteFileSystemServiceClient.prototype.stat = function(uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stat(uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stat(uri);
  }
};

RemoteFileSystemServiceClient.prototype.send_stat = function(uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('stat', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri
  };
  var args = new RemoteFileSystemService_stat_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RemoteFileSystemServiceClient.prototype.recv_stat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteFileSystemService_stat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('stat failed: unknown result');
};
RemoteFileSystemServiceClient.prototype.readDirectory = function(uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_readDirectory(uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_readDirectory(uri);
  }
};

RemoteFileSystemServiceClient.prototype.send_readDirectory = function(uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('readDirectory', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri
  };
  var args = new RemoteFileSystemService_readDirectory_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RemoteFileSystemServiceClient.prototype.recv_readDirectory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteFileSystemService_readDirectory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('readDirectory failed: unknown result');
};
RemoteFileSystemServiceClient.prototype.createDirectory = function(uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createDirectory(uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createDirectory(uri);
  }
};

RemoteFileSystemServiceClient.prototype.send_createDirectory = function(uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createDirectory', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri
  };
  var args = new RemoteFileSystemService_createDirectory_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RemoteFileSystemServiceClient.prototype.recv_createDirectory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteFileSystemService_createDirectory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createDirectory failed: unknown result');
};
RemoteFileSystemServiceClient.prototype.readFile = function(uri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_readFile(uri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_readFile(uri);
  }
};

RemoteFileSystemServiceClient.prototype.send_readFile = function(uri) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('readFile', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri
  };
  var args = new RemoteFileSystemService_readFile_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RemoteFileSystemServiceClient.prototype.recv_readFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteFileSystemService_readFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('readFile failed: unknown result');
};
RemoteFileSystemServiceClient.prototype.writeFile = function(uri, content, options, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_writeFile(uri, content, options);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_writeFile(uri, content, options);
  }
};

RemoteFileSystemServiceClient.prototype.send_writeFile = function(uri, content, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('writeFile', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri,
    content: content,
    options: options
  };
  var args = new RemoteFileSystemService_writeFile_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RemoteFileSystemServiceClient.prototype.recv_writeFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteFileSystemService_writeFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
RemoteFileSystemServiceClient.prototype.deletePath = function(uri, options, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePath(uri, options);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePath(uri, options);
  }
};

RemoteFileSystemServiceClient.prototype.send_deletePath = function(uri, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePath', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uri: uri,
    options: options
  };
  var args = new RemoteFileSystemService_deletePath_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RemoteFileSystemServiceClient.prototype.recv_deletePath = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteFileSystemService_deletePath_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
RemoteFileSystemServiceClient.prototype.rename = function(oldUri, newUri, options, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rename(oldUri, newUri, options);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rename(oldUri, newUri, options);
  }
};

RemoteFileSystemServiceClient.prototype.send_rename = function(oldUri, newUri, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rename', Thrift.MessageType.CALL, this.seqid());
  var params = {
    oldUri: oldUri,
    newUri: newUri,
    options: options
  };
  var args = new RemoteFileSystemService_rename_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RemoteFileSystemServiceClient.prototype.recv_rename = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteFileSystemService_rename_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
RemoteFileSystemServiceClient.prototype.copy = function(source, destination, options, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_copy(source, destination, options);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_copy(source, destination, options);
  }
};

RemoteFileSystemServiceClient.prototype.send_copy = function(source, destination, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('copy', Thrift.MessageType.CALL, this.seqid());
  var params = {
    source: source,
    destination: destination,
    options: options
  };
  var args = new RemoteFileSystemService_copy_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RemoteFileSystemServiceClient.prototype.recv_copy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteFileSystemService_copy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
var RemoteFileSystemServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
RemoteFileSystemServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
RemoteFileSystemServiceProcessor.prototype.process_watch = function(seqid, input, output) {
  var args = new RemoteFileSystemService_watch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.watch.length === 2) {
    Q.fcall(this._handler.watch.bind(this._handler), args.uri, args.options)
      .then(function(result) {
        var result_obj = new RemoteFileSystemService_watch_result({success: result});
        output.writeMessageBegin("watch", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new RemoteFileSystemService_watch_result(err);
          output.writeMessageBegin("watch", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("watch", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.watch(args.uri, args.options, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new RemoteFileSystemService_watch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("watch", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("watch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteFileSystemServiceProcessor.prototype.process_pollFileChanges = function(seqid, input, output) {
  var args = new RemoteFileSystemService_pollFileChanges_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.pollFileChanges.length === 0) {
    Q.fcall(this._handler.pollFileChanges.bind(this._handler))
      .then(function(result) {
        var result_obj = new RemoteFileSystemService_pollFileChanges_result({success: result});
        output.writeMessageBegin("pollFileChanges", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new RemoteFileSystemService_pollFileChanges_result(err);
          output.writeMessageBegin("pollFileChanges", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("pollFileChanges", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.pollFileChanges(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new RemoteFileSystemService_pollFileChanges_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("pollFileChanges", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("pollFileChanges", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteFileSystemServiceProcessor.prototype.process_stat = function(seqid, input, output) {
  var args = new RemoteFileSystemService_stat_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stat.length === 1) {
    Q.fcall(this._handler.stat.bind(this._handler), args.uri)
      .then(function(result) {
        var result_obj = new RemoteFileSystemService_stat_result({success: result});
        output.writeMessageBegin("stat", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new RemoteFileSystemService_stat_result(err);
          output.writeMessageBegin("stat", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stat", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.stat(args.uri, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new RemoteFileSystemService_stat_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("stat", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stat", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteFileSystemServiceProcessor.prototype.process_readDirectory = function(seqid, input, output) {
  var args = new RemoteFileSystemService_readDirectory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.readDirectory.length === 1) {
    Q.fcall(this._handler.readDirectory.bind(this._handler), args.uri)
      .then(function(result) {
        var result_obj = new RemoteFileSystemService_readDirectory_result({success: result});
        output.writeMessageBegin("readDirectory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new RemoteFileSystemService_readDirectory_result(err);
          output.writeMessageBegin("readDirectory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("readDirectory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.readDirectory(args.uri, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new RemoteFileSystemService_readDirectory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("readDirectory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("readDirectory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteFileSystemServiceProcessor.prototype.process_createDirectory = function(seqid, input, output) {
  var args = new RemoteFileSystemService_createDirectory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createDirectory.length === 1) {
    Q.fcall(this._handler.createDirectory.bind(this._handler), args.uri)
      .then(function(result) {
        var result_obj = new RemoteFileSystemService_createDirectory_result({success: result});
        output.writeMessageBegin("createDirectory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new RemoteFileSystemService_createDirectory_result(err);
          output.writeMessageBegin("createDirectory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createDirectory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createDirectory(args.uri, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new RemoteFileSystemService_createDirectory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createDirectory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createDirectory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteFileSystemServiceProcessor.prototype.process_readFile = function(seqid, input, output) {
  var args = new RemoteFileSystemService_readFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.readFile.length === 1) {
    Q.fcall(this._handler.readFile.bind(this._handler), args.uri)
      .then(function(result) {
        var result_obj = new RemoteFileSystemService_readFile_result({success: result});
        output.writeMessageBegin("readFile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new RemoteFileSystemService_readFile_result(err);
          output.writeMessageBegin("readFile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("readFile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.readFile(args.uri, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new RemoteFileSystemService_readFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("readFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("readFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteFileSystemServiceProcessor.prototype.process_writeFile = function(seqid, input, output) {
  var args = new RemoteFileSystemService_writeFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.writeFile.length === 3) {
    Q.fcall(this._handler.writeFile.bind(this._handler), args.uri, args.content, args.options)
      .then(function(result) {
        var result_obj = new RemoteFileSystemService_writeFile_result({success: result});
        output.writeMessageBegin("writeFile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new RemoteFileSystemService_writeFile_result(err);
          output.writeMessageBegin("writeFile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("writeFile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.writeFile(args.uri, args.content, args.options, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new RemoteFileSystemService_writeFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("writeFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("writeFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteFileSystemServiceProcessor.prototype.process_deletePath = function(seqid, input, output) {
  var args = new RemoteFileSystemService_deletePath_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePath.length === 2) {
    Q.fcall(this._handler.deletePath.bind(this._handler), args.uri, args.options)
      .then(function(result) {
        var result_obj = new RemoteFileSystemService_deletePath_result({success: result});
        output.writeMessageBegin("deletePath", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new RemoteFileSystemService_deletePath_result(err);
          output.writeMessageBegin("deletePath", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePath", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePath(args.uri, args.options, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new RemoteFileSystemService_deletePath_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePath", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePath", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteFileSystemServiceProcessor.prototype.process_rename = function(seqid, input, output) {
  var args = new RemoteFileSystemService_rename_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rename.length === 3) {
    Q.fcall(this._handler.rename.bind(this._handler), args.oldUri, args.newUri, args.options)
      .then(function(result) {
        var result_obj = new RemoteFileSystemService_rename_result({success: result});
        output.writeMessageBegin("rename", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new RemoteFileSystemService_rename_result(err);
          output.writeMessageBegin("rename", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rename", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rename(args.oldUri, args.newUri, args.options, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new RemoteFileSystemService_rename_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("rename", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rename", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteFileSystemServiceProcessor.prototype.process_copy = function(seqid, input, output) {
  var args = new RemoteFileSystemService_copy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.copy.length === 3) {
    Q.fcall(this._handler.copy.bind(this._handler), args.source, args.destination, args.options)
      .then(function(result) {
        var result_obj = new RemoteFileSystemService_copy_result({success: result});
        output.writeMessageBegin("copy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Error) {
          result = new RemoteFileSystemService_copy_result(err);
          output.writeMessageBegin("copy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("copy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.copy(args.source, args.destination, args.options, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Error) {
        result_obj = new RemoteFileSystemService_copy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("copy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("copy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
