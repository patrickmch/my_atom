export type ValueTypeA = {
  valueA: string;
  valueB: ?ValueTypeB;
  valueC?: boolean;
  valueD: any;
  valueE: mixed;
  valueF: Object;
};

export type ValueTypeB = {
  valueA: [number, string];
  valueC: string;
};

export function ValueTypeTestA(arg0: ValueTypeA, arg1: ?ValueTypeB): Promise<ValueTypeA> {}

export function ValueTypeTestB(arg0: ValueTypeA, arg1: Array<ValueTypeB>):
  Promise<{
    field1: string;
    field2: string;
  }> {}

export function QualifiedTypeNameTest(arg0: fs.Stats): void {}

// Type recursion through nullable, optional and containers is ok.
export type A = {
  f: ? A;
  o?: A;
  a: Array<A>;
  m: Map<A, A>;
  s: Set<A>;
};

// Private types are not remotable.
export type _PrivateType = {
   a: unknownType;
   q: Promise<number>;
};
