export type SU = 'bork' | 'bork bork';
export type SSU = SU | 'bork!';

export type MixedUnion = 'bork' | 42;

export function UnionFunc(s: SSU, m: MixedUnion): void {}

export type Location = SourceLocation | BuiltinLocation;

export type SourceLocation = {
  type: 'source';
  fileName: string;
  line: number;
};

export type BuiltinLocation = {
  type: 'builtin';
};

export function ObjectUnionFunc(loc: Location): void {}

export type Definitions = Map<string, Definition>;

export type Definition = FunctionDefinition | InterfaceDefinition | AliasDefinition;

// A top level function.
export type FunctionDefinition = {
  kind: 'function';
  name: string;
  location: Location;
  type: FunctionType;
};

// An interface class.
export type InterfaceDefinition = {
  kind: 'interface';
  name: string;
  location: Location;
  constructorArgs: Array<Type>;
  instanceMethods: Map<string, FunctionType>;
  staticMethods: Map<string, FunctionType>;
};

// A type alias.
export type AliasDefinition = {
  kind: 'alias';
  name: string;
  location: Location;
  definition?: Type;
};

// $FlowIssue
export type Type = NullableType | PrimitiveType | ObjectType | ContainerType |
  ReturnType | LiteralType | NamedType | FunctionType;

// Nullable type.
export type NullableType = { location: Location; kind: 'nullable'; type: Type };

// Functions.
export type FunctionType = {
  location: Location;
  kind: 'function';
  argumentTypes: Array<Type>;
  returnType: VoidType | PromiseType | ObservableType;
}

// Primitive types.
export type PrimitiveType = MixedType | AnyType | StringType | BooleanType | NumberType;
export type AnyType = { location: Location; kind: 'any' };
export type MixedType = { location: Location; kind: 'mixed' };
export type StringType = { location: Location; kind: 'string' };
export type BooleanType = { location: Location; kind: 'boolean' };
export type NumberType = { location: Location; kind: 'number' };

// Literal types.
export type LiteralType = StringLiteralType | NumberLiteralType | BooleanLiteralType;
export type StringLiteralType = { location: Location; kind: 'string-literal'; value: string };
export type NumberLiteralType = { location: Location; kind: 'number-literal'; value: number };
export type BooleanLiteralType = { location: Location; kind: 'boolean-literal'; value: boolean };

// Possible Return formats.
export type ReturnType = VoidType | PromiseType | ObservableType;
export type VoidType = { location: Location; kind: 'void' };
export type PromiseType = { location: Location; kind: 'promise'; type: Type };
export type ObservableType = { location: Location; kind: 'observable'; type: Type };

// Container Types.
export type ContainerType = ArrayType | MapType | SetType | TupleType;
export type ArrayType = { location: Location; kind: 'array'; type: Type; };
export type SetType = { location: Location; kind: 'set'; type: Type; };
export type MapType = { location: Location; kind: 'map'; keyType: Type; valueType: Type; };
export type ObjectType = { location: Location; kind: 'object'; fields: Array<ObjectField> };
export type ObjectField = {
  location: Location;
  name: string;
  type: Type;
  optional: boolean;
};
export type TupleType = { location: Location; kind: 'tuple'; types: Array<Type>; };

export type UnionType = {
  location: Location;
  kind: 'union';
  types: Array<Type>;
  discriminantField?: string; // This is filled in for unions of object types during validation.
};

// Represents a named, custom type.
export type NamedType = { location: Location; kind: 'named'; name: string };

export function TypeFunc(type: Type): void {}

export type MultipleDiscriminantUnion = { kind: 'k1'; type: 't1'; value1: string; }
   |  { kind: 'k2'; type: 't2'; value2: number; };

export function MDUFunc(mdu: MultipleDiscriminantUnion): void {}
