'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.








































































































































observeDevices = observeDevices;var _log4js;function _load_log4js() {return _log4js = require('log4js');}var _collection;function _load_collection() {return _collection = require('../../../modules/nuclide-commons/collection');}var _SimpleCache;function _load_SimpleCache() {return _SimpleCache = require('../../../modules/nuclide-commons/SimpleCache');}var _shallowequal;function _load_shallowequal() {return _shallowequal = _interopRequireDefault(require('shallowequal'));}var _rxjsBundlesRxMinJs = require('rxjs/bundles/Rx.min.js');var _expected;function _load_expected() {return _expected = require('../../../modules/nuclide-commons/expected');}var _nuclideAnalytics;function _load_nuclideAnalytics() {return _nuclideAnalytics = require('../../nuclide-analytics');}var _nuclideUri;function _load_nuclideUri() {return _nuclideUri = _interopRequireDefault(require('../../../modules/nuclide-commons/nuclideUri'));}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}class DevicePoller {constructor(type, service) {this._observables = new (_SimpleCache || _load_SimpleCache()).SimpleCache();this._type = type;this._service = service;}_getPlatform() {return this._type === 'adb' ? 'Android' : 'Tizen';}observe(_host) {const host = (_nuclideUri || _load_nuclideUri()).default.isRemote(_host) ? _host : '';let fetching = false;return this._observables.getOrCreate(host, () => _rxjsBundlesRxMinJs.Observable.interval(10 * 1000).startWith(0).filter(() => !fetching).switchMap(() => {fetching = true;return this.fetch(host).map(devices => (_expected || _load_expected()).Expect.value(devices)).catch(err => {const logger = (0, (_log4js || _load_log4js()).getLogger)('nuclide-adb-sdb-base');if (err.stack.startsWith('TimeoutError')) {logger.debug(`Error polling for devices: ${err.message}`);} else {logger.warn(`Error polling for devices: ${err.message}`);}return _rxjsBundlesRxMinJs.Observable.of((_expected || _load_expected()).Expect.error(new Error(`Can't fetch ${this._getPlatform()} devices. Make sure that ${this._type} is in your $PATH and that it works properly.`)));}).do(() => {fetching = false;});}).distinctUntilChanged((a, b) => {if (a.isError && b.isError) {return a.error.message === b.error.message;} else if (a.isPending && b.isPending) {return true;} else if (!a.isError && !b.isError && !a.isPending && !b.isPending) {return (0, (_collection || _load_collection()).arrayEqual)(a.value, b.value, (_shallowequal || _load_shallowequal()).default);} else {return false;}}).publishReplay(1).refCount());}fetch(host) {try {return this._service.getDeviceList().refCount().map(devices => devices.map(device => this.parseRawDevice(device)));} catch (e) {// The remote host connection can go away while we are fetching if the user
      // removes it from the file tree or the network connection is lost.
      return _rxjsBundlesRxMinJs.Observable.of([]);}}parseRawDevice(device) {let deviceArchitecture = '';for (const arch of ['arm64', 'arm', 'x86']) {if (device.architecture.startsWith(arch)) {deviceArchitecture = arch;break;}}if (deviceArchitecture.length === 0) {(0, (_nuclideAnalytics || _load_nuclideAnalytics()).track)('nuclide-adb-sdb-base.unknown_device_arch', { deviceArchitecture });}const displayName = device.name.startsWith('emulator') ? device.name : device.model;return { name: device.name, port: device.port, displayName, architecture: deviceArchitecture, rawArchitecture: device.architecture };}} /**
opyright (c) 2015-present, Facebook, Inc.
ll rights reserved.

his source code is licensed under the license found in the LICENSE file in
the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *

format
const pollers = new Map();function observeDevices(type, service, host) {const pollerKey = `${type}:${host}`;let poller = pollers.get(pollerKey);if (poller == null) {poller = new DevicePoller(type, service);pollers.set(pollerKey, poller);}return poller.observe(host);
}