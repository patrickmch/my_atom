'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _prettyFormat = require('pretty-format');

var _prettyFormat2 = _interopRequireDefault(_prettyFormat);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
      arr2[i] = arr[i];
    return arr2;
  } else {
    return Array.from(arr);
  }
} /**
 * Copyright (c) 2018-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

const EXPECTED_COLOR = _chalk2.default.green;
const RECEIVED_COLOR = _chalk2.default.red;

exports.default = environment => {
  environment.global.it.each = bindEach(environment.global.it);
  environment.global.fit.each = bindEach(environment.global.fit);
  environment.global.xit.each = bindEach(environment.global.xit);
  environment.global.describe.each = bindEach(environment.global.describe);
  environment.global.xdescribe.each = bindEach(environment.global.xdescribe);
  environment.global.fdescribe.each = bindEach(environment.global.fdescribe);
};

const bindEach = cb =>
  function() {
    for (
      var _len = arguments.length, args = Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key];
    }

    return (title, test) => {
      if (args.length === 1) {
        const table = args[0];
        return table.forEach(row =>
          cb(
            _util2.default.format.apply(
              _util2.default,
              [title].concat(_toConsumableArray(row))
            ),
            applyRestParams(row, test)
          )
        );
      }

      const templateStrings = args[0];
      const data = args.slice(1);

      const keys = getHeadingKeys(templateStrings[0]);
      const table = buildTable(data, keys.length, keys);

      if (data.length % keys.length !== 0) {
        return cb(title, () => {
          throw new Error(
            'Not enough arguments supplied for given headings:\n' +
              EXPECTED_COLOR(keys.join(' | ')) +
              '\n\n' +
              'Received:\n' +
              RECEIVED_COLOR((0, _prettyFormat2.default)(data)) +
              '\n\n' +
              `Missing ${RECEIVED_COLOR(
                `${data.length % keys.length}`
              )} arguments`
          );
        });
      }

      return table.forEach(row =>
        cb(interpolate(title, row), applyObjectParams(row, test))
      );
    };
  };

const applyRestParams = (params, test) => {
  if (params.length < test.length)
    return done =>
      test.apply(undefined, _toConsumableArray(params).concat([done]));

  return () => test.apply(undefined, _toConsumableArray(params));
};

const getHeadingKeys = headings => headings.replace(/\s/g, '').split('|');

const buildTable = (data, rowSize, keys) =>
  Array.from({length: data.length / rowSize})
    .map((_, index) => data.slice(index * rowSize, index * rowSize + rowSize))
    .map(row =>
      row.reduce(
        (acc, value, index) => Object.assign({}, acc, {[keys[index]]: value}),
        {}
      )
    );

const interpolate = (title, data) =>
  Object.keys(data).reduce(
    (acc, key) => acc.replace('$' + key, data[key]),
    title
  );

const applyObjectParams = (obj, test) => {
  if (test.length > 1) return done => test(obj, done);

  return () => test(obj);
};
