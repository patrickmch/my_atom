{
  "_args": [
    [
      {
        "raw": "jest-serializer@^23.0.0-charlie.2",
        "scope": null,
        "escapedName": "jest-serializer",
        "name": "jest-serializer",
        "rawSpec": "^23.0.0-charlie.2",
        "spec": ">=23.0.0-charlie.2 <24.0.0",
        "type": "range"
      },
      "/private/var/folders/dp/vj05cwss7pz9mjl62ccqzysm0000gp/T/apm-install-dir-118417-87212-akoia2.3d4tv5cdi/node_modules/nuclide/node_modules/jest-haste-map"
    ]
  ],
  "_from": "jest-serializer@>=23.0.0-charlie.2 <24.0.0",
  "_id": "jest-serializer@23.0.0-charlie.2",
  "_inCache": true,
  "_location": "/nuclide/jest-serializer",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jest-serializer_23.0.0-charlie.2_1526377885284_0.8663631199212989"
  },
  "_npmUser": {
    "name": "mjesun",
    "email": "mjesun@hotmail.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "jest-serializer@^23.0.0-charlie.2",
    "scope": null,
    "escapedName": "jest-serializer",
    "name": "jest-serializer",
    "rawSpec": "^23.0.0-charlie.2",
    "spec": ">=23.0.0-charlie.2 <24.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/nuclide/jest-haste-map"
  ],
  "_resolved": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-23.0.0-charlie.2.tgz",
  "_shasum": "21beb06b29441f4b29fda4344c0532db286e7d34",
  "_shrinkwrap": null,
  "_spec": "jest-serializer@^23.0.0-charlie.2",
  "_where": "/private/var/folders/dp/vj05cwss7pz9mjl62ccqzysm0000gp/T/apm-install-dir-118417-87212-akoia2.3d4tv5cdi/node_modules/nuclide/node_modules/jest-haste-map",
  "bugs": {
    "url": "https://github.com/facebook/jest/issues"
  },
  "dependencies": {},
  "description": "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "21beb06b29441f4b29fda4344c0532db286e7d34",
    "tarball": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-23.0.0-charlie.2.tgz",
    "fileCount": 6,
    "unpackedSize": 6356,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa+q2dCRA9TVsSAnZWagAAw7IQAJvN/zO3FQqAWyLZ7Jmt\nOQ6Fid4JYdFVmAPGusU28I69zfzKJmIZf2YcrV0r/Xmfi62G7tR7K0WKx+M3\nvYC+OKaHDwc3zPpR0aZV8TVex2S2edfzyVYUBgyPP8eHFsoX1WwYgcju9oHx\n1GBNTlamEVbRtm5ifUVF5aiZy3hqNsXa5/ZhP6ML2SU+GMgobi3dzms6RvNO\n37lxljlBkKK+Ym7JsYyNmOLmrvhrBg9abeCPs8kU+YLYXu974CBFSVe6+1nh\nBV8J0ZzZSAn6+PdFMTPvscASL2QoNexylD3hnYIrhXhDRxJyZrn2ru+z+VNX\n+OMM+/fV80w6uV0WJ7BnM9RxFMdcLjst3RperBmG7ptWygXcJub+Gvq/HSYn\nqklos0DVb6EjLFRF+PKbNtHLkzBoNKaS84leoyJsHz2KMiAsTrOr1jg5FWWD\nQ4/UmshgbFQ58zR6R8lkzymBhnfCC3LlMhf4lv1eHjFjJSoiFOMSFouxKZeN\nugW61GS9yGS43Md0Itey0pyo6s+XLPOxTDzk922KaaVxzbCT1pSGPPSRsWyC\n3m9+c4Buz6KCyVQlNVwiKBFgKf5MilBeQQrHWiyychuSGQ2T/GKdUfSlbC/F\n1k8OYNd7v8ewHtIr+CQW8RI7sgRbljY9agn/B5pMJSTbRoyUMS3S3XFNnIl6\niA/s\r\n=CWtZ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "homepage": "https://github.com/facebook/jest#readme",
  "license": "MIT",
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "cpojer",
      "email": "christoph.pojer@gmail.com"
    },
    {
      "name": "fb",
      "email": "opensource+npm@fb.com"
    },
    {
      "name": "mjesun",
      "email": "mjesun@hotmail.com"
    }
  ],
  "name": "jest-serializer",
  "optionalDependencies": {},
  "readme": "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By\ndefault, the `v8` implementations are used, but if not present, it defaults to\n`JSON` implementation. Both serializers have the advantage of being able to\nserialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it\nthrough a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in\nmemory. This is useful when willing to transfer over HTTP, TCP or via UNIX\npipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve\nit back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/facebook/jest.git"
  },
  "version": "23.0.0-charlie.2"
}
