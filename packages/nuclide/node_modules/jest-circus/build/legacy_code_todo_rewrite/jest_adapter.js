'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

function _asyncToGenerator(fn) {
  return function() {
    var gen = fn.apply(this, arguments);
    return new Promise(function(resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(
            function(value) {
              step('next', value);
            },
            function(err) {
              step('throw', err);
            }
          );
        }
      }
      return step('next');
    });
  };
}

/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict-local
 */

const FRAMEWORK_INITIALIZER = require.resolve('./jest_adapter_init');

const jestAdapter = (() => {
  var _ref = _asyncToGenerator(function*(
    globalConfig,
    config,
    environment,
    runtime,
    testPath
  ) {
    var _runtime$requireInter = runtime.requireInternalModule(
      FRAMEWORK_INITIALIZER
    );

    const initialize = _runtime$requireInter.initialize,
      runAndTransformResultsToJestFormat =
        _runtime$requireInter.runAndTransformResultsToJestFormat;

    runtime
      .requireInternalModule(
        _path2.default.resolve(__dirname, './jest_expect.js')
      )
      .default({
        expand: globalConfig.expand
      });

    const getPrettier = function() {
      return config.prettierPath ? require(config.prettierPath) : null;
    };
    const getBabelTraverse = function() {
      return require('babel-traverse').default;
    };

    var _initialize = initialize({
      config: config,
      getBabelTraverse: getBabelTraverse,
      getPrettier: getPrettier,
      globalConfig: globalConfig,
      localRequire: runtime.requireModule.bind(runtime),
      parentProcess: process,
      testPath: testPath
    });

    const globals = _initialize.globals,
      snapshotState = _initialize.snapshotState;

    if (config.timers === 'fake') {
      environment.fakeTimers.useFakeTimers();
    }

    globals.beforeEach(function() {
      if (config.resetModules) {
        runtime.resetModules();
      }

      if (config.clearMocks) {
        runtime.clearAllMocks();
      }

      if (config.resetMocks) {
        runtime.resetAllMocks();

        if (config.timers === 'fake') {
          environment.fakeTimers.useFakeTimers();
        }
      }

      if (config.restoreMocks) {
        runtime.restoreAllMocks();
      }
    });

    if (config.setupTestFrameworkScriptFile) {
      runtime.requireModule(config.setupTestFrameworkScriptFile);
    }

    runtime.requireModule(testPath);
    const results = yield runAndTransformResultsToJestFormat({
      config: config,
      globalConfig: globalConfig,
      testPath: testPath
    });
    return _addSnapshotData(results, snapshotState);
  });

  return function jestAdapter(_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
})();

const _addSnapshotData = (results, snapshotState) => {
  results.testResults.forEach(_ref2 => {
    let fullName = _ref2.fullName,
      status = _ref2.status;

    if (status === 'pending' || status === 'failed') {
      // if test is skipped or failed, we don't want to mark
      // its snapshots as obsolete.
      snapshotState.markSnapshotsAsCheckedForTest(fullName);
    }
  });

  const uncheckedCount = snapshotState.getUncheckedCount();
  const uncheckedKeys = snapshotState.getUncheckedKeys();
  if (uncheckedCount) {
    snapshotState.removeUncheckedKeys();
  }

  const status = snapshotState.save();
  results.snapshot.fileDeleted = status.deleted;
  results.snapshot.added = snapshotState.added;
  results.snapshot.matched = snapshotState.matched;
  results.snapshot.unmatched = snapshotState.unmatched;
  results.snapshot.updated = snapshotState.updated;
  results.snapshot.unchecked = !status.deleted ? uncheckedCount : 0;
  // Copy the array to prevent memory leaks
  results.snapshot.uncheckedKeys = Array.from(uncheckedKeys);
  return results;
};

module.exports = jestAdapter;
