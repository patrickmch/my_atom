{
  "type": "curated_code_example",
  "id": 1854,
  "saved_as": "src.py",
  "relativeTitle": "",
  "inputFiles": [],
  "collapsed": false,
  "title": "Plot a line graph",
  "prelude": [
    {
      "type": "code",
      "output_type": "",
      "content": {
        "code": "import matplotlib.pyplot as plt\nw = 4\nh = 3\nd = 70\nplt.figure(figsize=(w, h), dpi=d)\n",
        "wrapped": null,
        "references": [
          {
            "begin": 7,
            "end": 17,
            "expression": "matplotlib",
            "fully_qualified": "matplotlib",
            "instance": false,
            "node_type": "import"
          },
          {
            "begin": 18,
            "end": 24,
            "expression": "pyplot",
            "fully_qualified": "matplotlib.pyplot",
            "instance": false,
            "node_type": "import"
          },
          {
            "begin": 28,
            "end": 31,
            "expression": "plt",
            "fully_qualified": "matplotlib.pyplot",
            "instance": false,
            "node_type": "import"
          },
          {
            "begin": 51,
            "end": 54,
            "expression": "plt",
            "fully_qualified": "matplotlib.pyplot",
            "instance": false,
            "node_type": "name"
          },
          {
            "begin": 55,
            "end": 61,
            "expression": "figure",
            "fully_qualified": "matplotlib.pyplot.figure",
            "instance": false,
            "node_type": "attribute"
          }
        ]
      }
    }
  ],
  "code": [
    {
      "type": "code",
      "output_type": "",
      "content": {
        "code": "x = [1, 2, 4]\ny = [2, 4, 4.5]\n\nplt.plot(x, y)\n",
        "wrapped": null,
        "references": [
          {
            "begin": 31,
            "end": 34,
            "expression": "plt",
            "fully_qualified": "matplotlib.pyplot",
            "instance": false,
            "node_type": "name"
          },
          {
            "begin": 35,
            "end": 39,
            "expression": "plot",
            "fully_qualified": "matplotlib.pyplot.plot",
            "instance": false,
            "node_type": "attribute"
          }
        ]
      }
    }
  ],
  "postlude": [
    {
      "type": "code",
      "output_type": "",
      "content": {
        "code": "plt.savefig(\"out.png\")",
        "wrapped": null,
        "references": [
          {
            "begin": 0,
            "end": 3,
            "expression": "plt",
            "fully_qualified": "matplotlib.pyplot",
            "instance": false,
            "node_type": "name"
          },
          {
            "begin": 4,
            "end": 11,
            "expression": "savefig",
            "fully_qualified": "matplotlib.pyplot.savefig",
            "instance": false,
            "node_type": "attribute"
          }
        ]
      }
    },
    {
      "type": "output",
      "output_type": "image",
      "content": {
        "path": "out.png",
        "data": "",
        "encoding": "",
        "caption": "out.png"
      }
    }
  ],
  "package": "matplotlib",
  "related": [
    {
      "id": 1855,
      "relativeTitle": "Plot a line graph <b>with</b> <b>default</b> <b>x-values</b>",
      "title": "Plot a line graph with default x-values",
      "package": "matplotlib"
    },
    {
      "id": 2205,
      "relativeTitle": "Plot a line graph <b>with</b> a <b>logarithmic</b> <b>y-axis</b> <b>scale</b>",
      "title": "Plot a line graph with a logarithmic y-axis scale",
      "package": "matplotlib"
    },
    {
      "id": 1878,
      "relativeTitle": "Plot a line graph <b>using</b> a <b>ggplot</b> <b>stylesheet</b>",
      "title": "Plot a line graph using a `ggplot` stylesheet",
      "package": "matplotlib"
    },
    {
      "id": 1857,
      "relativeTitle": "Plot a <b>scatterplot</b>",
      "title": "Plot a scatterplot",
      "package": "matplotlib"
    },
    {
      "id": 2207,
      "relativeTitle": "Plot a line graph <b>with</b> a <b>logarithmic</b> <b>scale</b> <b>x-axis</b> <b>and</b> <b>y-axis</b>",
      "title": "Plot a line graph with a logarithmic scale x-axis and y-axis",
      "package": "matplotlib"
    }
  ]
}