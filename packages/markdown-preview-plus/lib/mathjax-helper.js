"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const CSON = require("season");
const fs = require("fs");
const util_1 = require("./util");
let isMathJaxDisabled = false;
function mathProcessor(domElements) {
    if (isMathJaxDisabled)
        return;
    loadMathJax(() => {
        MathJax.Hub.Queue(['Typeset', MathJax.Hub, domElements]);
    });
}
exports.mathProcessor = mathProcessor;
function processHTMLString(html, callback) {
    if (isMathJaxDisabled) {
        callback(html);
        return;
    }
    const element = document.createElement('div');
    element.innerHTML = html;
    const compileProcessedHTMLString = function () {
        const msvgh = document.getElementById('MathJax_SVG_Hidden');
        const svgGlyphs = msvgh && msvgh.parentNode.cloneNode(true);
        if (svgGlyphs !== null) {
            element.insertBefore(svgGlyphs, element.firstChild);
        }
        return element.innerHTML;
    };
    const queueProcessHTMLString = () => {
        MathJax.Hub.Queue(['setRenderer', MathJax.Hub, 'SVG'], ['Typeset', MathJax.Hub, element], ['setRenderer', MathJax.Hub, 'HTML-CSS'], [
            () => {
                callback(compileProcessedHTMLString());
            },
        ]);
    };
    loadMathJax(queueProcessHTMLString);
}
exports.processHTMLString = processHTMLString;
function disableMathJax(disable) {
    isMathJaxDisabled = disable;
}
function loadMathJax(listener) {
    if (window.MathJax) {
        if (listener)
            listener();
        return;
    }
    const script = attachMathJax();
    if (listener) {
        script.addEventListener('load', () => {
            listener();
        });
    }
}
function attachMathJax() {
    const script = document.querySelector('script[src*="MathJax.js"]');
    if (!script) {
        return attachMathJaxInternal();
    }
    return script;
}
function resetMathJax() {
    for (const el of Array.from(document.querySelectorAll('script[src*="MathJax.js"]'))) {
        el.remove();
    }
    window.MathJax = undefined;
    delete window.MathJax;
}
exports.testing = {
    loadMathJax,
    resetMathJax,
    disableMathJax,
};
const namePattern = new RegExp(`\
^[^a-zA-Z\\d\\s]$\
|\
^[a-zA-Z]*$\
`);
function getUserMacrosPath() {
    const userMacrosPath = CSON.resolve(path.join(atom.getConfigDirPath(), 'markdown-preview-plus'));
    return userMacrosPath != null
        ? userMacrosPath
        : path.join(atom.getConfigDirPath(), 'markdown-preview-plus.cson');
}
function loadMacrosFile(filePath) {
    if (!CSON.isObjectPath(filePath)) {
        return {};
    }
    return CSON.readFileSync(filePath, function (error, object) {
        if (object === undefined) {
            object = {};
        }
        if (error !== undefined) {
            console.warn(`Error reading Latex Macros file '${filePath}': ${error.stack !== undefined ? error.stack : error}`);
            atom.notifications.addError(`Failed to load Latex Macros from '${filePath}'`, { detail: error.message, dismissable: true });
        }
        return object;
    });
}
function loadUserMacros() {
    const userMacrosPath = getUserMacrosPath();
    if (util_1.isFileSync(userMacrosPath)) {
        return loadMacrosFile(userMacrosPath);
    }
    else {
        console.debug('Creating markdown-preview-plus.cson, this is a one-time operation.');
        createMacrosTemplate(userMacrosPath);
        return loadMacrosFile(userMacrosPath);
    }
}
function createMacrosTemplate(filePath) {
    const templatePath = path.join(__dirname, '../assets/macros-template.cson');
    const templateFile = fs.readFileSync(templatePath, 'utf8');
    fs.writeFileSync(filePath, templateFile);
}
function checkMacros(macrosObject) {
    for (const name in macrosObject) {
        const value = macrosObject[name];
        if (!name.match(namePattern) || !valueMatchesPattern(value)) {
            delete macrosObject[name];
            atom.notifications.addError(`Failed to load LaTeX macro named '${name}'. Please see the [LaTeX guide](https://github.com/Galadirith/markdown-preview-plus/blob/master/LATEX.md#macro-names)`, { dismissable: true });
        }
    }
    return macrosObject;
}
function valueMatchesPattern(value) {
    if (Array.isArray(value)) {
        const macroDefinition = value[0];
        const numberOfArgs = value[1];
        if (typeof numberOfArgs === 'number') {
            return numberOfArgs % 1 === 0 && typeof macroDefinition === 'string';
        }
        else {
            return false;
        }
    }
    else if (typeof value === 'string') {
        return true;
    }
    else {
        return false;
    }
}
const configureMathJax = function () {
    let userMacros = loadUserMacros();
    if (userMacros) {
        userMacros = checkMacros(userMacros);
    }
    else {
        userMacros = {};
    }
    MathJax.Hub.Config({
        jax: ['input/TeX', 'output/HTML-CSS'],
        extensions: [],
        TeX: {
            extensions: [
                'AMSmath.js',
                'AMSsymbols.js',
                'noErrors.js',
                'noUndefined.js',
            ],
            Macros: userMacros,
        },
        'HTML-CSS': {
            availableFonts: [],
            webFont: 'TeX',
        },
        messageStyle: 'none',
        showMathMenu: false,
        skipStartupTypeset: true,
    });
    MathJax.Hub.Configured();
    if (atom.inDevMode()) {
        atom.notifications.addSuccess('Loaded maths rendering engine MathJax');
    }
};
function attachMathJaxInternal() {
    if (atom.inDevMode()) {
        atom.notifications.addInfo('Loading maths rendering engine MathJax');
    }
    const script = document.createElement('script');
    script.src = `${require.resolve('MathJax')}?delayStartupUntil=configured`;
    script.type = 'text/javascript';
    script.addEventListener('load', () => {
        configureMathJax();
    });
    document.getElementsByTagName('head')[0].appendChild(script);
    return script;
}
//# sourceMappingURL=data:application/json;base64,