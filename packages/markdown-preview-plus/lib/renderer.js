"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const highlight = require("atom-highlight");
const pandocHelper = require("./pandoc-helper");
const markdownIt = require("./markdown-it-helper");
const extension_helper_1 = require("./extension-helper");
const imageWatcher = require("./image-watch-helper");
const util_1 = require("./util");
const { resourcePath } = atom.getLoadSettings();
const packagePath = path.dirname(__dirname);
async function toDOMFragment(text, filePath, _grammar, renderLaTeX, callback) {
    return render(text, filePath, renderLaTeX, false, function (error, html) {
        if (error !== null) {
            return callback(error);
        }
        const template = document.createElement('template');
        template.innerHTML = html;
        const domFragment = template.content.cloneNode(true);
        return callback(null, domFragment);
    });
}
exports.toDOMFragment = toDOMFragment;
async function toHTML(text, filePath, grammar, renderLaTeX, copyHTMLFlag, callback) {
    if (text === null) {
        text = '';
    }
    return render(text, filePath, renderLaTeX, copyHTMLFlag, function (error, html) {
        let defaultCodeLanguage;
        if (error !== null) {
            callback(error, '');
        }
        if ((grammar && grammar.scopeName) === 'source.litcoffee') {
            defaultCodeLanguage = 'coffee';
        }
        if (!atom.config.get('markdown-preview-plus.enablePandoc') ||
            !atom.config.get('markdown-preview-plus.useNativePandocCodeStyles')) {
            html = tokenizeCodeBlocks(html, defaultCodeLanguage);
        }
        callback(null, html);
    });
}
exports.toHTML = toHTML;
async function render(text, filePath, renderLaTeX, copyHTMLFlag, callback) {
    text = text.replace(/^\s*<!doctype(\s+.*)?>\s*/i, '');
    const callbackFunction = async function (error, html) {
        if (error !== null) {
            callback(error, '');
        }
        html = sanitize(html);
        html = await resolveImagePaths(html, filePath, copyHTMLFlag);
        return callback(null, html.trim());
    };
    if (atom.config.get('markdown-preview-plus.enablePandoc')) {
        return pandocHelper.renderPandoc(text, filePath, renderLaTeX, callbackFunction);
    }
    else {
        return callbackFunction(null, markdownIt.render(text, renderLaTeX));
    }
}
function sanitize(html) {
    const doc = document.createElement('div');
    doc.innerHTML = html;
    doc.querySelectorAll("script:not([type^='math/tex'])").forEach((elem) => {
        elem.remove();
    });
    const attributesToRemove = [
        'onabort',
        'onblur',
        'onchange',
        'onclick',
        'ondbclick',
        'onerror',
        'onfocus',
        'onkeydown',
        'onkeypress',
        'onkeyup',
        'onload',
        'onmousedown',
        'onmousemove',
        'onmouseover',
        'onmouseout',
        'onmouseup',
        'onreset',
        'onresize',
        'onscroll',
        'onselect',
        'onsubmit',
        'onunload',
    ];
    doc.querySelectorAll('*').forEach((elem) => attributesToRemove.map((attribute) => {
        elem.removeAttribute(attribute);
    }));
    return doc.innerHTML;
}
async function resolveImagePaths(html, filePath, copyHTMLFlag) {
    const [rootDirectory] = atom.project.relativizePath(filePath || '');
    const doc = document.createElement('div');
    doc.innerHTML = html;
    await Promise.all(Array.from(doc.querySelectorAll('img')).map(async function (img) {
        let src = img.getAttribute('src');
        if (src) {
            if (!atom.config.get('markdown-preview-plus.enablePandoc')) {
                src = markdownIt.decode(src);
            }
            if (src.match(/^(https?|atom|data):/)) {
                return;
            }
            if (src.startsWith(process.resourcesPath)) {
                return;
            }
            if (src.startsWith(resourcePath)) {
                return;
            }
            if (src.startsWith(packagePath)) {
                return;
            }
            if (src[0] === '/') {
                if (!util_1.isFileSync(src)) {
                    try {
                        if (rootDirectory !== null) {
                            src = path.join(rootDirectory, src.substring(1));
                        }
                    }
                    catch (e) {
                    }
                }
            }
            else if (filePath) {
                src = path.resolve(path.dirname(filePath), src);
            }
            if (!copyHTMLFlag) {
                const v = await imageWatcher.getVersion(src, filePath);
                if (v) {
                    src = `${src}?v=${v}`;
                }
            }
            img.src = src;
        }
        return;
    }));
    return doc.innerHTML;
}
function convertCodeBlocksToAtomEditors(domFragment, defaultLanguage = 'text') {
    const fontFamily = atom.config.get('editor.fontFamily');
    if (fontFamily) {
        for (const codeElement of Array.from(domFragment.querySelectorAll('code'))) {
            codeElement.style.fontFamily = fontFamily;
        }
    }
    for (const preElement of Array.from(domFragment.querySelectorAll('pre'))) {
        const codeBlock = preElement.firstElementChild !== null
            ? preElement.firstElementChild
            : preElement;
        const cbClass = codeBlock.className;
        const fenceName = cbClass
            ? cbClass.replace(/^(lang-|sourceCode )/, '')
            : defaultLanguage;
        const editorElement = document.createElement('atom-text-editor');
        editorElement.setAttributeNode(document.createAttribute('gutter-hidden'));
        editorElement.removeAttribute('tabindex');
        preElement.parentElement.replaceChild(editorElement, preElement);
        const editor = editorElement.getModel();
        if (editor.cursorLineDecorations != null) {
            for (const cursorLineDecoration of editor.cursorLineDecorations) {
                cursorLineDecoration.destroy();
            }
        }
        editor.setText(codeBlock.textContent.replace(/\n$/, ''));
        const grammar = atom.grammars.grammarForScopeName(extension_helper_1.scopeForFenceName(fenceName));
        if (grammar) {
            editor.setGrammar(grammar);
            editorElement.dataset.grammar = grammar.scopeName.replace(/\./g, ' ');
        }
    }
    return domFragment;
}
exports.convertCodeBlocksToAtomEditors = convertCodeBlocksToAtomEditors;
function tokenizeCodeBlocks(html, defaultLanguage = 'text') {
    const doc = document.createElement('div');
    doc.innerHTML = html;
    const fontFamily = atom.config.get('editor.fontFamily');
    if (fontFamily) {
        doc
            .querySelectorAll('code')
            .forEach((code) => (code.style.fontFamily = fontFamily || null));
    }
    doc.querySelectorAll('pre').forEach(function (preElement) {
        const codeBlock = preElement.firstElementChild;
        const fenceName = codeBlock.className.replace(/^(lang-|sourceCode )/, '') || defaultLanguage;
        const highlightedHtml = highlight({
            fileContents: codeBlock.innerText,
            scopeName: extension_helper_1.scopeForFenceName(fenceName),
            nbsp: false,
            lineDivs: false,
            editorDiv: true,
            editorDivTag: 'pre',
            editorDivClass: fenceName
                ? `editor-colors lang-${fenceName}`
                : 'editor-colors',
        });
        preElement.outerHTML = highlightedHtml;
    });
    return doc.innerHTML;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmVuZGVyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFDN0IsNENBQTRDO0FBQzVDLGdEQUFnRDtBQUNoRCxtREFBbUQ7QUFDbkQseURBQXNEO0FBQ3RELHFEQUFxRDtBQUVyRCxpQ0FBbUM7QUFFbkMsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQTtBQUMvQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBRXBDLEtBQUssd0JBQ1YsSUFBWSxFQUNaLFFBQTRCLEVBQzVCLFFBQWEsRUFDYixXQUFvQixFQUNwQixRQUF3RDtJQUV4RCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxVQUNoRCxLQUFtQixFQUNuQixJQUFhO1FBRWIsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDbkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN4QixDQUFDO1FBRUQsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNuRCxRQUFRLENBQUMsU0FBUyxHQUFHLElBQUssQ0FBQTtRQUMxQixNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUVwRCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQTtJQUNwQyxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFyQkQsc0NBcUJDO0FBRU0sS0FBSyxpQkFDVixJQUFtQixFQUNuQixRQUE0QixFQUM1QixPQUE0QixFQUM1QixXQUFvQixFQUNwQixZQUFxQixFQUNyQixRQUFxRDtJQUVyRCxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNsQixJQUFJLEdBQUcsRUFBRSxDQUFBO0lBQ1gsQ0FBQztJQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLFVBQ3ZELEtBQUssRUFDTCxJQUFJO1FBRUosSUFBSSxtQkFBdUMsQ0FBQTtRQUMzQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNuQixRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ3JCLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1lBQzFELG1CQUFtQixHQUFHLFFBQVEsQ0FBQTtRQUNoQyxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQ0QsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsQ0FBQztZQUN0RCxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGlEQUFpRCxDQUNwRSxDQUFDLENBQUMsQ0FBQztZQUNELElBQUksR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsQ0FBQTtRQUN0RCxDQUFDO1FBQ0QsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUN0QixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUEvQkQsd0JBK0JDO0FBRUQsS0FBSyxpQkFDSCxJQUFZLEVBQ1osUUFBNEIsRUFDNUIsV0FBb0IsRUFDcEIsWUFBcUIsRUFDckIsUUFBa0Q7SUFJbEQsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsNEJBQTRCLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFFckQsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLFdBQVUsS0FBbUIsRUFBRSxJQUFZO1FBQ3ZFLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ25CLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDckIsQ0FBQztRQUNELElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDckIsSUFBSSxHQUFHLE1BQU0saUJBQWlCLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQTtRQUM1RCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUNwQyxDQUFDLENBQUE7SUFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRCxNQUFNLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FDOUIsSUFBSSxFQUNKLFFBQVEsRUFDUixXQUFXLEVBQ1gsZ0JBQWdCLENBQ2pCLENBQUE7SUFDSCxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUE7SUFDckUsQ0FBQztBQUNILENBQUM7QUFFRCxrQkFBa0IsSUFBWTtJQUM1QixNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3pDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFBO0lBRXBCLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ3RFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUNmLENBQUMsQ0FBQyxDQUFBO0lBQ0YsTUFBTSxrQkFBa0IsR0FBRztRQUN6QixTQUFTO1FBQ1QsUUFBUTtRQUNSLFVBQVU7UUFDVixTQUFTO1FBQ1QsV0FBVztRQUNYLFNBQVM7UUFDVCxTQUFTO1FBQ1QsV0FBVztRQUNYLFlBQVk7UUFDWixTQUFTO1FBQ1QsUUFBUTtRQUNSLGFBQWE7UUFDYixhQUFhO1FBQ2IsYUFBYTtRQUNiLFlBQVk7UUFDWixXQUFXO1FBQ1gsU0FBUztRQUNULFVBQVU7UUFDVixVQUFVO1FBQ1YsVUFBVTtRQUNWLFVBQVU7UUFDVixVQUFVO0tBQ1gsQ0FBQTtJQUNELEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUN6QyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtRQUNuQyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ2pDLENBQUMsQ0FBQyxDQUNILENBQUE7SUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQTtBQUN0QixDQUFDO0FBRUQsS0FBSyw0QkFDSCxJQUFZLEVBQ1osUUFBNEIsRUFDNUIsWUFBcUI7SUFFckIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUNuRSxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3pDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFBO0lBQ3BCLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FDZixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFdBQVUsR0FBRztRQUM1RCxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ2pDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDUixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzRCxHQUFHLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUM5QixDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsTUFBTSxDQUFBO1lBQ1IsQ0FBQztZQUVELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGFBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BELE1BQU0sQ0FBQTtZQUNSLENBQUM7WUFDRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakMsTUFBTSxDQUFBO1lBQ1IsQ0FBQztZQUNELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxNQUFNLENBQUE7WUFDUixDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ25CLEVBQUUsQ0FBQyxDQUFDLENBQUMsaUJBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3JCLElBQUksQ0FBQzt3QkFDSCxFQUFFLENBQUMsQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQzs0QkFDM0IsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTt3QkFDbEQsQ0FBQztvQkFDSCxDQUFDO29CQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBRWIsQ0FBQztnQkFDSCxDQUFDO1lBQ0gsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1lBQ2pELENBQUM7WUFHRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLE1BQU0sQ0FBQyxHQUFHLE1BQU0sWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUE7Z0JBQ3RELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ04sR0FBRyxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFBO2dCQUN2QixDQUFDO1lBQ0gsQ0FBQztZQUVELEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBO1FBQ2YsQ0FBQztRQUNELE1BQU0sQ0FBQTtJQUNSLENBQUMsQ0FBQyxDQUNILENBQUE7SUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQTtBQUN0QixDQUFDO0FBRUQsd0NBQ0UsV0FBb0IsRUFDcEIsa0JBQTBCLE1BQU07SUFFaEMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtJQUN2RCxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ2YsR0FBRyxDQUFDLENBQUMsTUFBTSxXQUFXLElBQUksS0FBSyxDQUFDLElBQUksQ0FDbEMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUNyQyxDQUFDLENBQUMsQ0FBQztZQUNGLFdBQVcsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQTtRQUMzQyxDQUFDO0lBQ0gsQ0FBQztJQUVELEdBQUcsQ0FBQyxDQUFDLE1BQU0sVUFBVSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sU0FBUyxHQUNiLFVBQVUsQ0FBQyxpQkFBaUIsS0FBSyxJQUFJO1lBQ25DLENBQUMsQ0FBQyxVQUFVLENBQUMsaUJBQWlCO1lBQzlCLENBQUMsQ0FBQyxVQUFVLENBQUE7UUFDaEIsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQTtRQUNuQyxNQUFNLFNBQVMsR0FBRyxPQUFPO1lBQ3ZCLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLHNCQUFzQixFQUFFLEVBQUUsQ0FBQztZQUM3QyxDQUFDLENBQUMsZUFBZSxDQUFBO1FBRW5CLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQzFDLGtCQUFrQixDQUNFLENBQUE7UUFDdEIsYUFBYSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQTtRQUN6RSxhQUFhLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRXpDLFVBQVUsQ0FBQyxhQUFjLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUVqRSxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUE7UUFFdkMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLHFCQUFxQixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDekMsR0FBRyxDQUFDLENBQUMsTUFBTSxvQkFBb0IsSUFBSSxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO2dCQUNoRSxvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtZQUNoQyxDQUFDO1FBQ0gsQ0FBQztRQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFdBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDekQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FDL0Msb0NBQWlCLENBQUMsU0FBUyxDQUFDLENBQzdCLENBQUE7UUFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ1osTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUMxQixhQUFhLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDdkUsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsV0FBVyxDQUFBO0FBQ3BCLENBQUM7QUFsREQsd0VBa0RDO0FBRUQsNEJBQTRCLElBQVksRUFBRSxrQkFBMEIsTUFBTTtJQUN4RSxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3pDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFBO0lBRXBCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUE7SUFDdkQsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNmLEdBQUc7YUFDQSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUM7YUFDeEIsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBQ3BFLENBQUM7SUFFRCxHQUFHLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVMsVUFBVTtRQUNyRCxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsaUJBQWdDLENBQUE7UUFDN0QsTUFBTSxTQUFTLEdBQ2IsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxDQUFDLElBQUksZUFBZSxDQUFBO1FBRzVFLE1BQU0sZUFBZSxHQUFXLFNBQVMsQ0FBQztZQUN4QyxZQUFZLEVBQUUsU0FBUyxDQUFDLFNBQVM7WUFDakMsU0FBUyxFQUFFLG9DQUFpQixDQUFDLFNBQVMsQ0FBQztZQUN2QyxJQUFJLEVBQUUsS0FBSztZQUNYLFFBQVEsRUFBRSxLQUFLO1lBQ2YsU0FBUyxFQUFFLElBQUk7WUFDZixZQUFZLEVBQUUsS0FBSztZQUVuQixjQUFjLEVBQUUsU0FBUztnQkFDdkIsQ0FBQyxDQUFDLHNCQUFzQixTQUFTLEVBQUU7Z0JBQ25DLENBQUMsQ0FBQyxlQUFlO1NBQ3BCLENBQUMsQ0FBQTtRQUVGLFVBQVUsQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFBO0lBQ3hDLENBQUMsQ0FBQyxDQUFBO0lBRUYsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUE7QUFDdEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5pbXBvcnQgaGlnaGxpZ2h0ID0gcmVxdWlyZSgnYXRvbS1oaWdobGlnaHQnKVxuaW1wb3J0IHBhbmRvY0hlbHBlciA9IHJlcXVpcmUoJy4vcGFuZG9jLWhlbHBlcicpXG5pbXBvcnQgbWFya2Rvd25JdCA9IHJlcXVpcmUoJy4vbWFya2Rvd24taXQtaGVscGVyJykgLy8gRGVmZXIgdW50aWwgdXNlZFxuaW1wb3J0IHsgc2NvcGVGb3JGZW5jZU5hbWUgfSBmcm9tICcuL2V4dGVuc2lvbi1oZWxwZXInXG5pbXBvcnQgaW1hZ2VXYXRjaGVyID0gcmVxdWlyZSgnLi9pbWFnZS13YXRjaC1oZWxwZXInKVxuaW1wb3J0IHsgR3JhbW1hciwgVGV4dEVkaXRvckVsZW1lbnQgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgaXNGaWxlU3luYyB9IGZyb20gJy4vdXRpbCdcblxuY29uc3QgeyByZXNvdXJjZVBhdGggfSA9IGF0b20uZ2V0TG9hZFNldHRpbmdzKClcbmNvbnN0IHBhY2thZ2VQYXRoID0gcGF0aC5kaXJuYW1lKF9fZGlybmFtZSlcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRvRE9NRnJhZ21lbnQ8VD4oXG4gIHRleHQ6IHN0cmluZyxcbiAgZmlsZVBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgX2dyYW1tYXI6IGFueSxcbiAgcmVuZGVyTGFUZVg6IGJvb2xlYW4sXG4gIGNhbGxiYWNrOiAoZXJyb3I6IEVycm9yIHwgbnVsbCwgZG9tRnJhZ21lbnQ/OiBOb2RlKSA9PiBULFxuKTogUHJvbWlzZTxUPiB7XG4gIHJldHVybiByZW5kZXIodGV4dCwgZmlsZVBhdGgsIHJlbmRlckxhVGVYLCBmYWxzZSwgZnVuY3Rpb24oXG4gICAgZXJyb3I6IEVycm9yIHwgbnVsbCxcbiAgICBodG1sPzogc3RyaW5nLFxuICApIHtcbiAgICBpZiAoZXJyb3IgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcilcbiAgICB9XG5cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJylcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sIVxuICAgIGNvbnN0IGRvbUZyYWdtZW50ID0gdGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSlcblxuICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBkb21GcmFnbWVudClcbiAgfSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRvSFRNTChcbiAgdGV4dDogc3RyaW5nIHwgbnVsbCxcbiAgZmlsZVBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgZ3JhbW1hcjogR3JhbW1hciB8IHVuZGVmaW5lZCxcbiAgcmVuZGVyTGFUZVg6IGJvb2xlYW4sXG4gIGNvcHlIVE1MRmxhZzogYm9vbGVhbixcbiAgY2FsbGJhY2s6IChlcnJvcjogRXJyb3IgfCBudWxsLCBodG1sOiBzdHJpbmcpID0+IHZvaWQsXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgaWYgKHRleHQgPT09IG51bGwpIHtcbiAgICB0ZXh0ID0gJydcbiAgfVxuICByZXR1cm4gcmVuZGVyKHRleHQsIGZpbGVQYXRoLCByZW5kZXJMYVRlWCwgY29weUhUTUxGbGFnLCBmdW5jdGlvbihcbiAgICBlcnJvcixcbiAgICBodG1sLFxuICApIHtcbiAgICBsZXQgZGVmYXVsdENvZGVMYW5ndWFnZTogc3RyaW5nIHwgdW5kZWZpbmVkXG4gICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgJycpXG4gICAgfVxuICAgIC8vIERlZmF1bHQgY29kZSBibG9ja3MgdG8gYmUgY29mZmVlIGluIExpdGVyYXRlIENvZmZlZVNjcmlwdCBmaWxlc1xuICAgIGlmICgoZ3JhbW1hciAmJiBncmFtbWFyLnNjb3BlTmFtZSkgPT09ICdzb3VyY2UubGl0Y29mZmVlJykge1xuICAgICAgZGVmYXVsdENvZGVMYW5ndWFnZSA9ICdjb2ZmZWUnXG4gICAgfVxuICAgIGlmIChcbiAgICAgICFhdG9tLmNvbmZpZy5nZXQoJ21hcmtkb3duLXByZXZpZXctcGx1cy5lbmFibGVQYW5kb2MnKSB8fFxuICAgICAgIWF0b20uY29uZmlnLmdldCgnbWFya2Rvd24tcHJldmlldy1wbHVzLnVzZU5hdGl2ZVBhbmRvY0NvZGVTdHlsZXMnKVxuICAgICkge1xuICAgICAgaHRtbCA9IHRva2VuaXplQ29kZUJsb2NrcyhodG1sLCBkZWZhdWx0Q29kZUxhbmd1YWdlKVxuICAgIH1cbiAgICBjYWxsYmFjayhudWxsLCBodG1sKVxuICB9KVxufVxuXG5hc3luYyBmdW5jdGlvbiByZW5kZXI8VD4oXG4gIHRleHQ6IHN0cmluZyxcbiAgZmlsZVBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgcmVuZGVyTGFUZVg6IGJvb2xlYW4sXG4gIGNvcHlIVE1MRmxhZzogYm9vbGVhbixcbiAgY2FsbGJhY2s6IChlcnJvcjogRXJyb3IgfCBudWxsLCBodG1sOiBzdHJpbmcpID0+IFQsXG4pOiBQcm9taXNlPFQ+IHtcbiAgLy8gUmVtb3ZlIHRoZSA8IWRvY3R5cGU+IHNpbmNlIG90aGVyd2lzZSBtYXJrZWQgd2lsbCBlc2NhcGUgaXRcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoamovbWFya2VkL2lzc3Vlcy8zNTRcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlxccyo8IWRvY3R5cGUoXFxzKy4qKT8+XFxzKi9pLCAnJylcblxuICBjb25zdCBjYWxsYmFja0Z1bmN0aW9uID0gYXN5bmMgZnVuY3Rpb24oZXJyb3I6IEVycm9yIHwgbnVsbCwgaHRtbDogc3RyaW5nKSB7XG4gICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgJycpXG4gICAgfVxuICAgIGh0bWwgPSBzYW5pdGl6ZShodG1sKVxuICAgIGh0bWwgPSBhd2FpdCByZXNvbHZlSW1hZ2VQYXRocyhodG1sLCBmaWxlUGF0aCwgY29weUhUTUxGbGFnKVxuICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBodG1sLnRyaW0oKSlcbiAgfVxuXG4gIGlmIChhdG9tLmNvbmZpZy5nZXQoJ21hcmtkb3duLXByZXZpZXctcGx1cy5lbmFibGVQYW5kb2MnKSkge1xuICAgIHJldHVybiBwYW5kb2NIZWxwZXIucmVuZGVyUGFuZG9jKFxuICAgICAgdGV4dCxcbiAgICAgIGZpbGVQYXRoLFxuICAgICAgcmVuZGVyTGFUZVgsXG4gICAgICBjYWxsYmFja0Z1bmN0aW9uLFxuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2FsbGJhY2tGdW5jdGlvbihudWxsLCBtYXJrZG93bkl0LnJlbmRlcih0ZXh0LCByZW5kZXJMYVRlWCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gc2FuaXRpemUoaHRtbDogc3RyaW5nKSB7XG4gIGNvbnN0IGRvYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIGRvYy5pbm5lckhUTUwgPSBodG1sXG4gIC8vIERvIG5vdCByZW1vdmUgTWF0aEpheCBzY3JpcHQgZGVsaW1pdGVkIGJsb2Nrc1xuICBkb2MucXVlcnlTZWxlY3RvckFsbChcInNjcmlwdDpub3QoW3R5cGVePSdtYXRoL3RleCddKVwiKS5mb3JFYWNoKChlbGVtKSA9PiB7XG4gICAgZWxlbS5yZW1vdmUoKVxuICB9KVxuICBjb25zdCBhdHRyaWJ1dGVzVG9SZW1vdmUgPSBbXG4gICAgJ29uYWJvcnQnLFxuICAgICdvbmJsdXInLFxuICAgICdvbmNoYW5nZScsXG4gICAgJ29uY2xpY2snLFxuICAgICdvbmRiY2xpY2snLFxuICAgICdvbmVycm9yJyxcbiAgICAnb25mb2N1cycsXG4gICAgJ29ua2V5ZG93bicsXG4gICAgJ29ua2V5cHJlc3MnLFxuICAgICdvbmtleXVwJyxcbiAgICAnb25sb2FkJyxcbiAgICAnb25tb3VzZWRvd24nLFxuICAgICdvbm1vdXNlbW92ZScsXG4gICAgJ29ubW91c2VvdmVyJyxcbiAgICAnb25tb3VzZW91dCcsXG4gICAgJ29ubW91c2V1cCcsXG4gICAgJ29ucmVzZXQnLFxuICAgICdvbnJlc2l6ZScsXG4gICAgJ29uc2Nyb2xsJyxcbiAgICAnb25zZWxlY3QnLFxuICAgICdvbnN1Ym1pdCcsXG4gICAgJ29udW5sb2FkJyxcbiAgXVxuICBkb2MucXVlcnlTZWxlY3RvckFsbCgnKicpLmZvckVhY2goKGVsZW0pID0+XG4gICAgYXR0cmlidXRlc1RvUmVtb3ZlLm1hcCgoYXR0cmlidXRlKSA9PiB7XG4gICAgICBlbGVtLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpXG4gICAgfSksXG4gIClcbiAgcmV0dXJuIGRvYy5pbm5lckhUTUxcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZUltYWdlUGF0aHMoXG4gIGh0bWw6IHN0cmluZyxcbiAgZmlsZVBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgY29weUhUTUxGbGFnOiBib29sZWFuLFxuKSB7XG4gIGNvbnN0IFtyb290RGlyZWN0b3J5XSA9IGF0b20ucHJvamVjdC5yZWxhdGl2aXplUGF0aChmaWxlUGF0aCB8fCAnJylcbiAgY29uc3QgZG9jID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgZG9jLmlubmVySFRNTCA9IGh0bWxcbiAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgQXJyYXkuZnJvbShkb2MucXVlcnlTZWxlY3RvckFsbCgnaW1nJykpLm1hcChhc3luYyBmdW5jdGlvbihpbWcpIHtcbiAgICAgIGxldCBzcmMgPSBpbWcuZ2V0QXR0cmlidXRlKCdzcmMnKVxuICAgICAgaWYgKHNyYykge1xuICAgICAgICBpZiAoIWF0b20uY29uZmlnLmdldCgnbWFya2Rvd24tcHJldmlldy1wbHVzLmVuYWJsZVBhbmRvYycpKSB7XG4gICAgICAgICAgc3JjID0gbWFya2Rvd25JdC5kZWNvZGUoc3JjKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNyYy5tYXRjaCgvXihodHRwcz98YXRvbXxkYXRhKTovKSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKHNyYy5zdGFydHNXaXRoKHByb2Nlc3MucmVzb3VyY2VzUGF0aCBhcyBzdHJpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNyYy5zdGFydHNXaXRoKHJlc291cmNlUGF0aCkpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3JjLnN0YXJ0c1dpdGgocGFja2FnZVBhdGgpKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3JjWzBdID09PSAnLycpIHtcbiAgICAgICAgICBpZiAoIWlzRmlsZVN5bmMoc3JjKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgaWYgKHJvb3REaXJlY3RvcnkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBwYXRoLmpvaW4ocm9vdERpcmVjdG9yeSwgc3JjLnN1YnN0cmluZygxKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAvLyBub29wXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGZpbGVQYXRoKSB7XG4gICAgICAgICAgc3JjID0gcGF0aC5yZXNvbHZlKHBhdGguZGlybmFtZShmaWxlUGF0aCksIHNyYylcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVzZSBtb3N0IHJlY2VudCB2ZXJzaW9uIG9mIGltYWdlXG4gICAgICAgIGlmICghY29weUhUTUxGbGFnKSB7XG4gICAgICAgICAgY29uc3QgdiA9IGF3YWl0IGltYWdlV2F0Y2hlci5nZXRWZXJzaW9uKHNyYywgZmlsZVBhdGgpXG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIHNyYyA9IGAke3NyY30/dj0ke3Z9YFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGltZy5zcmMgPSBzcmNcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH0pLFxuICApXG5cbiAgcmV0dXJuIGRvYy5pbm5lckhUTUxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRDb2RlQmxvY2tzVG9BdG9tRWRpdG9ycyhcbiAgZG9tRnJhZ21lbnQ6IEVsZW1lbnQsXG4gIGRlZmF1bHRMYW5ndWFnZTogc3RyaW5nID0gJ3RleHQnLFxuKSB7XG4gIGNvbnN0IGZvbnRGYW1pbHkgPSBhdG9tLmNvbmZpZy5nZXQoJ2VkaXRvci5mb250RmFtaWx5JylcbiAgaWYgKGZvbnRGYW1pbHkpIHtcbiAgICBmb3IgKGNvbnN0IGNvZGVFbGVtZW50IG9mIEFycmF5LmZyb20oXG4gICAgICBkb21GcmFnbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdjb2RlJyksXG4gICAgKSkge1xuICAgICAgY29kZUVsZW1lbnQuc3R5bGUuZm9udEZhbWlseSA9IGZvbnRGYW1pbHlcbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IHByZUVsZW1lbnQgb2YgQXJyYXkuZnJvbShkb21GcmFnbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwcmUnKSkpIHtcbiAgICBjb25zdCBjb2RlQmxvY2sgPVxuICAgICAgcHJlRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCAhPT0gbnVsbFxuICAgICAgICA/IHByZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICAgICAgOiBwcmVFbGVtZW50XG4gICAgY29uc3QgY2JDbGFzcyA9IGNvZGVCbG9jay5jbGFzc05hbWVcbiAgICBjb25zdCBmZW5jZU5hbWUgPSBjYkNsYXNzXG4gICAgICA/IGNiQ2xhc3MucmVwbGFjZSgvXihsYW5nLXxzb3VyY2VDb2RlICkvLCAnJylcbiAgICAgIDogZGVmYXVsdExhbmd1YWdlXG5cbiAgICBjb25zdCBlZGl0b3JFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICdhdG9tLXRleHQtZWRpdG9yJyxcbiAgICApIGFzIFRleHRFZGl0b3JFbGVtZW50XG4gICAgZWRpdG9yRWxlbWVudC5zZXRBdHRyaWJ1dGVOb2RlKGRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZSgnZ3V0dGVyLWhpZGRlbicpKVxuICAgIGVkaXRvckVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCd0YWJpbmRleCcpIC8vIG1ha2UgcmVhZC1vbmx5XG5cbiAgICBwcmVFbGVtZW50LnBhcmVudEVsZW1lbnQhLnJlcGxhY2VDaGlsZChlZGl0b3JFbGVtZW50LCBwcmVFbGVtZW50KVxuXG4gICAgY29uc3QgZWRpdG9yID0gZWRpdG9yRWxlbWVudC5nZXRNb2RlbCgpXG4gICAgLy8gcmVtb3ZlIHRoZSBkZWZhdWx0IHNlbGVjdGlvbiBvZiBhIGxpbmUgaW4gZWFjaCBlZGl0b3JcbiAgICBpZiAoZWRpdG9yLmN1cnNvckxpbmVEZWNvcmF0aW9ucyAhPSBudWxsKSB7XG4gICAgICBmb3IgKGNvbnN0IGN1cnNvckxpbmVEZWNvcmF0aW9uIG9mIGVkaXRvci5jdXJzb3JMaW5lRGVjb3JhdGlvbnMpIHtcbiAgICAgICAgY3Vyc29yTGluZURlY29yYXRpb24uZGVzdHJveSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZWRpdG9yLnNldFRleHQoY29kZUJsb2NrLnRleHRDb250ZW50IS5yZXBsYWNlKC9cXG4kLywgJycpKVxuICAgIGNvbnN0IGdyYW1tYXIgPSBhdG9tLmdyYW1tYXJzLmdyYW1tYXJGb3JTY29wZU5hbWUoXG4gICAgICBzY29wZUZvckZlbmNlTmFtZShmZW5jZU5hbWUpLFxuICAgIClcbiAgICBpZiAoZ3JhbW1hcikge1xuICAgICAgZWRpdG9yLnNldEdyYW1tYXIoZ3JhbW1hcilcbiAgICAgIGVkaXRvckVsZW1lbnQuZGF0YXNldC5ncmFtbWFyID0gZ3JhbW1hci5zY29wZU5hbWUucmVwbGFjZSgvXFwuL2csICcgJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZG9tRnJhZ21lbnRcbn1cblxuZnVuY3Rpb24gdG9rZW5pemVDb2RlQmxvY2tzKGh0bWw6IHN0cmluZywgZGVmYXVsdExhbmd1YWdlOiBzdHJpbmcgPSAndGV4dCcpIHtcbiAgY29uc3QgZG9jID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgZG9jLmlubmVySFRNTCA9IGh0bWxcblxuICBjb25zdCBmb250RmFtaWx5ID0gYXRvbS5jb25maWcuZ2V0KCdlZGl0b3IuZm9udEZhbWlseScpXG4gIGlmIChmb250RmFtaWx5KSB7XG4gICAgZG9jXG4gICAgICAucXVlcnlTZWxlY3RvckFsbCgnY29kZScpXG4gICAgICAuZm9yRWFjaCgoY29kZSkgPT4gKGNvZGUuc3R5bGUuZm9udEZhbWlseSA9IGZvbnRGYW1pbHkgfHwgbnVsbCkpXG4gIH1cblxuICBkb2MucXVlcnlTZWxlY3RvckFsbCgncHJlJykuZm9yRWFjaChmdW5jdGlvbihwcmVFbGVtZW50KSB7XG4gICAgY29uc3QgY29kZUJsb2NrID0gcHJlRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCBhcyBIVE1MRWxlbWVudFxuICAgIGNvbnN0IGZlbmNlTmFtZSA9XG4gICAgICBjb2RlQmxvY2suY2xhc3NOYW1lLnJlcGxhY2UoL14obGFuZy18c291cmNlQ29kZSApLywgJycpIHx8IGRlZmF1bHRMYW5ndWFnZVxuXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuc2FmZS1hbnkgLy8gVE9ETzogdHNsaW50IGJ1Zz9cbiAgICBjb25zdCBoaWdobGlnaHRlZEh0bWw6IHN0cmluZyA9IGhpZ2hsaWdodCh7XG4gICAgICBmaWxlQ29udGVudHM6IGNvZGVCbG9jay5pbm5lclRleHQsXG4gICAgICBzY29wZU5hbWU6IHNjb3BlRm9yRmVuY2VOYW1lKGZlbmNlTmFtZSksXG4gICAgICBuYnNwOiBmYWxzZSxcbiAgICAgIGxpbmVEaXZzOiBmYWxzZSxcbiAgICAgIGVkaXRvckRpdjogdHJ1ZSxcbiAgICAgIGVkaXRvckRpdlRhZzogJ3ByZScsXG4gICAgICAvLyBUaGUgYGVkaXRvcmAgY2xhc3MgbWVzc2VzIHRoaW5ncyB1cCBhcyBgLmVkaXRvcmAgaGFzIGFic29sdXRlbHkgcG9zaXRpb25lZCBsaW5lc1xuICAgICAgZWRpdG9yRGl2Q2xhc3M6IGZlbmNlTmFtZVxuICAgICAgICA/IGBlZGl0b3ItY29sb3JzIGxhbmctJHtmZW5jZU5hbWV9YFxuICAgICAgICA6ICdlZGl0b3ItY29sb3JzJyxcbiAgICB9KVxuXG4gICAgcHJlRWxlbWVudC5vdXRlckhUTUwgPSBoaWdobGlnaHRlZEh0bWxcbiAgfSlcblxuICByZXR1cm4gZG9jLmlubmVySFRNTFxufVxuIl19