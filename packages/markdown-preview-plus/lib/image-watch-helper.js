"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const cast_1 = require("./cast");
const atom_1 = require("atom");
const util_1 = require("./util");
let imageRegister = {};
const refreshImages = _.debounce(async function (src) {
    for (const item of atom.workspace.getPaneItems()) {
        if (cast_1.isMarkdownPreviewView(item)) {
            await item.refreshImages(src);
        }
    }
}, 250);
function srcClosure(src, event) {
    return function () {
        const i = imageRegister[src];
        if (!i)
            return;
        if (event === 'change' && util_1.isFileSync(src)) {
            i.version = Date.now();
        }
        else {
            i.watcher.dispose();
            delete imageRegister[src];
        }
        util_1.handlePromise(refreshImages(src));
    };
}
function removeFile(file) {
    imageRegister = _.mapValues(imageRegister, function (image) {
        if (!image)
            return image;
        image.files = _.without(image.files, file);
        image.files = _.filter(image.files, util_1.isFileSync);
        if (_.isEmpty(image.files)) {
            image.watched = false;
            image.watcher.dispose();
        }
        return image;
    });
}
exports.removeFile = removeFile;
async function getVersion(image, file) {
    let version;
    const i = imageRegister[image];
    if (!i) {
        if (util_1.isFileSync(image)) {
            version = Date.now();
            const watcher = new atom_1.CompositeDisposable();
            const af = new atom_1.File(image);
            watcher.add(af.onDidChange(srcClosure(image, 'change')), af.onDidDelete(srcClosure(image, 'delete')), af.onDidRename(srcClosure(image, 'rename')));
            imageRegister[image] = {
                path: image,
                watched: true,
                files: file ? [file] : [],
                version,
                watcher,
            };
            return version;
        }
        else {
            return false;
        }
    }
    const files = i.files;
    if (file && !_.includes(files, file)) {
        i.files.push(file);
    }
    version = i.version;
    if (!version && util_1.isFileSync(image)) {
        version = Date.now();
        i.version = version;
    }
    return version;
}
exports.getVersion = getVersion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utd2F0Y2gtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ltYWdlLXdhdGNoLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRCQUE0QjtBQUM1QixpQ0FBOEM7QUFDOUMsK0JBQWdEO0FBQ2hELGlDQUFrRDtBQVVsRCxJQUFJLGFBQWEsR0FFYixFQUFFLENBQUE7QUFFTixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssV0FBVSxHQUFXO0lBQ3pELEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELEVBQUUsQ0FBQyxDQUFDLDRCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVoQyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDL0IsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFFUCxvQkFBb0IsR0FBVyxFQUFFLEtBQXFDO0lBQ3BFLE1BQU0sQ0FBQztRQUNMLE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQTtRQUNkLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxRQUFRLElBQUksaUJBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDeEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtZQUNuQixPQUFPLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMzQixDQUFDO1FBQ0Qsb0JBQWEsQ0FB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SUFDRCxNQUFNLENBQUMsT0FBTyxDQUFBO0FBQ2hCLENBQUM7QUFyQ0QsZ0NBcUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKVxuaW1wb3J0IHsgaXNNYXJrZG93blByZXZpZXdWaWV3IH0gZnJvbSAnLi9jYXN0J1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgRmlsZSB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBoYW5kbGVQcm9taXNlLCBpc0ZpbGVTeW5jIH0gZnJvbSAnLi91dGlsJ1xuXG5pbnRlcmZhY2UgSW1hZ2VSZWdpc3RlclJlYyB7XG4gIHZlcnNpb246IG51bWJlclxuICB3YXRjaGVyOiBDb21wb3NpdGVEaXNwb3NhYmxlXG4gIGZpbGVzOiBzdHJpbmdbXVxuICB3YXRjaGVkOiBib29sZWFuXG4gIHBhdGg6IHN0cmluZ1xufVxuXG5sZXQgaW1hZ2VSZWdpc3Rlcjoge1xuICBba2V5OiBzdHJpbmddOiBJbWFnZVJlZ2lzdGVyUmVjIHwgdW5kZWZpbmVkXG59ID0ge31cblxuY29uc3QgcmVmcmVzaEltYWdlcyA9IF8uZGVib3VuY2UoYXN5bmMgZnVuY3Rpb24oc3JjOiBzdHJpbmcpIHtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGF0b20ud29ya3NwYWNlLmdldFBhbmVJdGVtcygpKSB7XG4gICAgaWYgKGlzTWFya2Rvd25QcmV2aWV3VmlldyhpdGVtKSkge1xuICAgICAgLy8gVE9ETzogY2hlY2sgYWdhaW5zdCBpbWFnZVJlZ2lzdGVyW3NyY10udmVyc2lvbi5maWxlc1xuICAgICAgYXdhaXQgaXRlbS5yZWZyZXNoSW1hZ2VzKHNyYylcbiAgICB9XG4gIH1cbn0sIDI1MClcblxuZnVuY3Rpb24gc3JjQ2xvc3VyZShzcmM6IHN0cmluZywgZXZlbnQ6ICdjaGFuZ2UnIHwgJ2RlbGV0ZScgfCAncmVuYW1lJykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgaSA9IGltYWdlUmVnaXN0ZXJbc3JjXVxuICAgIGlmICghaSkgcmV0dXJuXG4gICAgaWYgKGV2ZW50ID09PSAnY2hhbmdlJyAmJiBpc0ZpbGVTeW5jKHNyYykpIHtcbiAgICAgIGkudmVyc2lvbiA9IERhdGUubm93KClcbiAgICB9IGVsc2Uge1xuICAgICAgaS53YXRjaGVyLmRpc3Bvc2UoKVxuICAgICAgZGVsZXRlIGltYWdlUmVnaXN0ZXJbc3JjXVxuICAgIH1cbiAgICBoYW5kbGVQcm9taXNlKHJlZnJlc2hJbWFnZXMoc3JjKSlcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRmlsZShmaWxlOiBzdHJpbmcpIHtcbiAgaW1hZ2VSZWdpc3RlciA9IF8ubWFwVmFsdWVzKGltYWdlUmVnaXN0ZXIsIGZ1bmN0aW9uKGltYWdlKSB7XG4gICAgaWYgKCFpbWFnZSkgcmV0dXJuIGltYWdlXG4gICAgaW1hZ2UuZmlsZXMgPSBfLndpdGhvdXQoaW1hZ2UuZmlsZXMsIGZpbGUpXG4gICAgaW1hZ2UuZmlsZXMgPSBfLmZpbHRlcihpbWFnZS5maWxlcywgaXNGaWxlU3luYylcbiAgICBpZiAoXy5pc0VtcHR5KGltYWdlLmZpbGVzKSkge1xuICAgICAgaW1hZ2Uud2F0Y2hlZCA9IGZhbHNlXG4gICAgICBpbWFnZS53YXRjaGVyLmRpc3Bvc2UoKVxuICAgIH1cbiAgICByZXR1cm4gaW1hZ2VcbiAgfSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFZlcnNpb24oaW1hZ2U6IHN0cmluZywgZmlsZT86IHN0cmluZykge1xuICBsZXQgdmVyc2lvblxuICBjb25zdCBpID0gaW1hZ2VSZWdpc3RlcltpbWFnZV1cbiAgaWYgKCFpKSB7XG4gICAgaWYgKGlzRmlsZVN5bmMoaW1hZ2UpKSB7XG4gICAgICB2ZXJzaW9uID0gRGF0ZS5ub3coKVxuICAgICAgY29uc3Qgd2F0Y2hlciA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgICAgIGNvbnN0IGFmID0gbmV3IEZpbGUoaW1hZ2UpXG4gICAgICB3YXRjaGVyLmFkZChcbiAgICAgICAgYWYub25EaWRDaGFuZ2Uoc3JjQ2xvc3VyZShpbWFnZSwgJ2NoYW5nZScpKSxcbiAgICAgICAgYWYub25EaWREZWxldGUoc3JjQ2xvc3VyZShpbWFnZSwgJ2RlbGV0ZScpKSxcbiAgICAgICAgYWYub25EaWRSZW5hbWUoc3JjQ2xvc3VyZShpbWFnZSwgJ3JlbmFtZScpKSxcbiAgICAgIClcbiAgICAgIGltYWdlUmVnaXN0ZXJbaW1hZ2VdID0ge1xuICAgICAgICBwYXRoOiBpbWFnZSxcbiAgICAgICAgd2F0Y2hlZDogdHJ1ZSxcbiAgICAgICAgZmlsZXM6IGZpbGUgPyBbZmlsZV0gOiBbXSxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgd2F0Y2hlcixcbiAgICAgIH1cbiAgICAgIHJldHVybiB2ZXJzaW9uXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGZpbGVzOiBzdHJpbmdbXSA9IGkuZmlsZXNcbiAgaWYgKGZpbGUgJiYgIV8uaW5jbHVkZXMoZmlsZXMsIGZpbGUpKSB7XG4gICAgaS5maWxlcy5wdXNoKGZpbGUpXG4gIH1cblxuICB2ZXJzaW9uID0gaS52ZXJzaW9uXG4gIGlmICghdmVyc2lvbiAmJiBpc0ZpbGVTeW5jKGltYWdlKSkge1xuICAgIHZlcnNpb24gPSBEYXRlLm5vdygpXG4gICAgaS52ZXJzaW9uID0gdmVyc2lvblxuICB9XG4gIHJldHVybiB2ZXJzaW9uXG59XG4iXX0=