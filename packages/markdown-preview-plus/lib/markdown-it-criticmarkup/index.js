"use strict";
const specialChars = ['-', '+', '~', '=', '>'];
function isOpening(str, pos) {
    if (str[pos] === '{' &&
        specialChars.includes(str[pos + 1]) &&
        str[pos + 2] === str[pos + 1]) {
        const op = str.slice(pos + 1, pos + 3);
        const cl = op[0] === '>' ? '<<}' : op + '}';
        return [op, cl];
    }
    else {
        return null;
    }
}
function criticInline(state, silent) {
    const { src, pos } = state;
    const tags = isOpening(src, pos);
    if (tags === null)
        return false;
    const [opening, closing] = tags;
    const endPos = src.indexOf(closing, pos + 3);
    const content = endPos >= 0 ? src.slice(pos + 3, endPos) : null;
    if (content === null)
        return false;
    if (silent)
        return true;
    const token = state.push('critic-markup');
    token.content = content;
    token.tag = opening;
    state.pos = endPos + closing.length;
    return true;
}
function criticRender(tokens, idx) {
    const token = tokens[idx];
    const tag = token.tag;
    const content = token.content;
    if (tag === '--') {
        return `<del>${content}</del>`;
    }
    else if (tag === '++') {
        return `<ins>${content}</ins>`;
    }
    else if (tag === '==') {
        return `<mark>${content}</mark>`;
    }
    else if (tag === '>>') {
        return `<span tabindex="-1" class="critic comment"><span>${content}</span></span>`;
    }
    else {
        const arr = content.split('~>');
        if (arr.length === 2) {
            return `<del>${arr[0]}</del><ins>${arr[1]}</ins>`;
        }
        else {
            return `<code>Error: ~> not found.</code>`;
        }
    }
}
module.exports = function (md) {
    md.inline.ruler.before('strikethrough', 'critic-markup', criticInline);
    md.renderer.rules['critic-markup'] = criticRender;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFya2Rvd24taXQtY3JpdGljbWFya3VwL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFrQkEsTUFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFFOUMsU0FBUyxTQUFTLENBQUMsR0FBVyxFQUFFLEdBQVc7SUFDekMsSUFDRSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRztRQUNoQixZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUM3QjtRQUNBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDdEMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFBO1FBQzNDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7S0FDaEI7U0FBTTtRQUNMLE9BQU8sSUFBSSxDQUFBO0tBQ1o7QUFDSCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQ25CLEtBQXdFLEVBQ3hFLE1BQWU7SUFFZixNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQTtJQUMxQixNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ2hDLElBQUksSUFBSSxLQUFLLElBQUk7UUFBRSxPQUFPLEtBQUssQ0FBQTtJQUMvQixNQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQTtJQUMvQixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDNUMsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7SUFDL0QsSUFBSSxPQUFPLEtBQUssSUFBSTtRQUFFLE9BQU8sS0FBSyxDQUFBO0lBQ2xDLElBQUksTUFBTTtRQUFFLE9BQU8sSUFBSSxDQUFBO0lBQ3ZCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUE7SUFDekMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7SUFDdkIsS0FBSyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUE7SUFDbkIsS0FBSyxDQUFDLEdBQUcsR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQTtJQUNuQyxPQUFPLElBQUksQ0FBQTtBQUNiLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxNQUFvQixFQUFFLEdBQVc7SUFDckQsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3pCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUE7SUFDckIsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQTtJQUM3QixJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDaEIsT0FBTyxRQUFRLE9BQU8sUUFBUSxDQUFBO0tBQy9CO1NBQU0sSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO1FBQ3ZCLE9BQU8sUUFBUSxPQUFPLFFBQVEsQ0FBQTtLQUMvQjtTQUFNLElBQUksR0FBRyxLQUFLLElBQUksRUFBRTtRQUN2QixPQUFPLFNBQVMsT0FBTyxTQUFTLENBQUE7S0FDakM7U0FBTSxJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDdkIsT0FBTyxvREFBb0QsT0FBTyxnQkFBZ0IsQ0FBQTtLQUNuRjtTQUFNO1FBRUwsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMvQixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUE7U0FDbEQ7YUFBTTtZQUNMLE9BQU8sbUNBQW1DLENBQUE7U0FDM0M7S0FDRjtBQUNILENBQUM7QUFFRCxpQkFBUyxVQUFTLEVBQW1CO0lBQ25DLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsZUFBZSxFQUFFLFlBQW1CLENBQUMsQ0FBQTtJQUM3RSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsR0FBRyxZQUFZLENBQUE7QUFDbkQsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGluY29ycG9yYXRlcyBjb2RlIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3dhZmVyLWxpL21hcmtkb3duLWl0LWNyaXRpY21hcmt1cFxuLy8gY292ZXJlZCBieSB0aGUgZm9sbG93aW5nIHRlcm1zOlxuLy8gQ29weXJpZ2h0IDIwMTcgV2FmZXIgTGlcbi8vXG4vLyBQZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbi8vIHB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZCwgcHJvdmlkZWQgdGhhdCB0aGUgYWJvdmVcbi8vIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgYXBwZWFyIGluIGFsbCBjb3BpZXMuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVNcbi8vIFdJVEggUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWVxuLy8gU1BFQ0lBTCwgRElSRUNULCBJTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTXG4vLyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NIExPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OXG4vLyBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUiBPVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOXG4vLyBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUiBQRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxuXG5pbXBvcnQgKiBhcyBtZEl0IGZyb20gJ21hcmtkb3duLWl0J1xuXG5jb25zdCBzcGVjaWFsQ2hhcnMgPSBbJy0nLCAnKycsICd+JywgJz0nLCAnPiddXG5cbmZ1bmN0aW9uIGlzT3BlbmluZyhzdHI6IHN0cmluZywgcG9zOiBudW1iZXIpOiBbc3RyaW5nLCBzdHJpbmddIHwgbnVsbCB7XG4gIGlmIChcbiAgICBzdHJbcG9zXSA9PT0gJ3snICYmXG4gICAgc3BlY2lhbENoYXJzLmluY2x1ZGVzKHN0cltwb3MgKyAxXSkgJiZcbiAgICBzdHJbcG9zICsgMl0gPT09IHN0cltwb3MgKyAxXVxuICApIHtcbiAgICBjb25zdCBvcCA9IHN0ci5zbGljZShwb3MgKyAxLCBwb3MgKyAzKVxuICAgIGNvbnN0IGNsID0gb3BbMF0gPT09ICc+JyA/ICc8PH0nIDogb3AgKyAnfSdcbiAgICByZXR1cm4gW29wLCBjbF1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbmZ1bmN0aW9uIGNyaXRpY0lubGluZShcbiAgc3RhdGU6IHsgc3JjOiBzdHJpbmc7IHBvczogbnVtYmVyOyBwdXNoOiAodG9rZW46IHN0cmluZykgPT4gbWRJdC5Ub2tlbiB9LFxuICBzaWxlbnQ6IGJvb2xlYW4sXG4pIHtcbiAgY29uc3QgeyBzcmMsIHBvcyB9ID0gc3RhdGVcbiAgY29uc3QgdGFncyA9IGlzT3BlbmluZyhzcmMsIHBvcylcbiAgaWYgKHRhZ3MgPT09IG51bGwpIHJldHVybiBmYWxzZVxuICBjb25zdCBbb3BlbmluZywgY2xvc2luZ10gPSB0YWdzXG4gIGNvbnN0IGVuZFBvcyA9IHNyYy5pbmRleE9mKGNsb3NpbmcsIHBvcyArIDMpXG4gIGNvbnN0IGNvbnRlbnQgPSBlbmRQb3MgPj0gMCA/IHNyYy5zbGljZShwb3MgKyAzLCBlbmRQb3MpIDogbnVsbFxuICBpZiAoY29udGVudCA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlXG4gIGlmIChzaWxlbnQpIHJldHVybiB0cnVlXG4gIGNvbnN0IHRva2VuID0gc3RhdGUucHVzaCgnY3JpdGljLW1hcmt1cCcpXG4gIHRva2VuLmNvbnRlbnQgPSBjb250ZW50XG4gIHRva2VuLnRhZyA9IG9wZW5pbmdcbiAgc3RhdGUucG9zID0gZW5kUG9zICsgY2xvc2luZy5sZW5ndGhcbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gY3JpdGljUmVuZGVyKHRva2VuczogbWRJdC5Ub2tlbltdLCBpZHg6IG51bWJlcikge1xuICBjb25zdCB0b2tlbiA9IHRva2Vuc1tpZHhdXG4gIGNvbnN0IHRhZyA9IHRva2VuLnRhZ1xuICBjb25zdCBjb250ZW50ID0gdG9rZW4uY29udGVudFxuICBpZiAodGFnID09PSAnLS0nKSB7XG4gICAgcmV0dXJuIGA8ZGVsPiR7Y29udGVudH08L2RlbD5gXG4gIH0gZWxzZSBpZiAodGFnID09PSAnKysnKSB7XG4gICAgcmV0dXJuIGA8aW5zPiR7Y29udGVudH08L2lucz5gXG4gIH0gZWxzZSBpZiAodGFnID09PSAnPT0nKSB7XG4gICAgcmV0dXJuIGA8bWFyaz4ke2NvbnRlbnR9PC9tYXJrPmBcbiAgfSBlbHNlIGlmICh0YWcgPT09ICc+PicpIHtcbiAgICByZXR1cm4gYDxzcGFuIHRhYmluZGV4PVwiLTFcIiBjbGFzcz1cImNyaXRpYyBjb21tZW50XCI+PHNwYW4+JHtjb250ZW50fTwvc3Bhbj48L3NwYW4+YFxuICB9IGVsc2Uge1xuICAgIC8vIHt+flt0ZXh0MV1+Plt0ZXh0Ml1+fn1cbiAgICBjb25zdCBhcnIgPSBjb250ZW50LnNwbGl0KCd+PicpXG4gICAgaWYgKGFyci5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldHVybiBgPGRlbD4ke2FyclswXX08L2RlbD48aW5zPiR7YXJyWzFdfTwvaW5zPmBcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGA8Y29kZT5FcnJvcjogfj4gbm90IGZvdW5kLjwvY29kZT5gXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCA9IGZ1bmN0aW9uKG1kOiBtZEl0Lk1hcmtkb3duSXQpIHtcbiAgbWQuaW5saW5lLnJ1bGVyLmJlZm9yZSgnc3RyaWtldGhyb3VnaCcsICdjcml0aWMtbWFya3VwJywgY3JpdGljSW5saW5lIGFzIGFueSlcbiAgbWQucmVuZGVyZXIucnVsZXNbJ2NyaXRpYy1tYXJrdXAnXSA9IGNyaXRpY1JlbmRlclxufVxuIl19