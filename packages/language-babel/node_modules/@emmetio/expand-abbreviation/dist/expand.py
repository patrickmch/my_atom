__all__ = ['expand']

# Don't look below, you will not understand this Python code :) I don't.

from js2py.pyjs import *
# setting scope
var = Scope( JS_BUILTINS )
set_global_object(var)

# Code follows:
var.registers([])
@Js
def PyJs_anonymous_0_(exports, this, arguments, var=var):
    var = Scope({u'this':this, u'exports':exports, u'arguments':arguments}, var)
    var.registers([u'isAlphaNumericWord', u'isIdentPrefix', u'reNameChar', u'findLowestIndexField', u'DOUBLE_QUOTE', u'CSSSnippet', u'handlePseudoSnippet', u'isAlpha', u'setNodeAsText', u'findRepeater', u'splitFieldsModel', u'reAttributeName', u'find', u'notGroup', u'numberingToken', u'html$1', u'consumeIdent', u'commentOptions', u'isKeyword$1', u'formatNodeValue$1', u'eatAlphaWord', u'insertContentIntoPlaceholder', u'reSpaceChar', u'unroll', u'isQuote', u'consumeElement', u'snippetsRegistryFactory', u'TAB', u'resolveNode$1', u'replaceInString', u'DOLLAR$1', u'expand$1', u'expand$2', u'splitByLines', u'isRepeating', u'tokenTypeOf', u'consumeQuoted$1', u'updateFormatting', u'Keyword', u'shouldFormatNode', u'replaceNumberingRanges', u'stringifyAttributeList', u'secondaryAttrs', u'choice', u'DASH', u'consumeValue', u'inlineElements', u'hasInnerFormatting', u'injectIntoField', u'AT$1', u'ESCAPE', u'expand$$1', u'findDeepestNode$1', u'isNumber', u'sp', u'supportedSyntaxed', u'reElement', u'insert', u'parse$4', u'parse$5', u'parse$2', u'getIndentLevel$1', u'parse$1', u'index$7', u'eatSpace', u'implicitTags', u'reUrl', u'index$3', u'index$2', u'getBlockName', u'TOKEN_OPEN', u'merge', u'findDeepestNode', u'SnippetsRegistry', u'defaultFieldsRenderer', u'reNl$2', u'getNumberingRanges', u'insertContent', u'index$5', u'xsl', u'index$4', u'getIndentLevel', u'reClass', u'isNumber$1', u'defaultOptions', u'eatWhile', u'createOptions', u'reLorem', u'index$1', u'eatAlphaNumericWord', u'ru', u'consumeTextNode', u'index', u'stylesheetSyntaxes', u'parse$$1', u'isFirstChild', u'sum', u'SPACE', u'getAttributes', u'stringScore', u'paragraph', u'COLON', u'isNumericValue', u'template', u'pad$1', u'unescapeString', u'isInline', u'supports', u'nest', u'toHex', u'Node', u'latin', u'run', u'strcase', u'unitlessProperties', u'eatKeyword', u'pug', u'reUnquotedValueChar', u'reEmail', u'blockCandidates2', u'blockCandidates1', u'expandShortNotation', u'langs', u'defaultOptions$4', u'placeholder', u'setNodeContent', u'defaultAttrOptions', u'formatNodeValue', u'LBRACE', u'last', u'createProfile', u'isPseudoSnippet', u'Node$2', u'prototypeAccessors$3', u'loremGenerator', u'prototypeAccessors$1', u'range', u'FieldString', u'defaultField', u'addons', u'prototypeAccessors', u'SINGLE_QUOTE', u'snippetsSort', u'defaultNodeOptions', u'isKeyword', u'rand', u'isHex', u'replaceRanges', u'render', u'sentence', u'shouldFormatInline', u'findBestMatch', u'replace', u'consumeAttributes', u'splitValue', u'consumeQuoted', u'isRoot$1', u'resolveImplicitName', u'DOT', u'splitByLines$1', u'caret', u'createToken', u'SnippetsStorage', u'escapeCode', u'prepare', u'normalize$1', u'applyNumbering$1', u'syntaxFormat', u'replaceNumbering', u'mark', u'replaceInNode', u'resolveNumericValue', u'reSupporterNames', u'unitAliases', u'Attribute$1', u'consumeKeyword', u'stringifyAttribute', u'PLUS', u'isKeyword$1$1', u'StreamReader', u'createModel', u'slim', u'HASH', u'findUnescapedTokens', u'isAlphaWord', u'getFormat', u'consumeNumericValue', u'replaceVariables', u'PERCENT', u'haml', u'expandClassNames', u'DOLLAR$1$1', u'TOKEN', u'setFormatting', u'capitalize', u'consumeArgumentList', u'sample', u'consumeArgument', u'TOKEN_CLOSE', u'bem', u'Attribute', u'reNl$1', u'indentFormat', u'supportedAddons', u'RBRACE', u'toShortHex', u'mergeClassNames', u'cssSnippets', u'consumeKeywordOrFunction', u'prototypeAccessors$4', u'isShortHex', u'elementMap', u'createAttribute', u'isStylesheet', u'reProperty', u'prototypeAccessors$2', u'consumeField', u'pad', u'css$1', u'reModifier', u'DOT$1', u'Snippet', u'Field', u'consumePlaceholder', u'DASH$1$1', u'DASH$1$2', u'isInline$1', u'formatAttributes', u'replacePlaceholder', u'consumeColor', u'normalize', u'reProto', u'updateFormatting$2', u'NumericValue', u'globalKeywords', u'index$8', u'supports$1', u'OutputNode', u'isWhite', u'updateFormatting$1', u'OPEN_BRACE', u'html', u'commentNode', u'FunctionCall', u'DASH$2', u'insertCommas', u'css', u'DASH$1', u'Profile', u'uniqueClass$1', u'isRoot', u'applyNumbering', u'defaultOptions$3', u'defaultOptions$2', u'defaultOptions$1', u'resolveAsSnippet', u'DOLLAR', u'resolveAsProperty', u'QuotedString', u'reId', u'consumeIndex', u'resolveNode', u'getFieldsModel', u'AT', u'CLOSE_BRACE', u'isIdent', u'EXCL', u'jsx', u'createSnippetsRegistry', u'formatNodeValue$2', u'mergeAttributes', u'getUnmatchedPart', u'exports', u'index$6', u'Color', u'createAttribute$1', u'CSSValue', u'reNl', u'consumeRepeat', u'createBlockLookup', u'isInlineElement', u'uniqueClass', u'eatNumber', u'COMMA', u'defaultVariables'])
    @Js
    def PyJsHoisted_isIdentPrefix_(code, this, arguments, var=var):
        var = Scope({u'this':this, u'code':code, u'arguments':arguments}, var)
        var.registers([u'code'])
        return ((PyJsStrictEq(var.get(u'code'),var.get(u'AT')) or PyJsStrictEq(var.get(u'code'),var.get(u'DOLLAR$1$1'))) or PyJsStrictEq(var.get(u'code'),var.get(u'EXCL')))
    PyJsHoisted_isIdentPrefix_.func_name = u'isIdentPrefix'
    var.put(u'isIdentPrefix', PyJsHoisted_isIdentPrefix_)
    @Js
    def PyJsHoisted_findLowestIndexField_(model, this, arguments, var=var):
        var = Scope({u'this':this, u'model':model, u'arguments':arguments}, var)
        var.registers([u'model'])
        @Js
        def PyJs_anonymous_187_(result, field, this, arguments, var=var):
            var = Scope({u'this':this, u'field':field, u'result':result, u'arguments':arguments}, var)
            var.registers([u'field', u'result'])
            return (var.get(u'field') if (var.get(u'result').neg() or (var.get(u'field').get(u'index')<var.get(u'result').get(u'index'))) else var.get(u'result'))
        PyJs_anonymous_187_._set_name(u'anonymous')
        return var.get(u'model').get(u'fields').callprop(u'reduce', PyJs_anonymous_187_, var.get(u"null"))
    PyJsHoisted_findLowestIndexField_.func_name = u'findLowestIndexField'
    var.put(u'findLowestIndexField', PyJsHoisted_findLowestIndexField_)
    @Js
    def PyJsHoisted_handlePseudoSnippet_(outNode, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'outNode':outNode}, var)
        var.registers([u'node', u'field', u'parts', u'fieldsModel', u'outNode'])
        var.put(u'node', var.get(u'outNode').get(u'node'))
        if var.get(u'isPseudoSnippet')(var.get(u'node')):
            var.put(u'fieldsModel', var.get(u'parse$4')(var.get(u'node').get(u'value')))
            var.put(u'field', var.get(u'findLowestIndexField')(var.get(u'fieldsModel')))
            if var.get(u'field'):
                var.put(u'parts', var.get(u'splitFieldsModel')(var.get(u'fieldsModel'), var.get(u'field')))
                var.get(u'outNode').put(u'open', var.get(u'outNode').callprop(u'renderFields', var.get(u'parts').get(u'0')))
                var.get(u'outNode').put(u'close', var.get(u'outNode').callprop(u'renderFields', var.get(u'parts').get(u'1')))
            else:
                var.get(u'outNode').put(u'text', var.get(u'outNode').callprop(u'renderFields', var.get(u'fieldsModel')))
            return var.get(u'true')
        return Js(False)
    PyJsHoisted_handlePseudoSnippet_.func_name = u'handlePseudoSnippet'
    var.put(u'handlePseudoSnippet', PyJsHoisted_handlePseudoSnippet_)
    @Js
    def PyJsHoisted_isAlpha_(code, PyJsArg_66726f6d_, to, this, arguments, var=var):
        var = Scope({u'this':this, u'to':to, u'code':code, u'from':PyJsArg_66726f6d_, u'arguments':arguments}, var)
        var.registers([u'to', u'code', u'from'])
        var.put(u'from', (var.get(u'from') or Js(65.0)))
        var.put(u'to', (var.get(u'to') or Js(90.0)))
        var.put(u'code', (~Js(32.0)), u'&')
        return ((var.get(u'code')>=var.get(u'from')) and (var.get(u'code')<=var.get(u'to')))
    PyJsHoisted_isAlpha_.func_name = u'isAlpha'
    var.put(u'isAlpha', PyJsHoisted_isAlpha_)
    @Js
    def PyJsHoisted_setNodeAsText_(node, text, this, arguments, var=var):
        var = Scope({u'node':node, u'text':text, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'text'])
        var.get(u'node').put(u'name', var.get(u"null"))
        var.get(u'node').put(u'value', var.get(u'text'))
        return var.get(u'node')
    PyJsHoisted_setNodeAsText_.func_name = u'setNodeAsText'
    var.put(u'setNodeAsText', PyJsHoisted_setNodeAsText_)
    @Js
    def PyJsHoisted_findRepeater_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node'])
        while var.get(u'node'):
            if var.get(u'node').get(u'repeat'):
                return var.get(u'node').get(u'repeat')
            var.put(u'node', var.get(u'node').get(u'parent'))
    PyJsHoisted_findRepeater_.func_name = u'findRepeater'
    var.put(u'findRepeater', PyJsHoisted_findRepeater_)
    @Js
    def PyJsHoisted_splitFieldsModel_(model, field, this, arguments, var=var):
        var = Scope({u'this':this, u'field':field, u'model':model, u'arguments':arguments}, var)
        var.registers([u'ix', u'model', u'right', u'field', u'left'])
        var.put(u'ix', var.get(u'model').get(u'fields').callprop(u'indexOf', var.get(u'field')))
        var.put(u'left', var.get(u'model').get(u'constructor').create(var.get(u'model').get(u'string').callprop(u'slice', Js(0.0), var.get(u'field').get(u'location')), var.get(u'model').get(u'fields').callprop(u'slice', Js(0.0), var.get(u'ix'))))
        var.put(u'right', var.get(u'model').get(u'constructor').create(var.get(u'model').get(u'string').callprop(u'slice', (var.get(u'field').get(u'location')+var.get(u'field').get(u'length'))), var.get(u'model').get(u'fields').callprop(u'slice', (var.get(u'ix')+Js(1.0)))))
        return Js([var.get(u'left'), var.get(u'right')])
    PyJsHoisted_splitFieldsModel_.func_name = u'splitFieldsModel'
    var.put(u'splitFieldsModel', PyJsHoisted_splitFieldsModel_)
    @Js
    def PyJsHoisted_find_(arr, filter, this, arguments, var=var):
        var = Scope({u'filter':filter, u'this':this, u'arr':arr, u'arguments':arguments}, var)
        var.registers([u'filter', u'arr'])
        return var.get(u'arr').callprop(u'filter', var.get(u'filter')).get(u'0')
    PyJsHoisted_find_.func_name = u'find'
    var.put(u'find', PyJsHoisted_find_)
    @Js
    def PyJsHoisted_isFirstChild_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node'])
        return PyJsStrictEq(var.get(u'node').get(u'parent').get(u'firstChild'),var.get(u'node'))
    PyJsHoisted_isFirstChild_.func_name = u'isFirstChild'
    var.put(u'isFirstChild', PyJsHoisted_isFirstChild_)
    @Js
    def PyJsHoistedNonPyName(str, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
        var.registers([u'str'])
        return JsRegExp(u'/^\\s*[\\w\\-]+/').callprop(u'test', var.get(u'str'))
    PyJsHoistedNonPyName.func_name = u'isKeyword$1'
    var.put(u'isKeyword$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(code, this, arguments, var=var):
        var = Scope({u'this':this, u'code':code, u'arguments':arguments}, var)
        var.registers([u'code'])
        return ((var.get(u'code')>Js(47.0)) and (var.get(u'code')<Js(58.0)))
    PyJsHoistedNonPyName.func_name = u'isNumber$1'
    var.put(u'isNumber$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_eatAlphaWord_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'stream'])
        return var.get(u'eatWhile')(var.get(u'stream'), var.get(u'isAlphaWord'))
    PyJsHoisted_eatAlphaWord_.func_name = u'eatAlphaWord'
    var.put(u'eatAlphaWord', PyJsHoisted_eatAlphaWord_)
    @Js
    def PyJsHoisted_insertContentIntoPlaceholder_(node, content, this, arguments, var=var):
        var = Scope({u'node':node, u'content':content, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'content', u'state'])
        PyJs_Object_140_ = Js({u'replaced':Js(False)})
        var.put(u'state', PyJs_Object_140_)
        var.get(u'node').put(u'value', var.get(u'replacePlaceholder')(var.get(u'node').get(u'value'), var.get(u'content'), var.get(u'state')))
        @Js
        def PyJs_anonymous_141_(attr, this, arguments, var=var):
            var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
            var.registers([u'attr'])
            if var.get(u'attr').get(u'value'):
                var.get(u'node').callprop(u'setAttribute', var.get(u'attr').get(u'name'), var.get(u'replacePlaceholder')(var.get(u'attr').get(u'value'), var.get(u'content'), var.get(u'state')))
        PyJs_anonymous_141_._set_name(u'anonymous')
        var.get(u'node').get(u'attributes').callprop(u'forEach', PyJs_anonymous_141_)
        return var.get(u'state').get(u'replaced')
    PyJsHoisted_insertContentIntoPlaceholder_.func_name = u'insertContentIntoPlaceholder'
    var.put(u'insertContentIntoPlaceholder', PyJsHoisted_insertContentIntoPlaceholder_)
    @Js
    def PyJsHoisted_shouldFormatNode_(node, profile, this, arguments, var=var):
        var = Scope({u'node':node, u'profile':profile, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'profile'])
        if var.get(u'profile').callprop(u'get', Js(u'format')).neg():
            return Js(False)
        if ((var.get(u'node').get(u'parent').get(u'isTextOnly') and PyJsStrictEq(var.get(u'node').get(u'parent').get(u'children').get(u'length'),Js(1.0))) and var.get(u'parse$4')(var.get(u'node').get(u'parent').get(u'value')).get(u'fields').get(u'length')):
            return Js(False)
        return (var.get(u'shouldFormatInline')(var.get(u'node'), var.get(u'profile')) if var.get(u'isInline')(var.get(u'node'), var.get(u'profile')) else var.get(u'true'))
    PyJsHoisted_shouldFormatNode_.func_name = u'shouldFormatNode'
    var.put(u'shouldFormatNode', PyJsHoisted_shouldFormatNode_)
    @Js
    def PyJsHoisted_unroll_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'i', u'node', u'clone'])
        if (var.get(u'node').get(u'repeat').neg() or var.get(u'node').get(u'repeat').get(u'count').neg()):
            return var.get('undefined')
        #for JS loop
        var.put(u'i', Js(1.0))
        while (var.get(u'i')<var.get(u'node').get(u'repeat').get(u'count')):
            try:
                var.put(u'clone', var.get(u'node').callprop(u'clone', var.get(u'true')))
                var.get(u'clone').get(u'repeat').put(u'value', var.get(u'i'))
                var.get(u'clone').callprop(u'walk', var.get(u'unroll'))
                var.get(u'node').get(u'parent').callprop(u'insertBefore', var.get(u'clone'), var.get(u'node'))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        var.get(u'node').get(u'repeat').put(u'value', var.get(u'node').get(u'repeat').get(u'count'))
    PyJsHoisted_unroll_.func_name = u'unroll'
    var.put(u'unroll', PyJsHoisted_unroll_)
    @Js
    def PyJsHoisted_isQuote_(ch, this, arguments, var=var):
        var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
        var.registers([u'ch'])
        return (PyJsStrictEq(var.get(u'ch'),Js(u'"')) or PyJsStrictEq(var.get(u'ch'),Js(u"'")))
    PyJsHoisted_isQuote_.func_name = u'isQuote'
    var.put(u'isQuote', PyJsHoisted_isQuote_)
    @Js
    def PyJsHoistedNonPyName(node, snippets, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'snippets':snippets}, var)
        var.registers([u'snippet', u'node', u'snippets'])
        var.put(u'snippet', var.get(u'findBestMatch')(var.get(u'node').get(u'name'), var.get(u'snippets'), Js(u'key')))
        if var.get(u'snippet').neg():
            return (var.get(u'setNodeAsText')(var.get(u'node'), Js(u'!important')) if PyJsStrictEq(var.get(u'node').get(u'name'),Js(u'!')) else var.get(u'node'))
        return (var.get(u'resolveAsProperty')(var.get(u'node'), var.get(u'snippet')) if var.get(u'snippet').get(u'property') else var.get(u'resolveAsSnippet')(var.get(u'node'), var.get(u'snippet')))
    PyJsHoistedNonPyName.func_name = u'resolveNode$1'
    var.put(u'resolveNode$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_replaceInString_(string, variables, this, arguments, var=var):
        var = Scope({u'this':this, u'variables':variables, u'string':string, u'arguments':arguments}, var)
        var.registers([u'string', u'i', u'variables', u'offset', u'value', u'il', u'v', u'output', u'model'])
        var.put(u'model', var.get(u'createModel')(var.get(u'string')))
        var.put(u'offset', Js(0.0))
        var.put(u'output', Js(u''))
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'il', var.get(u'model').get(u'variables').get(u'length'))
        while (var.get(u'i')<var.get(u'il')):
            try:
                var.put(u'v', var.get(u'model').get(u'variables').get(var.get(u'i')))
                var.put(u'value', (var.get(u'variables').get(var.get(u'v').get(u'name')) if var.get(u'variables').contains(var.get(u'v').get(u'name')) else var.get(u'v').get(u'name')))
                if PyJsStrictEq(var.get(u'value',throw=False).typeof(),Js(u'function')):
                    var.put(u'value', var.get(u'value')(var.get(u'model').get(u'string'), var.get(u'v'), (var.get(u'offset')+var.get(u'v').get(u'location'))))
                var.put(u'output', (var.get(u'model').get(u'string').callprop(u'slice', var.get(u'offset'), var.get(u'v').get(u'location'))+var.get(u'value')), u'+')
                var.put(u'offset', (var.get(u'v').get(u'location')+var.get(u'v').get(u'length')))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return (var.get(u'output')+var.get(u'model').get(u'string').callprop(u'slice', var.get(u'offset')))
    PyJsHoisted_replaceInString_.func_name = u'replaceInString'
    var.put(u'replaceInString', PyJsHoisted_replaceInString_)
    @Js
    def PyJsHoistedNonPyName(abbr, options, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'abbr':abbr, u'options':options}, var)
        var.registers([u'abbr', u'options'])
        PyJs_Object_233_ = Js({})
        var.put(u'options', (var.get(u'options') or PyJs_Object_233_))
        if PyJsStrictEq(var.get(u'abbr',throw=False).typeof(),Js(u'string')):
            var.put(u'abbr', var.get(u'parse$1')(var.get(u'abbr'), var.get(u'options')))
        return var.get(u'index$3')(var.get(u'abbr'), var.get(u'options').get(u'profile'), var.get(u'options').get(u'syntax'), var.get(u'options').get(u'format'))
    PyJsHoistedNonPyName.func_name = u'expand$1'
    var.put(u'expand$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(abbr, options, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'abbr':abbr, u'options':options}, var)
        var.registers([u'abbr', u'options'])
        PyJs_Object_339_ = Js({})
        var.put(u'options', (var.get(u'options') or PyJs_Object_339_))
        if PyJsStrictEq(var.get(u'abbr',throw=False).typeof(),Js(u'string')):
            var.put(u'abbr', var.get(u'parse$5')(var.get(u'abbr'), var.get(u'options')))
        return var.get(u'index$6')(var.get(u'abbr'), var.get(u'options').get(u'profile'), var.get(u'options').get(u'syntax'), var.get(u'options').get(u'format'))
    PyJsHoistedNonPyName.func_name = u'expand$2'
    var.put(u'expand$2', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_tokenTypeOf_(token, type, this, arguments, var=var):
        var = Scope({u'this':this, u'token':token, u'type':type, u'arguments':arguments}, var)
        var.registers([u'token', u'type'])
        return ((var.get(u'token') and PyJsStrictEq(var.get(u'token',throw=False).typeof(),Js(u'object'))) and PyJsStrictEq(var.get(u'token').get(u'type'),var.get(u'type')))
    PyJsHoisted_tokenTypeOf_.func_name = u'tokenTypeOf'
    var.put(u'tokenTypeOf', PyJsHoisted_tokenTypeOf_)
    @Js
    def PyJsHoisted_updateFormatting_(outNode, profile, this, arguments, var=var):
        var = Scope({u'profile':profile, u'this':this, u'arguments':arguments, u'outNode':outNode}, var)
        var.registers([u'node', u'profile', u'outNode'])
        var.put(u'node', var.get(u'outNode').get(u'node'))
        if (var.get(u'node').get(u'isTextOnly').neg() and var.get(u'node').get(u'value')):
            var.get(u'outNode').put(u'beforeText', (((var.get(u'outNode').get(u'newline')+var.get(u'outNode').get(u'indent'))+var.get(u'profile').callprop(u'indent', Js(1.0))) if var.get(u'reNl').callprop(u'test', var.get(u'node').get(u'value')) else Js(u' ')))
        return var.get(u'outNode')
    PyJsHoisted_updateFormatting_.func_name = u'updateFormatting'
    var.put(u'updateFormatting', PyJsHoisted_updateFormatting_)
    @Js
    def PyJsHoisted_replaceNumberingRanges_(str, ranges, value, this, arguments, var=var):
        var = Scope({u'ranges':ranges, u'this':this, u'value':value, u'str':str, u'arguments':arguments}, var)
        var.registers([u'ranges', u'replaced', u'value', u'str'])
        @Js
        def PyJs_anonymous_136_(token, this, arguments, var=var):
            var = Scope({u'this':this, u'token':token, u'arguments':arguments}, var)
            var.registers([u'_value', u'token'])
            var.put(u'_value', var.get(u'String')(var.get(u'value')))
            while (var.get(u'_value').get(u'length')<var.get(u'token').get(u'length')):
                var.put(u'_value', (Js(u'0')+var.get(u'_value')))
            return var.get(u'_value')
        PyJs_anonymous_136_._set_name(u'anonymous')
        var.put(u'replaced', var.get(u'replaceRanges')(var.get(u'str'), var.get(u'ranges'), PyJs_anonymous_136_))
        return var.get(u'unescapeString')(var.get(u'replaced'))
    PyJsHoisted_replaceNumberingRanges_.func_name = u'replaceNumberingRanges'
    var.put(u'replaceNumberingRanges', PyJsHoisted_replaceNumberingRanges_)
    @Js
    def PyJsHoisted_stringifyAttributeList_(attributes, options, this, arguments, var=var):
        var = Scope({u'this':this, u'attributes':attributes, u'options':options, u'arguments':arguments}, var)
        var.registers([u'attributes', u'options'])
        @Js
        def PyJs_anonymous_329_(attr, this, arguments, var=var):
            var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
            var.registers([u'attr'])
            return var.get(u'stringifyAttribute')(var.get(u'attr'), var.get(u'options'))
        PyJs_anonymous_329_._set_name(u'anonymous')
        return var.get(u'attributes').callprop(u'map', PyJs_anonymous_329_).callprop(u'join', Js(u', '))
    PyJsHoisted_stringifyAttributeList_.func_name = u'stringifyAttributeList'
    var.put(u'stringifyAttributeList', PyJsHoisted_stringifyAttributeList_)
    @Js
    def PyJsHoisted_choice_(val, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'val':val}, var)
        var.registers([u'val'])
        return var.get(u'val').get(var.get(u'rand')(Js(0.0), (var.get(u'val').get(u'length')-Js(1.0))))
    PyJsHoisted_choice_.func_name = u'choice'
    var.put(u'choice', PyJsHoisted_choice_)
    @Js
    def PyJsHoisted_getUnmatchedPart_(abbr, string, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'abbr':abbr, u'string':string}, var)
        var.registers([u'i', u'lastPos', u'abbr', u'string'])
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'lastPos', Js(0.0))
        while (var.get(u'i')<var.get(u'abbr').get(u'length')):
            try:
                var.put(u'lastPos', var.get(u'string').callprop(u'indexOf', var.get(u'abbr').get(var.get(u'i')), var.get(u'lastPos')))
                if PyJsStrictEq(var.get(u'lastPos'),(-Js(1.0))):
                    return var.get(u'abbr').callprop(u'slice', var.get(u'i'))
                (var.put(u'lastPos',Js(var.get(u'lastPos').to_number())+Js(1))-Js(1))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return Js(u'')
    PyJsHoisted_getUnmatchedPart_.func_name = u'getUnmatchedPart'
    var.put(u'getUnmatchedPart', PyJsHoisted_getUnmatchedPart_)
    @Js
    def PyJsHoisted_consumeValue_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'values', u'stream', u'value'])
        var.put(u'values', var.get(u'CSSValue').create())
        pass
        while var.get(u'stream').callprop(u'eol').neg():
            if var.put(u'value', (var.get(u'consumeNumericValue')(var.get(u'stream')) or var.get(u'consumeColor')(var.get(u'stream')))):
                if var.get(u'value').get(u'unit').neg():
                    var.get(u'stream').callprop(u'eat', var.get(u'DASH'))
            else:
                var.get(u'stream').callprop(u'eat', var.get(u'DASH'))
                var.put(u'value', var.get(u'consumeKeyword')(var.get(u'stream'), var.get(u'true')))
            if var.get(u'value').neg():
                break
            var.get(u'values').callprop(u'add', var.get(u'value'))
        return var.get(u'values')
    PyJsHoisted_consumeValue_.func_name = u'consumeValue'
    var.put(u'consumeValue', PyJsHoisted_consumeValue_)
    @Js
    def PyJsHoisted_hasInnerFormatting_(node, profile, this, arguments, var=var):
        var = Scope({u'node':node, u'profile':profile, u'this':this, u'arguments':arguments}, var)
        var.registers([u'i', u'node', u'profile', u'nodeName'])
        var.put(u'nodeName', (var.get(u'node').get(u'name') or Js(u'')).callprop(u'toLowerCase'))
        if PyJsStrictNeq(var.get(u'profile').callprop(u'get', Js(u'formatForce')).callprop(u'indexOf', var.get(u'nodeName')),(-Js(1.0))):
            return var.get(u'true')
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'node').get(u'children').get(u'length')):
            try:
                if var.get(u'shouldFormatNode')(var.get(u'node').get(u'children').get(var.get(u'i')), var.get(u'profile')):
                    return var.get(u'true')
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return Js(False)
    PyJsHoisted_hasInnerFormatting_.func_name = u'hasInnerFormatting'
    var.put(u'hasInnerFormatting', PyJsHoisted_hasInnerFormatting_)
    @Js
    def PyJsHoisted_injectIntoField_(string, value, this, arguments, var=var):
        var = Scope({u'this':this, u'string':string, u'value':value, u'arguments':arguments}, var)
        var.registers([u'string', u'i', u'value', u'field', u'il', u'fieldsModel'])
        var.put(u'fieldsModel', var.get(u'parse$4')(var.get(u'string')))
        if var.get(u'fieldsModel').get(u'fields').get(u'length'):
            var.put(u'field', var.get(u'fieldsModel').get(u'fields').callprop(u'shift'))
            var.get(u'fieldsModel').put(u'string', ((var.get(u'fieldsModel').get(u'string').callprop(u'slice', Js(0.0), var.get(u'field').get(u'location'))+var.get(u'value'))+var.get(u'fieldsModel').get(u'string').callprop(u'slice', (var.get(u'field').get(u'location')+var.get(u'field').get(u'length')))))
            #for JS loop
            var.put(u'i', Js(0.0))
            var.put(u'il', var.get(u'fieldsModel').get(u'fields').get(u'length'))
            while (var.get(u'i')<var.get(u'il')):
                try:
                    var.get(u'fieldsModel').get(u'fields').get(var.get(u'i')).put(u'location', var.get(u'value').get(u'length'), u'+')
                finally:
                        (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'fieldsModel')
    PyJsHoisted_injectIntoField_.func_name = u'injectIntoField'
    var.put(u'injectIntoField', PyJsHoisted_injectIntoField_)
    @Js
    def PyJsHoisted_insertCommas_(words, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'words':words}, var)
        var.registers([u'hasComma', u'word', u'i', u'pos', u'len', u'words', u'totalCommas'])
        if (var.get(u'words').get(u'length')<Js(2.0)):
            return var.get(u'words')
        var.put(u'words', var.get(u'words').callprop(u'slice'))
        var.put(u'len', var.get(u'words').get(u'length'))
        var.put(u'hasComma', JsRegExp(u'/,$/'))
        var.put(u'totalCommas', Js(0.0))
        if ((var.get(u'len')>Js(3.0)) and (var.get(u'len')<=Js(6.0))):
            var.put(u'totalCommas', var.get(u'rand')(Js(0.0), Js(1.0)))
        else:
            if ((var.get(u'len')>Js(6.0)) and (var.get(u'len')<=Js(12.0))):
                var.put(u'totalCommas', var.get(u'rand')(Js(0.0), Js(2.0)))
            else:
                var.put(u'totalCommas', var.get(u'rand')(Js(1.0), Js(4.0)))
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'pos', PyJsComma(Js(0.0), Js(None)))
        var.put(u'word', PyJsComma(Js(0.0), Js(None)))
        while (var.get(u'i')<var.get(u'totalCommas')):
            try:
                var.put(u'pos', var.get(u'rand')(Js(0.0), (var.get(u'len')-Js(2.0))))
                if var.get(u'hasComma').callprop(u'test', var.get(u'words').get(var.get(u'pos'))).neg():
                    var.get(u'words').put(var.get(u'pos'), Js(u','), u'+')
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'words')
    PyJsHoisted_insertCommas_.func_name = u'insertCommas'
    var.put(u'insertCommas', PyJsHoisted_insertCommas_)
    @Js
    def PyJsHoistedNonPyName(abbr, options, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'abbr':abbr, u'options':options}, var)
        var.registers([u'abbr', u'options'])
        var.put(u'options', var.get(u'createOptions')(var.get(u'options')))
        return (var.get(u'expand$2')(var.get(u'abbr'), var.get(u'options')) if var.get(u'isStylesheet')(var.get(u'options').get(u'syntax')) else var.get(u'expand$1')(var.get(u'abbr'), var.get(u'options')))
    PyJsHoistedNonPyName.func_name = u'expand$$1'
    var.put(u'expand$$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node'])
        while var.get(u'node').get(u'children').get(u'length'):
            var.put(u'node', var.get(u'node').get(u'children').get((var.get(u'node').get(u'children').get(u'length')-Js(1.0))))
        return var.get(u'node')
    PyJsHoistedNonPyName.func_name = u'findDeepestNode$1'
    var.put(u'findDeepestNode$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_isNumber_(code, this, arguments, var=var):
        var = Scope({u'this':this, u'code':code, u'arguments':arguments}, var)
        var.registers([u'code'])
        return ((var.get(u'code')>Js(47.0)) and (var.get(u'code')<Js(58.0)))
    PyJsHoisted_isNumber_.func_name = u'isNumber'
    var.put(u'isNumber', PyJsHoisted_isNumber_)
    @Js
    def PyJsHoisted_splitByLines_(text, this, arguments, var=var):
        var = Scope({u'this':this, u'text':text, u'arguments':arguments}, var)
        var.registers([u'text'])
        return (var.get(u'text') or Js(u'')).callprop(u'split', JsRegExp(u'/\\r\\n|\\r|\\n/g'))
    PyJsHoisted_splitByLines_.func_name = u'splitByLines'
    var.put(u'splitByLines', PyJsHoisted_splitByLines_)
    @Js
    def PyJsHoisted_insert_(tree, content, this, arguments, var=var):
        var = Scope({u'content':content, u'this':this, u'tree':tree, u'arguments':arguments}, var)
        var.registers([u'content', u'updated', u'tree'])
        if (var.get(u'Array').callprop(u'isArray', var.get(u'content')) and var.get(u'content').get(u'length')):
            var.put(u'updated', Js(False))
            @Js
            def PyJs_anonymous_138_(node, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
                var.registers([u'node'])
                if (var.get(u'node').get(u'repeat') and var.get(u'node').get(u'repeat').get(u'implicit')):
                    var.put(u'updated', var.get(u'true'))
                    var.get(u'insertContent')(var.get(u'node'), var.get(u'content').get(var.get(u'node').get(u'repeat').get(u'index')))
            PyJs_anonymous_138_._set_name(u'anonymous')
            var.get(u'tree').callprop(u'walk', PyJs_anonymous_138_)
            if var.get(u'updated').neg():
                var.get(u'setNodeContent')(var.get(u'findDeepestNode$1')(var.get(u'tree')), var.get(u'content').callprop(u'join', Js(u'\n')))
        return var.get(u'tree')
    PyJsHoisted_insert_.func_name = u'insert'
    var.put(u'insert', PyJsHoisted_insert_)
    @Js
    def PyJsHoistedNonPyName(string, this, arguments, var=var):
        var = Scope({u'this':this, u'string':string, u'arguments':arguments}, var)
        var.registers([u'code', u'string', u'stream', u'fields', u'cleanString', u'pos', u'field', u'offset'])
        var.put(u'stream', var.get(u'StreamReader').create(var.get(u'string')))
        var.put(u'fields', Js([]))
        var.put(u'cleanString', Js(u''))
        var.put(u'offset', Js(0.0))
        var.put(u'pos', Js(0.0))
        pass
        while var.get(u'stream').callprop(u'eol').neg():
            var.put(u'code', var.get(u'stream').callprop(u'peekCode'))
            var.put(u'pos', var.get(u'stream').get(u'pos'))
            if PyJsStrictEq(var.get(u'code'),var.get(u'ESCAPE')):
                var.get(u'stream').put(u'pos', Js(2.0), u'+')
            else:
                if var.put(u'field', var.get(u'consumeField')(var.get(u'stream'), ((var.get(u'cleanString').get(u'length')+var.get(u'pos'))-var.get(u'offset')))):
                    var.get(u'fields').callprop(u'push', var.get(u'field'))
                    var.put(u'cleanString', (var.get(u'stream').get(u'string').callprop(u'slice', var.get(u'offset'), var.get(u'pos'))+var.get(u'field').get(u'placeholder')), u'+')
                    var.put(u'offset', var.get(u'stream').get(u'pos'))
                else:
                    (var.get(u'stream').put(u'pos',Js(var.get(u'stream').get(u'pos').to_number())+Js(1))-Js(1))
        return var.get(u'FieldString').create((var.get(u'cleanString')+var.get(u'stream').get(u'string').callprop(u'slice', var.get(u'offset'))), var.get(u'fields'))
    PyJsHoistedNonPyName.func_name = u'parse$4'
    var.put(u'parse$4', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(abbr, options, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'abbr':abbr, u'options':options}, var)
        var.registers([u'abbr', u'options'])
        if PyJsStrictEq(var.get(u'abbr',throw=False).typeof(),Js(u'string')):
            var.put(u'abbr', var.get(u'index$4')(var.get(u'abbr')))
        return var.get(u'abbr').callprop(u'use', var.get(u'index$5'), var.get(u'options').get(u'snippets'))
    PyJsHoistedNonPyName.func_name = u'parse$5'
    var.put(u'parse$5', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(str, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
        var.registers([u'node', u'ch', u'stream', u'lastGroup', u'groupCtx', u'ctx', u'groupStack', u'node$1', u'str', u'root', u'node$2'])
        var.put(u'stream', var.get(u'StreamReader').create(var.get(u'str').callprop(u'trim')))
        var.put(u'root', var.get(u'Node').create())
        var.put(u'ctx', var.get(u'root'))
        var.put(u'groupStack', Js([]))
        while var.get(u'stream').callprop(u'eol').neg():
            var.put(u'ch', var.get(u'stream').callprop(u'peek'))
            if PyJsStrictEq(var.get(u'ch'),Js(u'(')):
                var.put(u'node', var.get(u'Node').create())
                var.put(u'groupCtx', (var.get(u'last')(var.get(u'groupStack')).get(u'0') if var.get(u'groupStack').get(u'length') else var.get(u'ctx')))
                var.get(u'groupStack').callprop(u'push', Js([var.get(u'node'), var.get(u'groupCtx'), var.get(u'stream').get(u'pos')]))
                var.put(u'ctx', var.get(u'node'))
                var.get(u'stream').callprop(u'next')
                continue
            else:
                if PyJsStrictEq(var.get(u'ch'),Js(u')')):
                    var.put(u'lastGroup', var.get(u'groupStack').callprop(u'pop'))
                    if var.get(u'lastGroup').neg():
                        PyJsTempException = JsToPyException(var.get(u'stream').callprop(u'error', Js(u'Unexpected ")" group end')))
                        raise PyJsTempException
                    var.put(u'node$1', var.get(u'lastGroup').get(u'0'))
                    var.put(u'ctx', var.get(u'lastGroup').get(u'1'))
                    var.get(u'stream').callprop(u'next')
                    if var.get(u'node$1').put(u'repeat', var.get(u'consumeRepeat')(var.get(u'stream'))):
                        var.get(u'ctx').callprop(u'appendChild', var.get(u'node$1'))
                    else:
                        while var.get(u'node$1').get(u'firstChild'):
                            var.get(u'ctx').callprop(u'appendChild', var.get(u'node$1').get(u'firstChild'))
                        var.get(u'stream').callprop(u'eat', Js(u'+'))
                    continue
            var.put(u'node$2', var.get(u'consumeElement')(var.get(u'stream')))
            var.get(u'ctx').callprop(u'appendChild', var.get(u'node$2'))
            while 1:
                SWITCHED = False
                CONDITION = (var.get(u'stream').callprop(u'peek'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'+')):
                    SWITCHED = True
                    var.get(u'stream').callprop(u'next')
                    continue
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'>')):
                    SWITCHED = True
                    var.get(u'stream').callprop(u'next')
                    var.put(u'ctx', var.get(u'node$2'))
                    continue
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'^')):
                    SWITCHED = True
                    while PyJsStrictEq(var.get(u'stream').callprop(u'next'),Js(u'^')):
                        var.put(u'ctx', (var.get(u'ctx').get(u'parent') or var.get(u'ctx')))
                    var.get(u'stream').callprop(u'backUp', Js(1.0))
                    continue
                SWITCHED = True
                break
        if var.get(u'groupStack').get(u'length'):
            var.get(u'stream').put(u'pos', var.get(u'groupStack').callprop(u'pop').get(u'2'))
            PyJsTempException = JsToPyException(var.get(u'stream').callprop(u'error', Js(u'Expected group close')))
            raise PyJsTempException
        return var.get(u'root')
    PyJsHoistedNonPyName.func_name = u'parse$2'
    var.put(u'parse$2', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(node, profile, this, arguments, var=var):
        var = Scope({u'node':node, u'profile':profile, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'profile', u'ctx', u'level'])
        var.put(u'level', ((-Js(2.0)) if var.get(u'node').get(u'parent').get(u'isTextOnly') else (-Js(1.0))))
        var.put(u'ctx', var.get(u'node'))
        while var.put(u'ctx', var.get(u'ctx').get(u'parent')):
            (var.put(u'level',Js(var.get(u'level').to_number())+Js(1))-Js(1))
        return (Js(0.0) if (var.get(u'level')<Js(0.0)) else var.get(u'level'))
    PyJsHoistedNonPyName.func_name = u'getIndentLevel$1'
    var.put(u'getIndentLevel$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(abbr, options, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'abbr':abbr, u'options':options}, var)
        var.registers([u'abbr', u'options'])
        return var.get(u'index')(var.get(u'abbr')).callprop(u'use', var.get(u'index$2'), var.get(u'options').get(u'text'), var.get(u'options').get(u'addons')).callprop(u'use', var.get(u'index$1'), var.get(u'options').get(u'snippets')).callprop(u'use', var.get(u'replaceVariables'), var.get(u'options').get(u'variables'))
    PyJsHoistedNonPyName.func_name = u'parse$1'
    var.put(u'parse$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_eatSpace_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'stream'])
        return var.get(u'eatWhile')(var.get(u'stream'), var.get(u'isWhite'))
    PyJsHoisted_eatSpace_.func_name = u'eatSpace'
    var.put(u'eatSpace', PyJsHoisted_eatSpace_)
    @Js
    def PyJsHoisted_getBlockName_(node, lookup, prefix, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'prefix':prefix, u'lookup':lookup, u'arguments':arguments}, var)
        var.registers([u'node', u'depth', u'lookup', u'prefix'])
        var.put(u'depth', (var.get(u'prefix').get(u'length') if (var.get(u'prefix').get(u'length')>Js(1.0)) else Js(0.0)))
        while (var.get(u'node').get(u'parent') and (var.put(u'depth',Js(var.get(u'depth').to_number())-Js(1))+Js(1))):
            var.put(u'node', var.get(u'node').get(u'parent'))
        return var.get(u'lookup').callprop(u'get', var.get(u'node'))
    PyJsHoisted_getBlockName_.func_name = u'getBlockName'
    var.put(u'getBlockName', PyJsHoisted_getBlockName_)
    @Js
    def PyJsHoisted_merge_(PyJsArg_66726f6d_, to, this, arguments, var=var):
        var = Scope({u'this':this, u'to':to, u'from':PyJsArg_66726f6d_, u'arguments':arguments}, var)
        var.registers([u'to', u'from'])
        var.get(u'to').put(u'name', var.get(u'from').get(u'name'))
        if var.get(u'from').get(u'selfClosing'):
            var.get(u'to').put(u'selfClosing', var.get(u'true'))
        if (var.get(u'from').get(u'value')!=var.get(u"null")):
            var.get(u'to').put(u'value', var.get(u'from').get(u'value'))
        if var.get(u'from').get(u'repeat'):
            PyJs_Object_128_ = Js({})
            var.get(u'to').put(u'repeat', var.get(u'Object').callprop(u'assign', PyJs_Object_128_, var.get(u'from').get(u'repeat')))
        return var.get(u'mergeAttributes')(var.get(u'from'), var.get(u'to'))
    PyJsHoisted_merge_.func_name = u'merge'
    var.put(u'merge', PyJsHoisted_merge_)
    @Js
    def PyJsHoisted_getAttributes_(outNode, profile, options, this, arguments, var=var):
        var = Scope({u'profile':profile, u'this':this, u'options':options, u'arguments':arguments, u'outNode':outNode}, var)
        var.registers([u'node', u'profile', u'primary', u'outNode', u'options', u'secondary'])
        PyJs_Object_202_ = Js({})
        var.put(u'options', var.get(u'Object').callprop(u'assign', PyJs_Object_202_, var.get(u'defaultAttrOptions'), var.get(u'options')))
        var.put(u'primary', Js([]))
        var.put(u'secondary', Js([]))
        var.put(u'node', var.get(u'outNode').get(u'node'))
        @Js
        def PyJs_anonymous_203_(attr, this, arguments, var=var):
            var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
            var.registers([u'attr', u'name', u'value', u'isBoolean'])
            if (var.get(u'attr').get(u'options').get(u'implied') and (var.get(u'attr').get(u'value')==var.get(u"null"))):
                return var.get(u"null")
            var.put(u'name', var.get(u'profile').callprop(u'attribute', var.get(u'attr').get(u'name')))
            var.put(u'value', var.get(u'outNode').callprop(u'renderFields', var.get(u'attr').get(u'value')))
            if var.get(u'reId').callprop(u'test', var.get(u'name')):
                (var.get(u'value') and var.get(u'primary').callprop(u'push', (Js(u'#')+var.get(u'value'))))
            else:
                if var.get(u'reClass').callprop(u'test', var.get(u'name')):
                    (var.get(u'value') and var.get(u'primary').callprop(u'push', (Js(u'.')+var.get(u'value').callprop(u'replace', JsRegExp(u'/\\s+/g'), Js(u'.')))))
                else:
                    var.put(u'isBoolean', ((var.get(u'attr').get(u'value')==var.get(u"null")) and (var.get(u'attr').get(u'options').get(u'boolean') or PyJsStrictNeq(var.get(u'profile').callprop(u'get', Js(u'booleanAttributes')).callprop(u'indexOf', var.get(u'name').callprop(u'toLowerCase')),(-Js(1.0))))))
                    PyJs_Object_204_ = Js({u'name':var.get(u'name'),u'value':var.get(u'value'),u'isBoolean':var.get(u'isBoolean')})
                    var.get(u'secondary').callprop(u'push', PyJs_Object_204_)
        PyJs_anonymous_203_._set_name(u'anonymous')
        var.get(u'node').get(u'attributes').callprop(u'forEach', PyJs_anonymous_203_)
        PyJs_Object_205_ = Js({u'PRIMARY_ATTRS':(var.get(u'options').callprop(u'primary', var.get(u'primary')) or var.get(u"null")),u'SECONDARY_ATTRS':(var.get(u'options').callprop(u'secondary', var.get(u'secondary')) or var.get(u"null"))})
        return PyJs_Object_205_
    PyJsHoisted_getAttributes_.func_name = u'getAttributes'
    var.put(u'getAttributes', PyJsHoisted_getAttributes_)
    @Js
    def PyJsHoisted_getNumberingRanges_(str, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
        var.registers([u'str'])
        @Js
        def PyJs_anonymous_135_(out, PyJsArg_72616e6765242431_, this, arguments, var=var):
            var = Scope({u'this':this, u'range$$1':PyJsArg_72616e6765242431_, u'arguments':arguments, u'out':out}, var)
            var.registers([u'range$$1', u'lastRange', u'out'])
            if JsRegExp(u'/[#{]/').callprop(u'test', (var.get(u'str').get((var.get(u'range$$1').get(u'0')+Js(1.0))) or Js(u''))).neg():
                var.put(u'lastRange', var.get(u'out').get((var.get(u'out').get(u'length')-Js(1.0))))
                if (var.get(u'lastRange') and PyJsStrictEq((var.get(u'lastRange').get(u'0')+var.get(u'lastRange').get(u'1')),var.get(u'range$$1').get(u'0'))):
                    var.get(u'lastRange').put(u'1', var.get(u'range$$1').get(u'1'), u'+')
                else:
                    var.get(u'out').callprop(u'push', var.get(u'range$$1'))
            return var.get(u'out')
        PyJs_anonymous_135_._set_name(u'anonymous')
        return var.get(u'findUnescapedTokens')((var.get(u'str') or Js(u'')), var.get(u'numberingToken')).callprop(u'reduce', PyJs_anonymous_135_, Js([]))
    PyJsHoisted_getNumberingRanges_.func_name = u'getNumberingRanges'
    var.put(u'getNumberingRanges', PyJsHoisted_getNumberingRanges_)
    @Js
    def PyJsHoisted_insertContent_(node, content, this, arguments, var=var):
        var = Scope({u'node':node, u'content':content, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'content', u'inserted'])
        var.put(u'inserted', var.get(u'insertContentIntoPlaceholder')(var.get(u'node'), var.get(u'content')))
        @Js
        def PyJs_anonymous_139_(child, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'child':child}, var)
            var.registers([u'child'])
            return var.put(u'inserted', var.get(u'insertContentIntoPlaceholder')(var.get(u'child'), var.get(u'content')), u'|')
        PyJs_anonymous_139_._set_name(u'anonymous')
        var.get(u'node').callprop(u'walk', PyJs_anonymous_139_)
        if var.get(u'inserted').neg():
            var.get(u'setNodeContent')(var.get(u'findDeepestNode$1')(var.get(u'node')), var.get(u'content'))
        return var.get(u'node')
    PyJsHoisted_insertContent_.func_name = u'insertContent'
    var.put(u'insertContent', PyJsHoisted_insertContent_)
    @Js
    def PyJsHoisted_getIndentLevel_(node, profile, this, arguments, var=var):
        var = Scope({u'node':node, u'profile':profile, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'skip', u'profile', u'ctx', u'level'])
        var.put(u'skip', (var.get(u'profile').callprop(u'get', Js(u'formatSkip')) or Js([])))
        var.put(u'level', ((-Js(2.0)) if var.get(u'node').get(u'parent').get(u'isTextOnly') else (-Js(1.0))))
        var.put(u'ctx', var.get(u'node'))
        while var.put(u'ctx', var.get(u'ctx').get(u'parent')):
            if PyJsStrictEq(var.get(u'skip').callprop(u'indexOf', (var.get(u'ctx').get(u'name') or Js(u'')).callprop(u'toLowerCase')),(-Js(1.0))):
                (var.put(u'level',Js(var.get(u'level').to_number())+Js(1))-Js(1))
        return (Js(0.0) if (var.get(u'level')<Js(0.0)) else var.get(u'level'))
    PyJsHoisted_getIndentLevel_.func_name = u'getIndentLevel'
    var.put(u'getIndentLevel', PyJsHoisted_getIndentLevel_)
    @Js
    def PyJsHoisted_eatWhile_(stream, test, this, arguments, var=var):
        var = Scope({u'test':test, u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'test', u'start', u'stream'])
        var.put(u'start', var.get(u'stream').get(u'pos'))
        while (var.get(u'stream').callprop(u'eol').neg() and var.get(u'test')(var.get(u'stream').callprop(u'peekCode'))):
            (var.get(u'stream').put(u'pos',Js(var.get(u'stream').get(u'pos').to_number())+Js(1))-Js(1))
        return (var.get(u'start')<var.get(u'stream').get(u'pos'))
    PyJsHoisted_eatWhile_.func_name = u'eatWhile'
    var.put(u'eatWhile', PyJsHoisted_eatWhile_)
    @Js
    def PyJsHoisted_createOptions_(options, this, arguments, var=var):
        var = Scope({u'this':this, u'options':options, u'arguments':arguments}, var)
        var.registers([u'options'])
        if PyJsStrictEq(var.get(u'options',throw=False).typeof(),Js(u'string')):
            PyJs_Object_358_ = Js({u'syntax':var.get(u'options')})
            var.put(u'options', PyJs_Object_358_)
        PyJs_Object_359_ = Js({})
        var.put(u'options', var.get(u'Object').callprop(u'assign', PyJs_Object_359_, var.get(u'defaultOptions'), var.get(u'options')))
        PyJs_Object_360_ = Js({u'field':var.get(u'options').get(u'field')})
        var.get(u'options').put(u'format', var.get(u'Object').callprop(u'assign', PyJs_Object_360_, var.get(u'options').get(u'format')))
        var.get(u'options').put(u'profile', var.get(u'createProfile')(var.get(u'options')))
        PyJs_Object_361_ = Js({})
        var.get(u'options').put(u'variables', var.get(u'Object').callprop(u'assign', PyJs_Object_361_, var.get(u'defaultVariables'), var.get(u'options').get(u'variables')))
        var.get(u'options').put(u'snippets', var.get(u'createSnippetsRegistry')((Js(u'css') if var.get(u'isStylesheet')(var.get(u'options').get(u'syntax')) else var.get(u'options').get(u'syntax')), var.get(u'options').get(u'snippets')))
        return var.get(u'options')
    PyJsHoisted_createOptions_.func_name = u'createOptions'
    var.put(u'createOptions', PyJsHoisted_createOptions_)
    @Js
    def PyJsHoisted_eatAlphaNumericWord_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'stream'])
        return var.get(u'eatWhile')(var.get(u'stream'), var.get(u'isAlphaNumericWord'))
    PyJsHoisted_eatAlphaNumericWord_.func_name = u'eatAlphaNumericWord'
    var.put(u'eatAlphaNumericWord', PyJsHoisted_eatAlphaNumericWord_)
    @Js
    def PyJsHoistedNonPyName(name, value, this, arguments, var=var):
        var = Scope({u'this':this, u'name':name, u'value':value, u'arguments':arguments}, var)
        var.registers([u'name', u'value'])
        if var.get(u'name').instanceof(var.get(u'Attribute$1')):
            return var.get(u'name')
        if PyJsStrictEq(var.get(u'name',throw=False).typeof(),Js(u'string')):
            return var.get(u'Attribute$1').create(var.get(u'name'), var.get(u'value'))
        if (var.get(u'name') and PyJsStrictEq(var.get(u'name',throw=False).typeof(),Js(u'object'))):
            return var.get(u'Attribute$1').create(var.get(u'name').get(u'name'), var.get(u'name').get(u'value'), var.get(u'name').get(u'options'))
    PyJsHoistedNonPyName.func_name = u'createAttribute$1'
    var.put(u'createAttribute$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_eatKeyword_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'stream'])
        return var.get(u'eatWhile')(var.get(u'stream'), var.get(u'isKeyword'))
    PyJsHoisted_eatKeyword_.func_name = u'eatKeyword'
    var.put(u'eatKeyword', PyJsHoisted_eatKeyword_)
    @Js
    def PyJsHoistedNonPyName(abbr, options, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'abbr':abbr, u'options':options}, var)
        var.registers([u'abbr', u'options'])
        var.put(u'options', var.get(u'createOptions')(var.get(u'options')))
        return (var.get(u'parse$5')(var.get(u'abbr'), var.get(u'options')) if var.get(u'isStylesheet')(var.get(u'options').get(u'syntax')) else var.get(u'parse$1')(var.get(u'abbr'), var.get(u'options')))
    PyJsHoistedNonPyName.func_name = u'parse$$1'
    var.put(u'parse$$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_sum_(n, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'n':n}, var)
        var.registers([u'n'])
        return ((var.get(u'n')*(var.get(u'n')+Js(1.0)))/Js(2.0))
    PyJsHoisted_sum_.func_name = u'sum'
    var.put(u'sum', PyJsHoisted_sum_)
    @Js
    def PyJsHoisted_findDeepestNode_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node'])
        while var.get(u'node').get(u'children').get(u'length'):
            var.put(u'node', var.get(u'node').get(u'children').get((var.get(u'node').get(u'children').get(u'length')-Js(1.0))))
        return var.get(u'node')
    PyJsHoisted_findDeepestNode_.func_name = u'findDeepestNode'
    var.put(u'findDeepestNode', PyJsHoisted_findDeepestNode_)
    @Js
    def PyJsHoisted_paragraph_(dict, wordCount, startWithCommon, this, arguments, var=var):
        var = Scope({u'startWithCommon':startWithCommon, u'wordCount':wordCount, u'this':this, u'dict':dict, u'arguments':arguments}, var)
        var.registers([u'startWithCommon', u'wordCount', u'dict', u'result', u'words', u'totalWords'])
        var.put(u'result', Js([]))
        var.put(u'totalWords', Js(0.0))
        pass
        if (var.get(u'startWithCommon') and var.get(u'dict').get(u'common')):
            var.put(u'words', var.get(u'dict').get(u'common').callprop(u'slice', Js(0.0), var.get(u'wordCount')))
            var.put(u'totalWords', var.get(u'words').get(u'length'), u'+')
            var.get(u'result').callprop(u'push', var.get(u'sentence')(var.get(u'insertCommas')(var.get(u'words')), Js(u'.')))
        while (var.get(u'totalWords')<var.get(u'wordCount')):
            var.put(u'words', var.get(u'sample')(var.get(u'dict').get(u'words'), var.get(u'Math').callprop(u'min', var.get(u'rand')(Js(2.0), Js(30.0)), (var.get(u'wordCount')-var.get(u'totalWords')))))
            var.put(u'totalWords', var.get(u'words').get(u'length'), u'+')
            var.get(u'result').callprop(u'push', var.get(u'sentence')(var.get(u'insertCommas')(var.get(u'words'))))
        return var.get(u'result').callprop(u'join', Js(u' '))
    PyJsHoisted_paragraph_.func_name = u'paragraph'
    var.put(u'paragraph', PyJsHoisted_paragraph_)
    @Js
    def PyJsHoisted_template_(str, data, this, arguments, var=var):
        var = Scope({u'this':this, u'data':data, u'arguments':arguments, u'str':str}, var)
        var.registers([u'replacer', u'code', u'i', u'lastPos', u'str', u'offset', u'output', u'data', u'stack'])
        if (var.get(u'str')==var.get(u"null")):
            return var.get(u'str')
        var.put(u'stack', Js([]))
        @Js
        def PyJs_anonymous_186_(str, left, token, right, this, arguments, var=var):
            var = Scope({u'token':token, u'right':right, u'arguments':arguments, u'str':str, u'this':this, u'left':left}, var)
            var.registers([u'token', u'right', u'str', u'left'])
            return (((var.get(u'left')+var.get(u'data').get(var.get(u'token')))+var.get(u'right')) if (var.get(u'data').get(var.get(u'token'))!=var.get(u"null")) else Js(u''))
        PyJs_anonymous_186_._set_name(u'anonymous')
        var.put(u'replacer', PyJs_anonymous_186_)
        var.put(u'output', Js(u''))
        var.put(u'offset', Js(0.0))
        var.put(u'i', Js(0.0))
        pass
        while (var.get(u'i')<var.get(u'str').get(u'length')):
            var.put(u'code', var.get(u'str').callprop(u'charCodeAt', var.get(u'i')))
            if PyJsStrictEq(var.get(u'code'),var.get(u'TOKEN_OPEN')):
                var.get(u'stack').callprop(u'push', var.get(u'i'))
            else:
                if PyJsStrictEq(var.get(u'code'),var.get(u'TOKEN_CLOSE')):
                    var.put(u'lastPos', var.get(u'stack').callprop(u'pop'))
                    if var.get(u'stack').get(u'length').neg():
                        var.put(u'output', (var.get(u'str').callprop(u'slice', var.get(u'offset'), var.get(u'lastPos'))+var.get(u'str').callprop(u'slice', (var.get(u'lastPos')+Js(1.0)), var.get(u'i')).callprop(u'replace', var.get(u'TOKEN'), var.get(u'replacer'))), u'+')
                        var.put(u'offset', (var.get(u'i')+Js(1.0)))
            (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return (var.get(u'output')+var.get(u'str').callprop(u'slice', var.get(u'offset')))
    PyJsHoisted_template_.func_name = u'template'
    var.put(u'template', PyJsHoisted_template_)
    @Js
    def PyJsHoistedNonPyName(value, len, this, arguments, var=var):
        var = Scope({u'this':this, u'len':len, u'value':value, u'arguments':arguments}, var)
        var.registers([u'len', u'value'])
        while (var.get(u'value').get(u'length')<var.get(u'len')):
            var.put(u'value', (Js(u'0')+var.get(u'value')))
        return var.get(u'value')
    PyJsHoistedNonPyName.func_name = u'pad$1'
    var.put(u'pad$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_unescapeString_(str, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
        var.registers([u'i', u'str', u'ch', u'result', u'len'])
        var.put(u'i', Js(0.0))
        var.put(u'result', Js(u''))
        var.put(u'len', var.get(u'str').get(u'length'))
        while (var.get(u'i')<var.get(u'len')):
            var.put(u'ch', var.get(u'str').get((var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))))
            var.put(u'result', ((var.get(u'str').get((var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))) or Js(u'')) if PyJsStrictEq(var.get(u'ch'),Js(u'\\')) else var.get(u'ch')), u'+')
        return var.get(u'result')
    PyJsHoisted_unescapeString_.func_name = u'unescapeString'
    var.put(u'unescapeString', PyJsHoisted_unescapeString_)
    @Js
    def PyJsHoisted_isInline_(node, profile, this, arguments, var=var):
        var = Scope({u'node':node, u'profile':profile, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'profile'])
        return ((var.get(u'node') and var.get(u'node').get(u'isTextOnly')) or var.get(u'isInlineElement')(var.get(u'node'), var.get(u'profile')))
    PyJsHoisted_isInline_.func_name = u'isInline'
    var.put(u'isInline', PyJsHoisted_isInline_)
    @Js
    def PyJsHoisted_supports_(syntax, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'syntax':syntax}, var)
        var.registers([u'syntax'])
        return (var.get(u'syntax').neg().neg() and var.get(u'supportedSyntaxed').contains(var.get(u'syntax')))
    PyJsHoisted_supports_.func_name = u'supports'
    var.put(u'supports', PyJsHoisted_supports_)
    @Js
    def PyJsHoisted_toHex_(num, this, arguments, var=var):
        var = Scope({u'this':this, u'num':num, u'arguments':arguments}, var)
        var.registers([u'num'])
        return var.get(u'pad$1')(var.get(u'num').callprop(u'toString', Js(16.0)), Js(2.0))
    PyJsHoisted_toHex_.func_name = u'toHex'
    var.put(u'toHex', PyJsHoisted_toHex_)
    @Js
    def PyJsHoisted_notGroup_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node'])
        return var.get(u'node').get(u'isGroup').neg()
    PyJsHoisted_notGroup_.func_name = u'notGroup'
    var.put(u'notGroup', PyJsHoisted_notGroup_)
    @Js
    def PyJsHoisted_run_(nodes, formatter, fieldsRenderer, this, arguments, var=var):
        var = Scope({u'this':this, u'nodes':nodes, u'formatter':formatter, u'fieldsRenderer':fieldsRenderer, u'arguments':arguments}, var)
        var.registers([u'nodes', u'formatter', u'fieldsRenderer'])
        @Js
        def PyJs_anonymous_184_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node', u'outNode'])
            var.put(u'outNode', var.get(u'formatter')(var.get(u'OutputNode').create(var.get(u'node'), var.get(u'fieldsRenderer'))))
            return (var.get(u'outNode').callprop(u'toString', var.get(u'run')(var.get(u'node').get(u'children'), var.get(u'formatter'), var.get(u'fieldsRenderer'))) if var.get(u'outNode') else Js(u''))
        PyJs_anonymous_184_._set_name(u'anonymous')
        return var.get(u'nodes').callprop(u'filter', var.get(u'notGroup')).callprop(u'map', PyJs_anonymous_184_).callprop(u'join', Js(u''))
    PyJsHoisted_run_.func_name = u'run'
    var.put(u'run', PyJsHoisted_run_)
    @Js
    def PyJsHoisted_strcase_(string, type, this, arguments, var=var):
        var = Scope({u'this':this, u'type':type, u'string':string, u'arguments':arguments}, var)
        var.registers([u'type', u'string'])
        if var.get(u'type'):
            var.put(u'string', (var.get(u'string').callprop(u'toUpperCase') if PyJsStrictEq(var.get(u'type'),Js(u'upper')) else var.get(u'string').callprop(u'toLowerCase')))
        return var.get(u'string')
    PyJsHoisted_strcase_.func_name = u'strcase'
    var.put(u'strcase', PyJsHoisted_strcase_)
    @Js
    def PyJsHoisted_pug_(tree, profile, options, this, arguments, var=var):
        var = Scope({u'profile':profile, u'this':this, u'tree':tree, u'options':options, u'arguments':arguments}, var)
        var.registers([u'profile', u'tree', u'nodeOptions', u'options'])
        PyJs_Object_224_ = Js({})
        var.put(u'options', (var.get(u'options') or PyJs_Object_224_))
        @Js
        def PyJs_secondary_227_(attrs, this, arguments, var=var):
            var = Scope({u'this':this, u'secondary':PyJs_secondary_227_, u'attrs':attrs, u'arguments':arguments}, var)
            var.registers([u'attrs'])
            @Js
            def PyJs_anonymous_228_(attr, this, arguments, var=var):
                var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
                var.registers([u'attr'])
                return (var.get(u'attr').get(u'name') if var.get(u'attr').get(u'isBoolean') else ((var.get(u'attr').get(u'name')+Js(u'='))+var.get(u'profile').callprop(u'quote', var.get(u'attr').get(u'value'))))
            PyJs_anonymous_228_._set_name(u'anonymous')
            return var.get(u'attrs').callprop(u'map', PyJs_anonymous_228_).callprop(u'join', Js(u', '))
        PyJs_secondary_227_._set_name(u'secondary')
        PyJs_Object_226_ = Js({u'secondary':PyJs_secondary_227_})
        PyJs_Object_225_ = Js({u'open':Js(u'[NAME][PRIMARY_ATTRS][(SECONDARY_ATTRS)]'),u'attributes':PyJs_Object_226_})
        var.put(u'nodeOptions', PyJs_Object_225_)
        @Js
        def PyJs_anonymous_229_(outNode, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'outNode':outNode}, var)
            var.registers([u'node', u'outNode'])
            var.put(u'outNode', var.get(u'indentFormat')(var.get(u'outNode'), var.get(u'profile'), var.get(u'nodeOptions')))
            var.put(u'outNode', var.get(u'updateFormatting$2')(var.get(u'outNode'), var.get(u'profile')))
            if var.get(u'handlePseudoSnippet')(var.get(u'outNode')).neg():
                var.put(u'node', var.get(u'outNode').get(u'node'))
                if (var.get(u'node').get(u'value') or (var.get(u'node').get(u'children').get(u'length').neg() and var.get(u'node').get(u'selfClosing').neg())):
                    var.get(u'outNode').put(u'text', var.get(u'outNode').callprop(u'renderFields', var.get(u'formatNodeValue$2')(var.get(u'node'), var.get(u'profile'))))
            return var.get(u'outNode')
        PyJs_anonymous_229_._set_name(u'anonymous')
        return var.get(u'render')(var.get(u'tree'), var.get(u'options').get(u'field'), PyJs_anonymous_229_)
    PyJsHoisted_pug_.func_name = u'pug'
    var.put(u'pug', PyJsHoisted_pug_)
    @Js
    def PyJsHoisted_expandShortNotation_(node, lookup, options, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'lookup':lookup, u'options':options, u'arguments':arguments}, var)
        var.registers([u'node', u'classNames', u'lookup', u'options'])
        @Js
        def PyJs_anonymous_150_(out, cl, this, arguments, var=var):
            var = Scope({u'this':this, u'cl':cl, u'arguments':arguments, u'out':out}, var)
            var.registers([u'prefix', u'cl', u'm', u'originalClass', u'out'])
            pass
            var.put(u'originalClass', var.get(u'cl'))
            if var.put(u'm', var.get(u'cl').callprop(u'match', var.get(u'reElement'))):
                var.put(u'prefix', ((var.get(u'getBlockName')(var.get(u'node'), var.get(u'lookup'), var.get(u'm').get(u'1'))+var.get(u'options').get(u'element'))+var.get(u'm').get(u'2')))
                var.get(u'out').callprop(u'add', var.get(u'prefix'))
                var.put(u'cl', var.get(u'cl').callprop(u'slice', var.get(u'm').get(u'0').get(u'length')))
            while var.put(u'm', var.get(u'cl').callprop(u'match', var.get(u'reModifier'))):
                if var.get(u'prefix').neg():
                    var.put(u'prefix', var.get(u'getBlockName')(var.get(u'node'), var.get(u'lookup'), var.get(u'm').get(u'1')))
                    var.get(u'out').callprop(u'add', var.get(u'prefix'))
                var.get(u'out').callprop(u'add', (((Js(u'')+var.get(u'prefix'))+var.get(u'options').get(u'modifier'))+var.get(u'm').get(u'2')))
                var.put(u'cl', var.get(u'cl').callprop(u'slice', var.get(u'm').get(u'0').get(u'length')))
            if PyJsStrictEq(var.get(u'cl'),var.get(u'originalClass')):
                var.get(u'out').callprop(u'add', var.get(u'originalClass'))
            return var.get(u'out')
        PyJs_anonymous_150_._set_name(u'anonymous')
        var.put(u'classNames', var.get(u'node').get(u'classList').callprop(u'reduce', PyJs_anonymous_150_, var.get(u'Set').create()))
        var.get(u'node').callprop(u'setAttribute', Js(u'class'), var.get(u'Array').callprop(u'from', var.get(u'classNames')).callprop(u'join', Js(u' ')))
    PyJsHoisted_expandShortNotation_.func_name = u'expandShortNotation'
    var.put(u'expandShortNotation', PyJsHoisted_expandShortNotation_)
    @Js
    def PyJsHoistedNonPyName(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'repeater', u'value'])
        var.put(u'repeater', var.get(u'findRepeater')(var.get(u'node')))
        if (var.get(u'repeater') and (var.get(u'repeater').get(u'value')!=var.get(u"null"))):
            var.put(u'value', var.get(u'repeater').get(u'value'))
            var.get(u'node').put(u'name', var.get(u'replaceNumbering')(var.get(u'node').get(u'name'), var.get(u'value')))
            var.get(u'node').put(u'value', var.get(u'replaceNumbering')(var.get(u'node').get(u'value'), var.get(u'value')))
            @Js
            def PyJs_anonymous_134_(attr, this, arguments, var=var):
                var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
                var.registers([u'copy', u'attr'])
                var.put(u'copy', var.get(u'node').callprop(u'getAttribute', var.get(u'attr').get(u'name')).callprop(u'clone'))
                var.get(u'copy').put(u'name', var.get(u'replaceNumbering')(var.get(u'attr').get(u'name'), var.get(u'value')))
                var.get(u'copy').put(u'value', var.get(u'replaceNumbering')(var.get(u'attr').get(u'value'), var.get(u'value')))
                var.get(u'node').callprop(u'replaceAttribute', var.get(u'attr').get(u'name'), var.get(u'copy'))
            PyJs_anonymous_134_._set_name(u'anonymous')
            var.get(u'node').get(u'attributes').callprop(u'forEach', PyJs_anonymous_134_)
        return var.get(u'node')
    PyJsHoistedNonPyName.func_name = u'applyNumbering$1'
    var.put(u'applyNumbering$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_setNodeContent_(node, content, this, arguments, var=var):
        var = Scope({u'node':node, u'content':content, u'this':this, u'arguments':arguments}, var)
        var.registers([u'ranges', u'node', u'content'])
        if var.get(u'node').get(u'value'):
            var.put(u'ranges', var.get(u'findUnescapedTokens')(var.get(u'node').get(u'value'), var.get(u'caret')))
            if var.get(u'ranges').get(u'length'):
                var.get(u'node').put(u'value', var.get(u'replaceRanges')(var.get(u'node').get(u'value'), var.get(u'ranges'), var.get(u'content')))
                return var.get('undefined')
        if (var.get(u'node').get(u'name').callprop(u'toLowerCase', Js(u'a')) or var.get(u'node').callprop(u'hasAttribute', Js(u'href'))):
            if var.get(u'reUrl').callprop(u'test', var.get(u'content')):
                var.get(u'node').callprop(u'setAttribute', Js(u'href'), ((Js(u'') if var.get(u'reProto').callprop(u'test', var.get(u'content')) else Js(u'http://'))+var.get(u'content')))
            else:
                if var.get(u'reEmail').callprop(u'test', var.get(u'content')):
                    var.get(u'node').callprop(u'setAttribute', Js(u'href'), (Js(u'mailto:')+var.get(u'content')))
        var.get(u'node').put(u'value', var.get(u'content'))
    PyJsHoisted_setNodeContent_.func_name = u'setNodeContent'
    var.put(u'setNodeContent', PyJsHoisted_setNodeContent_)
    @Js
    def PyJsHoisted_formatNodeValue_(node, profile, this, arguments, var=var):
        var = Scope({u'node':node, u'profile':profile, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'indent', u'profile', u'lines', u'maxLength'])
        if ((var.get(u'node').get(u'value')!=var.get(u"null")) and var.get(u'reNl').callprop(u'test', var.get(u'node').get(u'value'))):
            var.put(u'lines', var.get(u'splitByLines')(var.get(u'node').get(u'value')))
            var.put(u'indent', var.get(u'profile').callprop(u'indent', Js(1.0)))
            @Js
            def PyJs_anonymous_212_(prev, line, this, arguments, var=var):
                var = Scope({u'this':this, u'line':line, u'prev':prev, u'arguments':arguments}, var)
                var.registers([u'line', u'prev'])
                return var.get(u'Math').callprop(u'max', var.get(u'prev'), var.get(u'line').get(u'length'))
            PyJs_anonymous_212_._set_name(u'anonymous')
            var.put(u'maxLength', var.get(u'lines').callprop(u'reduce', PyJs_anonymous_212_, Js(0.0)))
            @Js
            def PyJs_anonymous_213_(line, i, this, arguments, var=var):
                var = Scope({u'i':i, u'this':this, u'line':line, u'arguments':arguments}, var)
                var.registers([u'i', u'line'])
                return (((Js(u'')+(var.get(u'indent') if var.get(u'i') else Js(u'')))+var.get(u'pad')(var.get(u'line'), var.get(u'maxLength')))+Js(u' |'))
            PyJs_anonymous_213_._set_name(u'anonymous')
            return var.get(u'lines').callprop(u'map', PyJs_anonymous_213_).callprop(u'join', Js(u'\n'))
        return var.get(u'node').get(u'value')
    PyJsHoisted_formatNodeValue_.func_name = u'formatNodeValue'
    var.put(u'formatNodeValue', PyJsHoisted_formatNodeValue_)
    @Js
    def PyJsHoisted_last_(arr, this, arguments, var=var):
        var = Scope({u'this':this, u'arr':arr, u'arguments':arguments}, var)
        var.registers([u'arr'])
        return var.get(u'arr').get((var.get(u'arr').get(u'length')-Js(1.0)))
    PyJsHoisted_last_.func_name = u'last'
    var.put(u'last', PyJsHoisted_last_)
    @Js
    def PyJsHoisted_createProfile_(options, this, arguments, var=var):
        var = Scope({u'this':this, u'options':options, u'arguments':arguments}, var)
        var.registers([u'options'])
        return (var.get(u'options').get(u'profile') if var.get(u'options').get(u'profile').instanceof(var.get(u'Profile')) else var.get(u'Profile').create(var.get(u'options').get(u'profile')))
    PyJsHoisted_createProfile_.func_name = u'createProfile'
    var.put(u'createProfile', PyJsHoisted_createProfile_)
    @Js
    def PyJsHoisted_isPseudoSnippet_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node'])
        return (var.get(u'node').get(u'isTextOnly') and var.get(u'node').get(u'children').get(u'length').neg().neg())
    PyJsHoisted_isPseudoSnippet_.func_name = u'isPseudoSnippet'
    var.put(u'isPseudoSnippet', PyJsHoisted_isPseudoSnippet_)
    @Js
    def PyJsHoisted_loremGenerator_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'm', u'options'])
        PyJs_Object_352_ = Js({})
        var.put(u'options', PyJs_Object_352_)
        var.put(u'm', var.get(u'node').get(u'name').callprop(u'match', var.get(u'reLorem')))
        if var.get(u'm').get(u'1'):
            var.get(u'options').put(u'lang', var.get(u'm').get(u'1'))
        if var.get(u'm').get(u'2'):
            var.get(u'options').put(u'wordCount', (+var.get(u'm').get(u'2')))
        return var.get(u'index$8')(var.get(u'node'), var.get(u'options'))
    PyJsHoisted_loremGenerator_.func_name = u'loremGenerator'
    var.put(u'loremGenerator', PyJsHoisted_loremGenerator_)
    @Js
    def PyJsHoisted_range_(start, length, this, arguments, var=var):
        var = Scope({u'this':this, u'start':start, u'length':length, u'arguments':arguments}, var)
        var.registers([u'start', u'length'])
        return Js([var.get(u'start'), var.get(u'length')])
    PyJsHoisted_range_.func_name = u'range'
    var.put(u'range', PyJsHoisted_range_)
    @Js
    def PyJsHoisted_consumeIdent_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'stream'])
        var.get(u'stream').put(u'start', var.get(u'stream').get(u'pos'))
        var.get(u'eatWhile')(var.get(u'stream'), var.get(u'isIdentPrefix'))
        var.get(u'eatWhile')(var.get(u'stream'), var.get(u'isIdent'))
        return (var.get(u'stream').callprop(u'current') if PyJsStrictNeq(var.get(u'stream').get(u'start'),var.get(u'stream').get(u'pos')) else var.get(u"null"))
    PyJsHoisted_consumeIdent_.func_name = u'consumeIdent'
    var.put(u'consumeIdent', PyJsHoisted_consumeIdent_)
    @Js
    def PyJsHoisted_isKeyword_(code, this, arguments, var=var):
        var = Scope({u'this':this, u'code':code, u'arguments':arguments}, var)
        var.registers([u'code'])
        return (var.get(u'isAlphaNumericWord')(var.get(u'code')) or PyJsStrictEq(var.get(u'code'),var.get(u'DASH$2')))
    PyJsHoisted_isKeyword_.func_name = u'isKeyword'
    var.put(u'isKeyword', PyJsHoisted_isKeyword_)
    @Js
    def PyJsHoisted_rand_(PyJsArg_66726f6d_, to, this, arguments, var=var):
        var = Scope({u'this':this, u'to':to, u'from':PyJsArg_66726f6d_, u'arguments':arguments}, var)
        var.registers([u'to', u'from'])
        return var.get(u'Math').callprop(u'floor', ((var.get(u'Math').callprop(u'random')*(var.get(u'to')-var.get(u'from')))+var.get(u'from')))
    PyJsHoisted_rand_.func_name = u'rand'
    var.put(u'rand', PyJsHoisted_rand_)
    @Js
    def PyJsHoisted_isHex_(code, this, arguments, var=var):
        var = Scope({u'this':this, u'code':code, u'arguments':arguments}, var)
        var.registers([u'code'])
        return (var.get(u'isNumber$1')(var.get(u'code')) or var.get(u'isAlpha')(var.get(u'code'), Js(65.0), Js(70.0)))
    PyJsHoisted_isHex_.func_name = u'isHex'
    var.put(u'isHex', PyJsHoisted_isHex_)
    @Js
    def PyJsHoisted_replaceRanges_(str, ranges, value, this, arguments, var=var):
        var = Scope({u'ranges':ranges, u'this':this, u'value':value, u'str':str, u'arguments':arguments}, var)
        var.registers([u'i', u'ranges', u'r', u'value', u'str'])
        #for JS loop
        var.put(u'i', (var.get(u'ranges').get(u'length')-Js(1.0)))
        while (var.get(u'i')>=Js(0.0)):
            try:
                var.put(u'r', var.get(u'ranges').get(var.get(u'i')))
                var.put(u'str', ((var.get(u'str').callprop(u'substring', Js(0.0), var.get(u'r').get(u'0'))+(var.get(u'value')(var.get(u'str').callprop(u'substr', var.get(u'r').get(u'0'), var.get(u'r').get(u'1'))) if PyJsStrictEq(var.get(u'value',throw=False).typeof(),Js(u'function')) else var.get(u'value')))+var.get(u'str').callprop(u'substring', (var.get(u'r').get(u'0')+var.get(u'r').get(u'1')))))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())-Js(1))+Js(1))
        return var.get(u'str')
    PyJsHoisted_replaceRanges_.func_name = u'replaceRanges'
    var.put(u'replaceRanges', PyJsHoisted_replaceRanges_)
    @Js
    def PyJsHoisted_render_(tree, field, formatter, this, arguments, var=var):
        var = Scope({u'this':this, u'field':field, u'formatter':formatter, u'tree':tree, u'arguments':arguments}, var)
        var.registers([u'fieldState', u'formatter', u'fieldsRenderer', u'tree', u'field'])
        if PyJsStrictEq(var.get(u'formatter',throw=False).typeof(),Js(u'undefined')):
            var.put(u'formatter', var.get(u'field'))
            var.put(u'field', var.get(u"null"))
        var.put(u'field', (var.get(u'field') or var.get(u'defaultField')))
        PyJs_Object_182_ = Js({u'index':Js(1.0)})
        var.put(u'fieldState', PyJs_Object_182_)
        @Js
        def PyJs_anonymous_183_(text, this, arguments, var=var):
            var = Scope({u'this':this, u'text':text, u'arguments':arguments}, var)
            var.registers([u'text'])
            return (var.get(u'field')((var.get(u'fieldState').put(u'index',Js(var.get(u'fieldState').get(u'index').to_number())+Js(1))-Js(1))) if (var.get(u'text')==var.get(u"null")) else var.get(u'getFieldsModel')(var.get(u'text'), var.get(u'fieldState')).callprop(u'mark', var.get(u'field')))
        PyJs_anonymous_183_._set_name(u'anonymous')
        var.put(u'fieldsRenderer', PyJs_anonymous_183_)
        return var.get(u'run')(var.get(u'tree').get(u'children'), var.get(u'formatter'), var.get(u'fieldsRenderer'))
    PyJsHoisted_render_.func_name = u'render'
    var.put(u'render', PyJsHoisted_render_)
    @Js
    def PyJsHoisted_sentence_(words, end, this, arguments, var=var):
        var = Scope({u'this':this, u'end':end, u'arguments':arguments, u'words':words}, var)
        var.registers([u'end', u'words'])
        if var.get(u'words').get(u'length'):
            var.put(u'words', Js([var.get(u'capitalize')(var.get(u'words').get(u'0'))]).callprop(u'concat', var.get(u'words').callprop(u'slice', Js(1.0))))
        return (var.get(u'words').callprop(u'join', Js(u' '))+(var.get(u'end') or var.get(u'choice')(Js(u'?!...'))))
    PyJsHoisted_sentence_.func_name = u'sentence'
    var.put(u'sentence', PyJsHoisted_sentence_)
    @Js
    def PyJsHoisted_shouldFormatInline_(node, profile, this, arguments, var=var):
        var = Scope({u'node':node, u'profile':profile, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'profile', u'adjacentInline', u'after', u'next', u'before'])
        if var.get(u'isInline')(var.get(u'node'), var.get(u'profile')).neg():
            return Js(False)
        if var.get(u'isPseudoSnippet')(var.get(u'node')):
            return var.get(u'true')
        if PyJsStrictEq(var.get(u'node').get(u'childIndex'),Js(0.0)):
            var.put(u'next', var.get(u'node'))
            while var.put(u'next', var.get(u'next').get(u'nextSibling')):
                if var.get(u'isInline')(var.get(u'next'), var.get(u'profile')).neg():
                    return var.get(u'true')
        else:
            if var.get(u'isInline')(var.get(u'node').get(u'previousSibling'), var.get(u'profile')).neg():
                return var.get(u'true')
        if var.get(u'profile').callprop(u'get', Js(u'inlineBreak')):
            var.put(u'adjacentInline', Js(1.0))
            var.put(u'before', var.get(u'node'))
            var.put(u'after', var.get(u'node'))
            while var.get(u'isInlineElement')(var.put(u'before', var.get(u'before').get(u'previousSibling')), var.get(u'profile')):
                (var.put(u'adjacentInline',Js(var.get(u'adjacentInline').to_number())+Js(1))-Js(1))
            while var.get(u'isInlineElement')(var.put(u'after', var.get(u'after').get(u'nextSibling')), var.get(u'profile')):
                (var.put(u'adjacentInline',Js(var.get(u'adjacentInline').to_number())+Js(1))-Js(1))
            return (var.get(u'adjacentInline')>=var.get(u'profile').callprop(u'get', Js(u'inlineBreak')))
        return Js(False)
    PyJsHoisted_shouldFormatInline_.func_name = u'shouldFormatInline'
    var.put(u'shouldFormatInline', PyJsHoisted_shouldFormatInline_)
    @Js
    def PyJsHoisted_stringifyAttribute_(attr, options, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'attr':attr, u'options':options}, var)
        var.registers([u'attr', u'options'])
        if ((var.get(u'attr').get(u'value') and PyJsStrictEq(var.get(u'attr').get(u'value').typeof(),Js(u'object'))) and PyJsStrictEq(var.get(u'attr').get(u'value').get(u'type'),Js(u'css-value'))):
            @Js
            def PyJs_anonymous_330_(token, this, arguments, var=var):
                var = Scope({u'this':this, u'token':token, u'arguments':arguments}, var)
                var.registers([u'token'])
                if (var.get(u'token') and PyJsStrictEq(var.get(u'token',throw=False).typeof(),Js(u'object'))):
                    return (var.get(u'token').callprop(u'toString', var.get(u'options').get(u'shortHex')) if PyJsStrictEq(var.get(u'token').get(u'type'),Js(u'color')) else var.get(u'token').callprop(u'toString'))
                return var.get(u'String')(var.get(u'token'))
            PyJs_anonymous_330_._set_name(u'anonymous')
            return var.get(u'attr').get(u'value').get(u'value').callprop(u'map', PyJs_anonymous_330_).callprop(u'join', Js(u' '))
        return (var.get(u'String')(var.get(u'attr').get(u'value')) if (var.get(u'attr').get(u'value')!=var.get(u"null")) else Js(u''))
    PyJsHoisted_stringifyAttribute_.func_name = u'stringifyAttribute'
    var.put(u'stringifyAttribute', PyJsHoisted_stringifyAttribute_)
    @Js
    def PyJsHoisted_replace_(node, oldName, newName, this, arguments, var=var):
        var = Scope({u'node':node, u'newName':newName, u'this':this, u'oldName':oldName, u'arguments':arguments}, var)
        var.registers([u'node', u'newName', u'attr', u'oldName'])
        var.put(u'attr', var.get(u'node').callprop(u'getAttribute', var.get(u'oldName')))
        if var.get(u'attr'):
            var.get(u'attr').put(u'name', var.get(u'newName'))
    PyJsHoisted_replace_.func_name = u'replace'
    var.put(u'replace', PyJsHoisted_replace_)
    @Js
    def PyJsHoisted_splitValue_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return var.get(u'String')(var.get(u'value')).callprop(u'split', Js(u'|'))
    PyJsHoisted_splitValue_.func_name = u'splitValue'
    var.put(u'splitValue', PyJsHoisted_splitValue_)
    @Js
    def PyJsHoistedNonPyName(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node'])
        return var.get(u'node').get(u'parent').neg()
    PyJsHoistedNonPyName.func_name = u'isRoot$1'
    var.put(u'isRoot$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_resolveImplicitName_(parentName, this, arguments, var=var):
        var = Scope({u'this':this, u'parentName':parentName, u'arguments':arguments}, var)
        var.registers([u'parentName'])
        var.put(u'parentName', (var.get(u'parentName') or Js(u'')).callprop(u'toLowerCase'))
        return (var.get(u'elementMap').get(var.get(u'parentName')) or (Js(u'span') if var.get(u'inlineElements').callprop(u'has', var.get(u'parentName')) else Js(u'div')))
    PyJsHoisted_resolveImplicitName_.func_name = u'resolveImplicitName'
    var.put(u'resolveImplicitName', PyJsHoisted_resolveImplicitName_)
    @Js
    def PyJsHoisted_isNumericValue_(token, this, arguments, var=var):
        var = Scope({u'this':this, u'token':token, u'arguments':arguments}, var)
        var.registers([u'token'])
        return var.get(u'tokenTypeOf')(var.get(u'token'), Js(u'numeric'))
    PyJsHoisted_isNumericValue_.func_name = u'isNumericValue'
    var.put(u'isNumericValue', PyJsHoisted_isNumericValue_)
    @Js
    def PyJsHoistedNonPyName(text, this, arguments, var=var):
        var = Scope({u'this':this, u'text':text, u'arguments':arguments}, var)
        var.registers([u'text'])
        return (var.get(u'text') or Js(u'')).callprop(u'split', JsRegExp(u'/\\r\\n|\\r|\\n/g'))
    PyJsHoistedNonPyName.func_name = u'splitByLines$1'
    var.put(u'splitByLines$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_replaceInNode_(node, variables, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'variables':variables, u'arguments':arguments}, var)
        var.registers([u'node', u'attr', u'i', u'variables', u'attrs', u'il'])
        var.put(u'attrs', var.get(u'node').get(u'attributes'))
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'il', var.get(u'attrs').get(u'length'))
        while (var.get(u'i')<var.get(u'il')):
            try:
                var.put(u'attr', var.get(u'attrs').get(var.get(u'i')))
                if PyJsStrictEq(var.get(u'attr').get(u'value').typeof(),Js(u'string')):
                    var.get(u'node').callprop(u'setAttribute', var.get(u'attr').get(u'name'), var.get(u'replaceInString')(var.get(u'attr').get(u'value'), var.get(u'variables')))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        if (var.get(u'node').get(u'value')!=var.get(u"null")):
            var.get(u'node').put(u'value', var.get(u'replaceInString')(var.get(u'node').get(u'value'), var.get(u'variables')))
        return var.get(u'node')
    PyJsHoisted_replaceInNode_.func_name = u'replaceInNode'
    var.put(u'replaceInNode', PyJsHoisted_replaceInNode_)
    @Js
    def PyJsHoisted_prepare_(tree, amount, this, arguments, var=var):
        var = Scope({u'this':this, u'amount':amount, u'tree':tree, u'arguments':arguments}, var)
        var.registers([u'amount', u'tree'])
        var.put(u'amount', (var.get(u'amount') or Js(1.0)))
        @Js
        def PyJs_anonymous_137_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'i', u'node', u'clone'])
            if (var.get(u'node').get(u'repeat') and PyJsStrictEq(var.get(u'node').get(u'repeat').get(u'count'),var.get(u"null"))):
                #for JS loop
                var.put(u'i', Js(0.0))
                while (var.get(u'i')<var.get(u'amount')):
                    try:
                        var.put(u'clone', var.get(u'node').callprop(u'clone', var.get(u'true')))
                        var.get(u'clone').get(u'repeat').put(u'implicit', var.get(u'true'))
                        var.get(u'clone').get(u'repeat').put(u'count', var.get(u'amount'))
                        var.get(u'clone').get(u'repeat').put(u'value', (var.get(u'i')+Js(1.0)))
                        var.get(u'clone').get(u'repeat').put(u'index', var.get(u'i'))
                        var.get(u'node').get(u'parent').callprop(u'insertBefore', var.get(u'clone'), var.get(u'node'))
                    finally:
                            (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                var.get(u'node').callprop(u'remove')
        PyJs_anonymous_137_._set_name(u'anonymous')
        var.get(u'tree').callprop(u'walk', PyJs_anonymous_137_)
        return var.get(u'tree')
    PyJsHoisted_prepare_.func_name = u'prepare'
    var.put(u'prepare', PyJsHoisted_prepare_)
    @Js
    def PyJsHoistedNonPyName(str, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
        var.registers([u'str'])
        return var.get(u'String')(var.get(u'str')).callprop(u'trim')
    PyJsHoistedNonPyName.func_name = u'normalize$1'
    var.put(u'normalize$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_getFormat_(syntax, options, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'options':options, u'syntax':syntax}, var)
        var.registers([u'syntax', u'options', u'format'])
        var.put(u'format', var.get(u'syntaxFormat').get(var.get(u'syntax')))
        if PyJsStrictEq(var.get(u'format',throw=False).typeof(),Js(u'string')):
            var.put(u'format', var.get(u'syntaxFormat').get(var.get(u'format')))
        PyJs_Object_338_ = Js({})
        return var.get(u'Object').callprop(u'assign', PyJs_Object_338_, var.get(u'format'), (var.get(u'options') and var.get(u'options').get(u'format')))
    PyJsHoisted_getFormat_.func_name = u'getFormat'
    var.put(u'getFormat', PyJsHoisted_getFormat_)
    @Js
    def PyJsHoisted_replaceNumbering_(str, value, this, arguments, var=var):
        var = Scope({u'this':this, u'value':value, u'str':str, u'arguments':arguments}, var)
        var.registers([u'ranges', u'value', u'str'])
        if PyJsStrictEq(var.get(u'str',throw=False).typeof(),Js(u'string')):
            var.put(u'ranges', var.get(u'getNumberingRanges')(var.get(u'str')))
            return var.get(u'replaceNumberingRanges')(var.get(u'str'), var.get(u'ranges'), var.get(u'value'))
        return var.get(u'str')
    PyJsHoisted_replaceNumbering_.func_name = u'replaceNumbering'
    var.put(u'replaceNumbering', PyJsHoisted_replaceNumbering_)
    @Js
    def PyJsHoisted_mark_(string, fields, token, this, arguments, var=var):
        var = Scope({u'this':this, u'fields':fields, u'token':token, u'string':string, u'arguments':arguments}, var)
        var.registers([u'ordered', u'string', u'fields', u'token', u'result', u'offset'])
        var.put(u'token', (var.get(u'token') or var.get(u'createToken')))
        @Js
        def PyJs_anonymous_165_(a, b, this, arguments, var=var):
            var = Scope({u'a':a, u'this':this, u'b':b, u'arguments':arguments}, var)
            var.registers([u'a', u'b'])
            return ((var.get(u'a').get(u'end')-var.get(u'b').get(u'end')) or (var.get(u'a').get(u'order')-var.get(u'b').get(u'order')))
        PyJs_anonymous_165_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_166_(field, order, this, arguments, var=var):
            var = Scope({u'this':this, u'field':field, u'order':order, u'arguments':arguments}, var)
            var.registers([u'field', u'order'])
            PyJs_Object_167_ = Js({u'order':var.get(u'order'),u'field':var.get(u'field'),u'end':(var.get(u'field').get(u'location')+var.get(u'field').get(u'length'))})
            return PyJs_Object_167_
        PyJs_anonymous_166_._set_name(u'anonymous')
        var.put(u'ordered', var.get(u'fields').callprop(u'map', PyJs_anonymous_166_).callprop(u'sort', PyJs_anonymous_165_))
        var.put(u'offset', Js(0.0))
        @Js
        def PyJs_anonymous_168_(item, this, arguments, var=var):
            var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
            var.registers([u'item', u'prefix', u'placeholder'])
            var.put(u'placeholder', var.get(u'string').callprop(u'substr', var.get(u'item').get(u'field').get(u'location'), var.get(u'item').get(u'field').get(u'length')))
            var.put(u'prefix', var.get(u'string').callprop(u'slice', var.get(u'offset'), var.get(u'item').get(u'field').get(u'location')))
            var.put(u'offset', var.get(u'item').get(u'end'))
            return (var.get(u'prefix')+var.get(u'token')(var.get(u'item').get(u'field').get(u'index'), var.get(u'placeholder')))
        PyJs_anonymous_168_._set_name(u'anonymous')
        var.put(u'result', var.get(u'ordered').callprop(u'map', PyJs_anonymous_168_))
        return (var.get(u'result').callprop(u'join', Js(u''))+var.get(u'string').callprop(u'slice', var.get(u'offset')))
    PyJsHoisted_mark_.func_name = u'mark'
    var.put(u'mark', PyJsHoisted_mark_)
    @Js
    def PyJsHoisted_createToken_(index, placeholder, this, arguments, var=var):
        var = Scope({u'this':this, u'index':index, u'placeholder':placeholder, u'arguments':arguments}, var)
        var.registers([u'index', u'placeholder'])
        return (((((Js(u'${')+var.get(u'index'))+Js(u':'))+var.get(u'placeholder'))+Js(u'}')) if var.get(u'placeholder') else ((Js(u'${')+var.get(u'index'))+Js(u'}')))
    PyJsHoisted_createToken_.func_name = u'createToken'
    var.put(u'createToken', PyJsHoisted_createToken_)
    @Js
    def PyJsHoisted_isAlphaNumericWord_(code, this, arguments, var=var):
        var = Scope({u'this':this, u'code':code, u'arguments':arguments}, var)
        var.registers([u'code'])
        return (var.get(u'isNumber$1')(var.get(u'code')) or var.get(u'isAlphaWord')(var.get(u'code')))
    PyJsHoisted_isAlphaNumericWord_.func_name = u'isAlphaNumericWord'
    var.put(u'isAlphaNumericWord', PyJsHoisted_isAlphaNumericWord_)
    @Js
    def PyJsHoistedNonPyName(token, this, arguments, var=var):
        var = Scope({u'this':this, u'token':token, u'arguments':arguments}, var)
        var.registers([u'token'])
        return var.get(u'tokenTypeOf')(var.get(u'token'), Js(u'keyword'))
    PyJsHoistedNonPyName.func_name = u'isKeyword$1$1'
    var.put(u'isKeyword$1$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_snippetsSort_(a, b, this, arguments, var=var):
        var = Scope({u'a':a, u'this':this, u'b':b, u'arguments':arguments}, var)
        var.registers([u'a', u'b'])
        if PyJsStrictEq(var.get(u'a').get(u'key'),var.get(u'b').get(u'key')):
            return Js(0.0)
        return ((-Js(1.0)) if (var.get(u'a').get(u'key')<var.get(u'b').get(u'key')) else Js(1.0))
    PyJsHoisted_snippetsSort_.func_name = u'snippetsSort'
    var.put(u'snippetsSort', PyJsHoisted_snippetsSort_)
    @Js
    def PyJsHoisted_createModel_(string, this, arguments, var=var):
        var = Scope({u'this':this, u'string':string, u'arguments':arguments}, var)
        var.registers([u'string', u'start', u'i', u'variables', u'm', u'pos', u'len', u'tokens', u'reVariable', u'token', u'il', u'escapeCharCode', u'output', u'validMatches', u'token$1'])
        var.put(u'reVariable', JsRegExp(u'/\\$\\{([a-z][\\w\\-]*)\\}/ig'))
        var.put(u'escapeCharCode', Js(92.0))
        var.put(u'variables', Js([]))
        var.put(u'tokens', var.get(u'Map').create())
        pass
        while var.put(u'm', var.get(u'reVariable').callprop(u'exec', var.get(u'string'))):
            var.get(u'tokens').callprop(u'set', var.get(u'm').get(u'index'), var.get(u'm'))
        if var.get(u'tokens').get(u'size'):
            var.put(u'start', Js(0.0))
            var.put(u'pos', Js(0.0))
            var.put(u'len', var.get(u'string').get(u'length'))
            var.put(u'output', Js(u''))
            while (var.get(u'pos')<var.get(u'len')):
                if (PyJsStrictEq(var.get(u'string').callprop(u'charCodeAt', var.get(u'pos')),var.get(u'escapeCharCode')) and var.get(u'tokens').callprop(u'has', (var.get(u'pos')+Js(1.0)))):
                    var.put(u'token', var.get(u'tokens').callprop(u'get', (var.get(u'pos')+Js(1.0))))
                    var.put(u'output', (var.get(u'string').callprop(u'slice', var.get(u'start'), var.get(u'pos'))+var.get(u'token').get(u'0')), u'+')
                    var.put(u'start', var.put(u'pos', (var.get(u'token').get(u'index')+var.get(u'token').get(u'0').get(u'length'))))
                    var.get(u'tokens').callprop(u'delete', (var.get(u'pos')+Js(1.0)))
                    continue
                (var.put(u'pos',Js(var.get(u'pos').to_number())+Js(1))-Js(1))
            var.put(u'string', (var.get(u'output')+var.get(u'string').callprop(u'slice', var.get(u'start'))))
            var.put(u'validMatches', var.get(u'Array').callprop(u'from', var.get(u'tokens').callprop(u'values')))
            #for JS loop
            var.put(u'i', Js(0.0))
            var.put(u'il', var.get(u'validMatches').get(u'length'))
            while (var.get(u'i')<var.get(u'il')):
                try:
                    var.put(u'token$1', var.get(u'validMatches').get(var.get(u'i')))
                    PyJs_Object_163_ = Js({u'name':var.get(u'token$1').get(u'1'),u'location':var.get(u'token$1').get(u'index'),u'length':var.get(u'token$1').get(u'0').get(u'length')})
                    var.get(u'variables').callprop(u'push', PyJs_Object_163_)
                finally:
                        (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        PyJs_Object_164_ = Js({u'string':var.get(u'string'),u'variables':var.get(u'variables')})
        return PyJs_Object_164_
    PyJsHoisted_createModel_.func_name = u'createModel'
    var.put(u'createModel', PyJsHoisted_createModel_)
    @Js
    def PyJsHoisted_slim_(tree, profile, options, this, arguments, var=var):
        var = Scope({u'profile':profile, u'this':this, u'tree':tree, u'options':options, u'arguments':arguments}, var)
        var.registers([u'profile', u'SECONDARY_ATTRS', u'tree', u'booleanAttr', u'options', u'nodeOptions'])
        PyJs_Object_215_ = Js({})
        var.put(u'options', (var.get(u'options') or PyJs_Object_215_))
        var.put(u'SECONDARY_ATTRS', ((var.get(u'options').get(u'attributeWrap') and var.get(u'secondaryAttrs').get(var.get(u'options').get(u'attributeWrap'))) or var.get(u'secondaryAttrs').get(u'none')))
        @Js
        def PyJs_anonymous_216_(attr, this, arguments, var=var):
            var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
            var.registers([u'attr'])
            return (var.get(u'attr').get(u'name')+Js(u'=true'))
        PyJs_anonymous_216_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_217_(attr, this, arguments, var=var):
            var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
            var.registers([u'attr'])
            return var.get(u'attr').get(u'name')
        PyJs_anonymous_217_._set_name(u'anonymous')
        var.put(u'booleanAttr', (PyJs_anonymous_216_ if PyJsStrictEq(var.get(u'SECONDARY_ATTRS'),var.get(u'secondaryAttrs').get(u'none')) else PyJs_anonymous_217_))
        @Js
        def PyJs_secondary_220_(attrs, this, arguments, var=var):
            var = Scope({u'this':this, u'secondary':PyJs_secondary_220_, u'attrs':attrs, u'arguments':arguments}, var)
            var.registers([u'attrs'])
            @Js
            def PyJs_anonymous_221_(attr, this, arguments, var=var):
                var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
                var.registers([u'attr'])
                return (var.get(u'booleanAttr')(var.get(u'attr')) if var.get(u'attr').get(u'isBoolean') else ((var.get(u'attr').get(u'name')+Js(u'='))+var.get(u'profile').callprop(u'quote', var.get(u'attr').get(u'value'))))
            PyJs_anonymous_221_._set_name(u'anonymous')
            return var.get(u'attrs').callprop(u'map', PyJs_anonymous_221_).callprop(u'join', Js(u' '))
        PyJs_secondary_220_._set_name(u'secondary')
        PyJs_Object_219_ = Js({u'secondary':PyJs_secondary_220_})
        PyJs_Object_218_ = Js({u'open':((Js(u'[NAME][PRIMARY_ATTRS]')+var.get(u'SECONDARY_ATTRS'))+Js(u'[SELF_CLOSE]')),u'selfClose':Js(u'/'),u'attributes':PyJs_Object_219_})
        var.put(u'nodeOptions', PyJs_Object_218_)
        @Js
        def PyJs_anonymous_222_(outNode, renderFields, this, arguments, var=var):
            var = Scope({u'this':this, u'renderFields':renderFields, u'arguments':arguments, u'outNode':outNode}, var)
            var.registers([u'node', u'renderFields', u'outNode'])
            var.put(u'outNode', var.get(u'indentFormat')(var.get(u'outNode'), var.get(u'profile'), var.get(u'nodeOptions')))
            var.put(u'outNode', var.get(u'updateFormatting$1')(var.get(u'outNode'), var.get(u'profile')))
            if var.get(u'handlePseudoSnippet')(var.get(u'outNode')).neg():
                var.put(u'node', var.get(u'outNode').get(u'node'))
                if (var.get(u'node').get(u'value') or (var.get(u'node').get(u'children').get(u'length').neg() and var.get(u'node').get(u'selfClosing').neg())):
                    var.get(u'outNode').put(u'text', var.get(u'outNode').callprop(u'renderFields', var.get(u'formatNodeValue$1')(var.get(u'node'), var.get(u'profile'))))
            return var.get(u'outNode')
        PyJs_anonymous_222_._set_name(u'anonymous')
        return var.get(u'render')(var.get(u'tree'), var.get(u'options').get(u'field'), PyJs_anonymous_222_)
    PyJsHoisted_slim_.func_name = u'slim'
    var.put(u'slim', PyJsHoisted_slim_)
    @Js
    def PyJsHoisted_findUnescapedTokens_(str, token, this, arguments, var=var):
        var = Scope({u'this':this, u'token':token, u'arguments':arguments, u'str':str}, var)
        var.registers([u'pos', u'len', u'token', u'result', u'str', u'pos$1', u'tlen'])
        var.put(u'result', var.get(u'Set').create())
        var.put(u'tlen', var.get(u'token').get(u'length'))
        var.put(u'pos', Js(0.0))
        while PyJsStrictNeq(var.put(u'pos', var.get(u'str').callprop(u'indexOf', var.get(u'token'), var.get(u'pos'))),(-Js(1.0))):
            var.get(u'result').callprop(u'add', var.get(u'pos'))
            var.put(u'pos', var.get(u'tlen'), u'+')
        if var.get(u'result').get(u'size'):
            var.put(u'pos$1', Js(0.0))
            var.put(u'len', var.get(u'str').get(u'length'))
            while (var.get(u'pos$1')<var.get(u'len')):
                if PyJsStrictEq(var.get(u'str').get((var.put(u'pos$1',Js(var.get(u'pos$1').to_number())+Js(1))-Js(1))),Js(u'\\')):
                    var.get(u'result').callprop(u'delete', (var.put(u'pos$1',Js(var.get(u'pos$1').to_number())+Js(1))-Js(1)))
        @Js
        def PyJs_anonymous_132_(ix, this, arguments, var=var):
            var = Scope({u'this':this, u'ix':ix, u'arguments':arguments}, var)
            var.registers([u'ix'])
            return var.get(u'range')(var.get(u'ix'), var.get(u'tlen'))
        PyJs_anonymous_132_._set_name(u'anonymous')
        return var.get(u'Array').callprop(u'from', var.get(u'result')).callprop(u'map', PyJs_anonymous_132_)
    PyJsHoisted_findUnescapedTokens_.func_name = u'findUnescapedTokens'
    var.put(u'findUnescapedTokens', PyJsHoisted_findUnescapedTokens_)
    @Js
    def PyJsHoisted_isAlphaWord_(code, this, arguments, var=var):
        var = Scope({u'this':this, u'code':code, u'arguments':arguments}, var)
        var.registers([u'code'])
        return (PyJsStrictEq(var.get(u'code'),Js(95.0)) or var.get(u'isAlpha')(var.get(u'code')))
    PyJsHoisted_isAlphaWord_.func_name = u'isAlphaWord'
    var.put(u'isAlphaWord', PyJsHoisted_isAlphaWord_)
    @Js
    def PyJsHoisted_replaceVariables_(tree, variables, this, arguments, var=var):
        var = Scope({u'this':this, u'variables':variables, u'tree':tree, u'arguments':arguments}, var)
        var.registers([u'variables', u'tree'])
        PyJs_Object_161_ = Js({})
        var.put(u'variables', (var.get(u'variables') or PyJs_Object_161_))
        @Js
        def PyJs_anonymous_162_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            return var.get(u'replaceInNode')(var.get(u'node'), var.get(u'variables'))
        PyJs_anonymous_162_._set_name(u'anonymous')
        var.get(u'tree').callprop(u'walk', PyJs_anonymous_162_)
        return var.get(u'tree')
    PyJsHoisted_replaceVariables_.func_name = u'replaceVariables'
    var.put(u'replaceVariables', PyJsHoisted_replaceVariables_)
    @Js
    def PyJsHoisted_haml_(tree, profile, options, this, arguments, var=var):
        var = Scope({u'profile':profile, u'this':this, u'tree':tree, u'options':options, u'arguments':arguments}, var)
        var.registers([u'profile', u'tree', u'nodeOptions', u'options'])
        PyJs_Object_206_ = Js({})
        var.put(u'options', (var.get(u'options') or PyJs_Object_206_))
        @Js
        def PyJs_secondary_209_(attrs, this, arguments, var=var):
            var = Scope({u'this':this, u'secondary':PyJs_secondary_209_, u'attrs':attrs, u'arguments':arguments}, var)
            var.registers([u'attrs'])
            @Js
            def PyJs_anonymous_210_(attr, this, arguments, var=var):
                var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
                var.registers([u'attr'])
                return (((Js(u'')+var.get(u'attr').get(u'name'))+(Js(u'') if var.get(u'profile').callprop(u'get', Js(u'compactBooleanAttributes')) else Js(u'=true'))) if var.get(u'attr').get(u'isBoolean') else ((var.get(u'attr').get(u'name')+Js(u'='))+var.get(u'profile').callprop(u'quote', var.get(u'attr').get(u'value'))))
            PyJs_anonymous_210_._set_name(u'anonymous')
            return var.get(u'attrs').callprop(u'map', PyJs_anonymous_210_).callprop(u'join', Js(u' '))
        PyJs_secondary_209_._set_name(u'secondary')
        PyJs_Object_208_ = Js({u'secondary':PyJs_secondary_209_})
        PyJs_Object_207_ = Js({u'open':Js(u'[%NAME][PRIMARY_ATTRS][(SECONDARY_ATTRS)][SELF_CLOSE]'),u'selfClose':Js(u'/'),u'attributes':PyJs_Object_208_})
        var.put(u'nodeOptions', PyJs_Object_207_)
        @Js
        def PyJs_anonymous_211_(outNode, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'outNode':outNode}, var)
            var.registers([u'node', u'outNode'])
            var.put(u'outNode', var.get(u'indentFormat')(var.get(u'outNode'), var.get(u'profile'), var.get(u'nodeOptions')))
            var.put(u'outNode', var.get(u'updateFormatting')(var.get(u'outNode'), var.get(u'profile')))
            if var.get(u'handlePseudoSnippet')(var.get(u'outNode')).neg():
                var.put(u'node', var.get(u'outNode').get(u'node'))
                if (var.get(u'node').get(u'value') or (var.get(u'node').get(u'children').get(u'length').neg() and var.get(u'node').get(u'selfClosing').neg())):
                    var.get(u'outNode').put(u'text', var.get(u'outNode').callprop(u'renderFields', var.get(u'formatNodeValue')(var.get(u'node'), var.get(u'profile'))))
            return var.get(u'outNode')
        PyJs_anonymous_211_._set_name(u'anonymous')
        return var.get(u'render')(var.get(u'tree'), var.get(u'options').get(u'field'), PyJs_anonymous_211_)
    PyJsHoisted_haml_.func_name = u'haml'
    var.put(u'haml', PyJsHoisted_haml_)
    @Js
    def PyJsHoisted_expandClassNames_(node, options, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'options':options, u'arguments':arguments}, var)
        var.registers([u'node', u'classNames', u'options'])
        @Js
        def PyJs_anonymous_149_(out, cl, this, arguments, var=var):
            var = Scope({u'this':this, u'cl':cl, u'arguments':arguments, u'out':out}, var)
            var.registers([u'ix', u'cl', u'out'])
            var.put(u'ix', var.get(u'cl').callprop(u'indexOf', var.get(u'options').get(u'modifier')))
            if PyJsStrictNeq(var.get(u'ix'),(-Js(1.0))):
                var.get(u'out').callprop(u'add', var.get(u'cl').callprop(u'slice', Js(0.0), var.get(u'ix')))
            return var.get(u'out').callprop(u'add', var.get(u'cl'))
        PyJs_anonymous_149_._set_name(u'anonymous')
        var.put(u'classNames', var.get(u'node').get(u'classList').callprop(u'reduce', PyJs_anonymous_149_, var.get(u'Set').create()))
        if var.get(u'classNames').get(u'size'):
            var.get(u'node').callprop(u'setAttribute', Js(u'class'), var.get(u'Array').callprop(u'from', var.get(u'classNames')).callprop(u'join', Js(u' ')))
    PyJsHoisted_expandClassNames_.func_name = u'expandClassNames'
    var.put(u'expandClassNames', PyJsHoisted_expandClassNames_)
    @Js
    def PyJsHoisted_setFormatting_(outNode, profile, this, arguments, var=var):
        var = Scope({u'profile':profile, u'this':this, u'arguments':arguments, u'outNode':outNode}, var)
        var.registers([u'node', u'profile', u'prefix', u'outNode'])
        var.put(u'node', var.get(u'outNode').get(u'node'))
        if var.get(u'shouldFormatNode')(var.get(u'node'), var.get(u'profile')):
            var.get(u'outNode').put(u'indent', var.get(u'profile').callprop(u'indent', var.get(u'getIndentLevel')(var.get(u'node'), var.get(u'profile'))))
            var.get(u'outNode').put(u'newline', Js(u'\n'))
            var.put(u'prefix', (var.get(u'outNode').get(u'newline')+var.get(u'outNode').get(u'indent')))
            if (var.get(u'isRoot')(var.get(u'node').get(u'parent')).neg() or var.get(u'isFirstChild')(var.get(u'node')).neg()):
                var.get(u'outNode').put(u'beforeOpen', var.get(u'prefix'))
                if var.get(u'node').get(u'isTextOnly'):
                    var.get(u'outNode').put(u'beforeText', var.get(u'prefix'))
            if var.get(u'hasInnerFormatting')(var.get(u'node'), var.get(u'profile')):
                if var.get(u'node').get(u'isTextOnly').neg():
                    var.get(u'outNode').put(u'beforeText', (var.get(u'prefix')+var.get(u'profile').callprop(u'indent', Js(1.0))))
                var.get(u'outNode').put(u'beforeClose', var.get(u'prefix'))
        return var.get(u'outNode')
    PyJsHoisted_setFormatting_.func_name = u'setFormatting'
    var.put(u'setFormatting', PyJsHoisted_setFormatting_)
    @Js
    def PyJsHoisted_capitalize_(word, this, arguments, var=var):
        var = Scope({u'this':this, u'word':word, u'arguments':arguments}, var)
        var.registers([u'word'])
        return (var.get(u'word').get(u'0').callprop(u'toUpperCase')+var.get(u'word').callprop(u'slice', Js(1.0)))
    PyJsHoisted_capitalize_.func_name = u'capitalize'
    var.put(u'capitalize', PyJsHoisted_capitalize_)
    @Js
    def PyJsHoisted_consumeArgument_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'stream', u'result', u'value'])
        var.put(u'result', var.get(u'CSSValue').create())
        pass
        while var.get(u'stream').callprop(u'eol').neg():
            var.get(u'eatSpace')(var.get(u'stream'))
            var.put(u'value', (((var.get(u'consumeNumericValue')(var.get(u'stream')) or var.get(u'consumeColor')(var.get(u'stream'))) or var.get(u'consumeQuoted$1')(var.get(u'stream'))) or var.get(u'consumeKeywordOrFunction')(var.get(u'stream'))))
            if var.get(u'value').neg():
                break
            var.get(u'result').callprop(u'add', var.get(u'value'))
        return (var.get(u'result') if var.get(u'result').get(u'size') else var.get(u"null"))
    PyJsHoisted_consumeArgument_.func_name = u'consumeArgument'
    var.put(u'consumeArgument', PyJsHoisted_consumeArgument_)
    @Js
    def PyJsHoisted_indentFormat_(outNode, profile, options, this, arguments, var=var):
        var = Scope({u'profile':profile, u'this':this, u'options':options, u'arguments':arguments, u'outNode':outNode}, var)
        var.registers([u'node', u'profile', u'data', u'options', u'outNode'])
        PyJs_Object_200_ = Js({})
        var.put(u'options', var.get(u'Object').callprop(u'assign', PyJs_Object_200_, var.get(u'defaultNodeOptions'), var.get(u'options')))
        var.put(u'node', var.get(u'outNode').get(u'node'))
        var.get(u'outNode').put(u'indent', var.get(u'profile').callprop(u'indent', var.get(u'getIndentLevel$1')(var.get(u'node'), var.get(u'profile'))))
        var.get(u'outNode').put(u'newline', Js(u'\n'))
        if (var.get(u'isRoot')(var.get(u'node').get(u'parent')).neg() or var.get(u'isFirstChild')(var.get(u'node')).neg()):
            var.get(u'outNode').put(u'beforeOpen', (var.get(u'outNode').get(u'newline')+var.get(u'outNode').get(u'indent')))
        if var.get(u'node').get(u'name'):
            PyJs_Object_201_ = Js({u'NAME':var.get(u'profile').callprop(u'name', var.get(u'node').get(u'name')),u'SELF_CLOSE':(var.get(u'options').get(u'selfClose') if var.get(u'node').get(u'selfClosing') else var.get(u"null"))})
            var.put(u'data', var.get(u'Object').callprop(u'assign', PyJs_Object_201_, var.get(u'getAttributes')(var.get(u'outNode'), var.get(u'profile'), var.get(u'options').get(u'attributes'))))
            if ((var.get(u'options').get(u'omitName') and var.get(u'options').get(u'omitName').callprop(u'test', var.get(u'data').get(u'NAME'))) and var.get(u'data').get(u'PRIMARY_ATTRS')):
                var.get(u'data').put(u'NAME', var.get(u"null"))
            if (var.get(u'options').get(u'open')!=var.get(u"null")):
                var.get(u'outNode').put(u'open', var.get(u'template')(var.get(u'options').get(u'open'), var.get(u'data')))
            if (var.get(u'options').get(u'close')!=var.get(u"null")):
                var.get(u'outNode').put(u'close', var.get(u'template')(var.get(u'options').get(u'close'), var.get(u'data')))
        return var.get(u'outNode')
    PyJsHoisted_indentFormat_.func_name = u'indentFormat'
    var.put(u'indentFormat', PyJsHoisted_indentFormat_)
    @Js
    def PyJsHoisted_mergeClassNames_(PyJsArg_66726f6d_, to, this, arguments, var=var):
        var = Scope({u'this':this, u'to':to, u'from':PyJsArg_66726f6d_, u'arguments':arguments}, var)
        var.registers([u'i', u'to', u'classNames', u'from'])
        var.put(u'classNames', var.get(u'from').get(u'classList'))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'classNames').get(u'length')):
            try:
                var.get(u'to').callprop(u'addClass', var.get(u'classNames').get(var.get(u'i')))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'to')
    PyJsHoisted_mergeClassNames_.func_name = u'mergeClassNames'
    var.put(u'mergeClassNames', PyJsHoisted_mergeClassNames_)
    @Js
    def PyJsHoisted_consumeKeywordOrFunction_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'args', u'kw', u'stream'])
        var.put(u'kw', var.get(u'consumeKeyword')(var.get(u'stream')))
        if var.get(u'kw'):
            var.put(u'args', var.get(u'consumeArgumentList')(var.get(u'stream')))
            return (var.get(u'FunctionCall').create(var.get(u'kw').callprop(u'toString'), var.get(u'args')) if var.get(u'args') else var.get(u'kw'))
    PyJsHoisted_consumeKeywordOrFunction_.func_name = u'consumeKeywordOrFunction'
    var.put(u'consumeKeywordOrFunction', PyJsHoisted_consumeKeywordOrFunction_)
    @Js
    def PyJsHoisted_resolveNumericValue_(property, token, this, arguments, var=var):
        var = Scope({u'this':this, u'token':token, u'property':property, u'arguments':arguments}, var)
        var.registers([u'token', u'property'])
        if var.get(u'token').get(u'unit'):
            var.get(u'token').put(u'unit', (var.get(u'unitAliases').get(var.get(u'token').get(u'unit')) or var.get(u'token').get(u'unit')))
        else:
            if (PyJsStrictNeq(var.get(u'token').get(u'value'),Js(0.0)) and PyJsStrictEq(var.get(u'unitlessProperties').callprop(u'indexOf', var.get(u'property')),(-Js(1.0)))):
                var.get(u'token').put(u'unit', (Js(u'px') if PyJsStrictEq(var.get(u'token').get(u'value'),(var.get(u'token').get(u'value')|Js(0.0))) else Js(u'em')))
        return var.get(u'token')
    PyJsHoisted_resolveNumericValue_.func_name = u'resolveNumericValue'
    var.put(u'resolveNumericValue', PyJsHoisted_resolveNumericValue_)
    @Js
    def PyJsHoisted_createAttribute_(name, value, this, arguments, var=var):
        var = Scope({u'this':this, u'name':name, u'value':value, u'arguments':arguments}, var)
        var.registers([u'name', u'value'])
        if var.get(u'name').instanceof(var.get(u'Attribute')):
            return var.get(u'name')
        if PyJsStrictEq(var.get(u'name',throw=False).typeof(),Js(u'string')):
            return var.get(u'Attribute').create(var.get(u'name'), var.get(u'value'))
        if (var.get(u'name') and PyJsStrictEq(var.get(u'name',throw=False).typeof(),Js(u'object'))):
            return var.get(u'Attribute').create(var.get(u'name').get(u'name'), var.get(u'name').get(u'value'), var.get(u'name').get(u'options'))
    PyJsHoisted_createAttribute_.func_name = u'createAttribute'
    var.put(u'createAttribute', PyJsHoisted_createAttribute_)
    @Js
    def PyJsHoisted_createSnippetsRegistry_(syntax, snippets, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'snippets':snippets, u'syntax':syntax}, var)
        var.registers([u'snippets', u'syntax'])
        return (var.get(u'snippets') if var.get(u'snippets').instanceof(var.get(u'SnippetsRegistry')) else var.get(u'snippetsRegistryFactory')((Js(u'css') if var.get(u'isStylesheet')(var.get(u'syntax')) else var.get(u'syntax')), var.get(u'snippets')))
    PyJsHoisted_createSnippetsRegistry_.func_name = u'createSnippetsRegistry'
    var.put(u'createSnippetsRegistry', PyJsHoisted_createSnippetsRegistry_)
    @Js
    def PyJsHoisted_consumeField_(stream, location, this, arguments, var=var):
        var = Scope({u'this':this, u'location':location, u'stream':stream, u'arguments':arguments}, var)
        var.registers([u'start', u'placeholder', u'location', u'stream', u'index'])
        var.put(u'start', var.get(u'stream').get(u'pos'))
        if var.get(u'stream').callprop(u'eat', var.get(u'DOLLAR')):
            var.put(u'index', var.get(u'consumeIndex')(var.get(u'stream')))
            var.put(u'placeholder', Js(u''))
            if (var.get(u'index')!=var.get(u"null")):
                return var.get(u'Field').create(var.get(u'index'), var.get(u'placeholder'), var.get(u'location'))
            if var.get(u'stream').callprop(u'eat', var.get(u'OPEN_BRACE')):
                var.put(u'index', var.get(u'consumeIndex')(var.get(u'stream')))
                if (var.get(u'index')!=var.get(u"null")):
                    if var.get(u'stream').callprop(u'eat', var.get(u'COLON')):
                        var.put(u'placeholder', var.get(u'consumePlaceholder')(var.get(u'stream')))
                    if var.get(u'stream').callprop(u'eat', var.get(u'CLOSE_BRACE')):
                        return var.get(u'Field').create(var.get(u'index'), var.get(u'placeholder'), var.get(u'location'))
        var.get(u'stream').put(u'pos', var.get(u'start'))
    PyJsHoisted_consumeField_.func_name = u'consumeField'
    var.put(u'consumeField', PyJsHoisted_consumeField_)
    @Js
    def PyJsHoisted_commentNode_(outNode, options, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'options':options, u'outNode':outNode}, var)
        var.registers([u'node', u'i', u'attrs', u'outNode', u'options', u'il'])
        var.put(u'node', var.get(u'outNode').get(u'node'))
        if ((var.get(u'options').get(u'enabled').neg() or var.get(u'options').get(u'trigger').neg()) or var.get(u'node').get(u'name').neg()):
            return var.get('undefined')
        @Js
        def PyJs_anonymous_193_(out, attr, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'attr':attr, u'out':out}, var)
            var.registers([u'attr', u'out'])
            if (var.get(u'attr').get(u'name') and (var.get(u'attr').get(u'value')!=var.get(u"null"))):
                var.get(u'out').put(var.get(u'attr').get(u'name').callprop(u'toUpperCase').callprop(u'replace', JsRegExp(u'/-/g'), Js(u'_')), var.get(u'attr').get(u'value'))
            return var.get(u'out')
        PyJs_anonymous_193_._set_name(u'anonymous')
        PyJs_Object_194_ = Js({})
        var.put(u'attrs', var.get(u'outNode').get(u'node').get(u'attributes').callprop(u'reduce', PyJs_anonymous_193_, PyJs_Object_194_))
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'il', var.get(u'options').get(u'trigger').get(u'length'))
        while (var.get(u'i')<var.get(u'il')):
            try:
                if var.get(u'attrs').contains(var.get(u'options').get(u'trigger').get(var.get(u'i')).callprop(u'toUpperCase')):
                    var.get(u'outNode').put(u'open', (var.get(u'template')(var.get(u'options').get(u'before'), var.get(u'attrs'))+var.get(u'outNode').get(u'open')))
                    if var.get(u'outNode').get(u'close'):
                        var.get(u'outNode').put(u'close', var.get(u'template')(var.get(u'options').get(u'after'), var.get(u'attrs')), u'+')
                    break
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
    PyJsHoisted_commentNode_.func_name = u'commentNode'
    var.put(u'commentNode', PyJsHoisted_commentNode_)
    @Js
    def PyJsHoisted_sample_(arr, count, this, arguments, var=var):
        var = Scope({u'count':count, u'this':this, u'arr':arr, u'arguments':arguments}, var)
        var.registers([u'count', u'arr', u'iterations', u'len', u'result'])
        var.put(u'len', var.get(u'arr').get(u'length'))
        var.put(u'iterations', var.get(u'Math').callprop(u'min', var.get(u'len'), var.get(u'count')))
        var.put(u'result', var.get(u'Set').create())
        while (var.get(u'result').get(u'size')<var.get(u'iterations')):
            var.get(u'result').callprop(u'add', var.get(u'arr').get(var.get(u'rand')(Js(0.0), var.get(u'len'))))
        return var.get(u'Array').callprop(u'from', var.get(u'result'))
    PyJsHoisted_sample_.func_name = u'sample'
    var.put(u'sample', PyJsHoisted_sample_)
    @Js
    def PyJsHoisted_consumePlaceholder_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'stream', u'code', u'stack', u'err', u'pos'])
        pass
        var.put(u'stack', Js([]))
        var.get(u'stream').put(u'start', var.get(u'stream').get(u'pos'))
        while var.get(u'stream').callprop(u'eol').neg():
            var.put(u'code', var.get(u'stream').callprop(u'peekCode'))
            if PyJsStrictEq(var.get(u'code'),var.get(u'OPEN_BRACE')):
                var.get(u'stack').callprop(u'push', var.get(u'stream').get(u'pos'))
            else:
                if PyJsStrictEq(var.get(u'code'),var.get(u'CLOSE_BRACE')):
                    if var.get(u'stack').get(u'length').neg():
                        break
                    var.get(u'stack').callprop(u'pop')
            (var.get(u'stream').put(u'pos',Js(var.get(u'stream').get(u'pos').to_number())+Js(1))-Js(1))
        if var.get(u'stack').get(u'length'):
            var.put(u'pos', var.get(u'stack').callprop(u'pop'))
            var.put(u'err', var.get(u'Error').create((Js(u'Unable to find matching "}" for curly brace at ')+var.get(u'stack').callprop(u'pop'))))
            var.get(u'err').put(u'pos', var.get(u'pos'))
            PyJsTempException = JsToPyException(var.get(u'err'))
            raise PyJsTempException
        return var.get(u'stream').callprop(u'current')
    PyJsHoisted_consumePlaceholder_.func_name = u'consumePlaceholder'
    var.put(u'consumePlaceholder', PyJsHoisted_consumePlaceholder_)
    @Js
    def PyJsHoistedNonPyName(node, profile, this, arguments, var=var):
        var = Scope({u'node':node, u'profile':profile, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'profile'])
        return (var.get(u'node') and (var.get(u'node').get(u'isTextOnly') or var.get(u'profile').callprop(u'isInline', var.get(u'node'))))
    PyJsHoistedNonPyName.func_name = u'isInline$1'
    var.put(u'isInline$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_formatAttributes_(outNode, profile, this, arguments, var=var):
        var = Scope({u'profile':profile, u'this':this, u'arguments':arguments, u'outNode':outNode}, var)
        var.registers([u'node', u'profile', u'outNode'])
        var.put(u'node', var.get(u'outNode').get(u'node'))
        @Js
        def PyJs_anonymous_192_(attr, this, arguments, var=var):
            var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
            var.registers([u'attrName', u'attrValue', u'attr'])
            if (var.get(u'attr').get(u'options').get(u'implied') and (var.get(u'attr').get(u'value')==var.get(u"null"))):
                return var.get(u"null")
            var.put(u'attrName', var.get(u'profile').callprop(u'attribute', var.get(u'attr').get(u'name')))
            var.put(u'attrValue', var.get(u"null"))
            if (var.get(u'attr').get(u'options').get(u'boolean') or PyJsStrictNeq(var.get(u'profile').callprop(u'get', Js(u'booleanAttributes')).callprop(u'indexOf', var.get(u'attrName').callprop(u'toLowerCase')),(-Js(1.0)))):
                if (var.get(u'profile').callprop(u'get', Js(u'compactBooleanAttributes')) and (var.get(u'attr').get(u'value')==var.get(u"null"))):
                    return (Js(u' ')+var.get(u'attrName'))
                else:
                    if (var.get(u'attr').get(u'value')==var.get(u"null")):
                        var.put(u'attrValue', var.get(u'attrName'))
            if (var.get(u'attrValue')==var.get(u"null")):
                var.put(u'attrValue', var.get(u'outNode').callprop(u'renderFields', var.get(u'attr').get(u'value')))
            return (((Js(u' ')+var.get(u'attrName'))+Js(u'='))+var.get(u'profile').callprop(u'quote', var.get(u'attrValue')))
        PyJs_anonymous_192_._set_name(u'anonymous')
        return var.get(u'node').get(u'attributes').callprop(u'map', PyJs_anonymous_192_).callprop(u'join', Js(u''))
    PyJsHoisted_formatAttributes_.func_name = u'formatAttributes'
    var.put(u'formatAttributes', PyJsHoisted_formatAttributes_)
    @Js
    def PyJsHoisted_replacePlaceholder_(str, value, _state, this, arguments, var=var):
        var = Scope({u'this':this, u'_state':_state, u'value':value, u'str':str, u'arguments':arguments}, var)
        var.registers([u'ranges', u'_state', u'value', u'str'])
        if PyJsStrictEq(var.get(u'str',throw=False).typeof(),Js(u'string')):
            var.put(u'ranges', var.get(u'findUnescapedTokens')(var.get(u'str'), var.get(u'placeholder')))
            if var.get(u'ranges').get(u'length'):
                if var.get(u'_state'):
                    var.get(u'_state').put(u'replaced', var.get(u'true'))
                var.put(u'str', var.get(u'replaceRanges')(var.get(u'str'), var.get(u'ranges'), var.get(u'value')))
        return var.get(u'str')
    PyJsHoisted_replacePlaceholder_.func_name = u'replacePlaceholder'
    var.put(u'replacePlaceholder', PyJsHoisted_replacePlaceholder_)
    @Js
    def PyJsHoisted_normalize_(str, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
        var.registers([u'str'])
        return var.get(u'String')(var.get(u'str')).callprop(u'trim')
    PyJsHoisted_normalize_.func_name = u'normalize'
    var.put(u'normalize', PyJsHoisted_normalize_)
    @Js
    def PyJsHoistedNonPyName(outNode, profile, this, arguments, var=var):
        var = Scope({u'profile':profile, u'this':this, u'arguments':arguments, u'outNode':outNode}, var)
        var.registers([u'node', u'profile', u'parent', u'outNode'])
        var.put(u'node', var.get(u'outNode').get(u'node'))
        var.put(u'parent', var.get(u'node').get(u'parent'))
        if ((((PyJsStrictEq(var.get(u'profile').callprop(u'get', Js(u'inlineBreak')),Js(0.0)) and var.get(u'isInline$1')(var.get(u'node'), var.get(u'profile'))) and var.get(u'isRoot')(var.get(u'parent')).neg()) and (var.get(u'parent').get(u'value')==var.get(u"null"))) and PyJsStrictEq(var.get(u'parent').get(u'children').get(u'length'),Js(1.0))):
            var.get(u'outNode').put(u'beforeOpen', Js(u': '))
        if (var.get(u'node').get(u'isTextOnly').neg() and var.get(u'node').get(u'value')):
            var.get(u'outNode').put(u'beforeText', (((var.get(u'outNode').get(u'newline')+var.get(u'outNode').get(u'indent'))+var.get(u'profile').callprop(u'indent', Js(1.0))) if var.get(u'reNl$1').callprop(u'test', var.get(u'node').get(u'value')) else Js(u' ')))
        return var.get(u'outNode')
    PyJsHoistedNonPyName.func_name = u'updateFormatting$1'
    var.put(u'updateFormatting$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(outNode, profile, this, arguments, var=var):
        var = Scope({u'profile':profile, u'this':this, u'arguments':arguments, u'outNode':outNode}, var)
        var.registers([u'node', u'profile', u'outNode'])
        var.put(u'node', var.get(u'outNode').get(u'node'))
        if (var.get(u'node').get(u'isTextOnly').neg() and var.get(u'node').get(u'value')):
            var.get(u'outNode').put(u'beforeText', (((var.get(u'outNode').get(u'newline')+var.get(u'outNode').get(u'indent'))+var.get(u'profile').callprop(u'indent', Js(1.0))) if var.get(u'reNl$2').callprop(u'test', var.get(u'node').get(u'value')) else Js(u' ')))
        return var.get(u'outNode')
    PyJsHoistedNonPyName.func_name = u'updateFormatting$2'
    var.put(u'updateFormatting$2', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(syntax, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'syntax':syntax}, var)
        var.registers([u'syntax'])
        return (var.get(u'syntax').neg().neg() and var.get(u'syntaxFormat').contains(var.get(u'syntax')))
    PyJsHoistedNonPyName.func_name = u'supports$1'
    var.put(u'supports$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_isWhite_(code, this, arguments, var=var):
        var = Scope({u'this':this, u'code':code, u'arguments':arguments}, var)
        var.registers([u'code'])
        return (PyJsStrictEq(var.get(u'code'),var.get(u'SPACE')) or PyJsStrictEq(var.get(u'code'),var.get(u'TAB')))
    PyJsHoisted_isWhite_.func_name = u'isWhite'
    var.put(u'isWhite', PyJsHoisted_isWhite_)
    @Js
    def PyJsHoisted_html_(tree, profile, options, this, arguments, var=var):
        var = Scope({u'profile':profile, u'this':this, u'tree':tree, u'options':options, u'arguments':arguments}, var)
        var.registers([u'profile', u'tree', u'options'])
        PyJs_Object_189_ = Js({})
        var.put(u'options', var.get(u'Object').callprop(u'assign', PyJs_Object_189_, var.get(u'options')))
        PyJs_Object_190_ = Js({})
        var.get(u'options').put(u'comment', var.get(u'Object').callprop(u'assign', PyJs_Object_190_, var.get(u'commentOptions'), var.get(u'options').get(u'comment')))
        @Js
        def PyJs_anonymous_191_(outNode, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'outNode':outNode}, var)
            var.registers([u'node', u'outNode', u'name', u'attrs'])
            var.put(u'outNode', var.get(u'setFormatting')(var.get(u'outNode'), var.get(u'profile')))
            if var.get(u'handlePseudoSnippet')(var.get(u'outNode')).neg():
                var.put(u'node', var.get(u'outNode').get(u'node'))
                if var.get(u'node').get(u'name'):
                    var.put(u'name', var.get(u'profile').callprop(u'name', var.get(u'node').get(u'name')))
                    var.put(u'attrs', var.get(u'formatAttributes')(var.get(u'outNode'), var.get(u'profile')))
                    var.get(u'outNode').put(u'open', ((((Js(u'<')+var.get(u'name'))+var.get(u'attrs'))+(var.get(u'profile').callprop(u'selfClose') if var.get(u'node').get(u'selfClosing') else Js(u'')))+Js(u'>')))
                    if var.get(u'node').get(u'selfClosing').neg():
                        var.get(u'outNode').put(u'close', ((Js(u'</')+var.get(u'name'))+Js(u'>')))
                    var.get(u'commentNode')(var.get(u'outNode'), var.get(u'options').get(u'comment'))
                if (var.get(u'node').get(u'value') or (var.get(u'node').get(u'children').get(u'length').neg() and var.get(u'node').get(u'selfClosing').neg())):
                    var.get(u'outNode').put(u'text', var.get(u'outNode').callprop(u'renderFields', var.get(u'node').get(u'value')))
            return var.get(u'outNode')
        PyJs_anonymous_191_._set_name(u'anonymous')
        return var.get(u'render')(var.get(u'tree'), var.get(u'options').get(u'field'), PyJs_anonymous_191_)
    PyJsHoisted_html_.func_name = u'html'
    var.put(u'html', PyJsHoisted_html_)
    @Js
    def PyJsHoisted_pad_(text, len, this, arguments, var=var):
        var = Scope({u'this':this, u'text':text, u'arguments':arguments, u'len':len}, var)
        var.registers([u'text', u'len'])
        while (var.get(u'text').get(u'length')<var.get(u'len')):
            var.put(u'text', Js(u' '), u'+')
        return var.get(u'text')
    PyJsHoisted_pad_.func_name = u'pad'
    var.put(u'pad', PyJsHoisted_pad_)
    @Js
    def PyJsHoisted_isStylesheet_(syntax, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'syntax':syntax}, var)
        var.registers([u'syntax'])
        return var.get(u'stylesheetSyntaxes').callprop(u'has', var.get(u'syntax'))
    PyJsHoisted_isStylesheet_.func_name = u'isStylesheet'
    var.put(u'isStylesheet', PyJsHoisted_isStylesheet_)
    @Js
    def PyJsHoisted_css_(tree, profile, options, this, arguments, var=var):
        var = Scope({u'profile':profile, u'this':this, u'tree':tree, u'options':options, u'arguments':arguments}, var)
        var.registers([u'profile', u'tree', u'options'])
        PyJs_Object_327_ = Js({})
        var.put(u'options', var.get(u'Object').callprop(u'assign', PyJs_Object_327_, var.get(u'defaultOptions$3'), var.get(u'options')))
        @Js
        def PyJs_anonymous_328_(outNode, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'outNode':outNode}, var)
            var.registers([u'node', u'value', u'outNode'])
            var.put(u'node', var.get(u'outNode').get(u'node'))
            var.put(u'value', var.get(u'String')((var.get(u'node').get(u'value') or Js(u''))))
            if var.get(u'node').get(u'attributes').get(u'length'):
                var.put(u'value', var.get(u'injectIntoField')(var.get(u'value'), var.get(u'stringifyAttributeList')(var.get(u'node').get(u'attributes'), var.get(u'options'))))
            var.get(u'outNode').put(u'open', (var.get(u'node').get(u'name') and var.get(u'profile').callprop(u'name', var.get(u'node').get(u'name'))))
            var.get(u'outNode').put(u'afterOpen', var.get(u'options').get(u'format').get(u'between'))
            var.get(u'outNode').put(u'text', var.get(u'outNode').callprop(u'renderFields', (var.get(u'value') or var.get(u"null"))))
            if var.get(u'outNode').get(u'open'):
                var.get(u'outNode').put(u'afterText', var.get(u'options').get(u'format').get(u'after'))
            if var.get(u'profile').callprop(u'get', Js(u'format')):
                var.get(u'outNode').put(u'newline', Js(u'\n'))
                if PyJsStrictNeq(var.get(u'tree').get(u'lastChild'),var.get(u'node')):
                    var.get(u'outNode').put(u'afterText', var.get(u'outNode').get(u'newline'), u'+')
            return var.get(u'outNode')
        PyJs_anonymous_328_._set_name(u'anonymous')
        return var.get(u'render')(var.get(u'tree'), var.get(u'options').get(u'field'), PyJs_anonymous_328_)
    PyJsHoisted_css_.func_name = u'css'
    var.put(u'css', PyJsHoisted_css_)
    @Js
    def PyJsHoisted_isRepeating_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node'])
        while var.get(u'node').get(u'parent'):
            if ((var.get(u'node').get(u'repeat') and var.get(u'node').get(u'repeat').get(u'value')) and (var.get(u'node').get(u'repeat').get(u'value')>Js(1.0))):
                return var.get(u'true')
            var.put(u'node', var.get(u'node').get(u'parent'))
        return Js(False)
    PyJsHoisted_isRepeating_.func_name = u'isRepeating'
    var.put(u'isRepeating', PyJsHoisted_isRepeating_)
    @Js
    def PyJsHoistedNonPyName(item, i, arr, this, arguments, var=var):
        var = Scope({u'i':i, u'item':item, u'arr':arr, u'this':this, u'arguments':arguments}, var)
        var.registers([u'i', u'item', u'arr'])
        return (var.get(u'item') and PyJsStrictEq(var.get(u'arr').callprop(u'indexOf', var.get(u'item')),var.get(u'i')))
    PyJsHoistedNonPyName.func_name = u'uniqueClass$1'
    var.put(u'uniqueClass$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_isRoot_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node'])
        return (var.get(u'node') and var.get(u'node').get(u'parent').neg())
    PyJsHoisted_isRoot_.func_name = u'isRoot'
    var.put(u'isRoot', PyJsHoisted_isRoot_)
    @Js
    def PyJsHoisted_nest_(snippets, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'snippets':snippets}, var)
        var.registers([u'i', u'prev', u'stack', u'snippets', u'cur'])
        var.put(u'snippets', var.get(u'snippets').callprop(u'sort', var.get(u'snippetsSort')))
        var.put(u'stack', Js([]))
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'cur', PyJsComma(Js(0.0), Js(None)))
        var.put(u'prev', PyJsComma(Js(0.0), Js(None)))
        while (var.get(u'i')<var.get(u'snippets').get(u'length')):
            try:
                var.put(u'cur', var.get(u'snippets').get(var.get(u'i')))
                if var.get(u'cur').get(u'property').neg():
                    continue
                while var.get(u'stack').get(u'length'):
                    var.put(u'prev', var.get(u'stack').get((var.get(u'stack').get(u'length')-Js(1.0))))
                    if (PyJsStrictEq(var.get(u'cur').get(u'property').callprop(u'indexOf', var.get(u'prev').get(u'property')),Js(0.0)) and PyJsStrictEq(var.get(u'cur').get(u'property').callprop(u'charCodeAt', var.get(u'prev').get(u'property').get(u'length')),var.get(u'DASH$1$2'))):
                        var.get(u'prev').callprop(u'addDependency', var.get(u'cur'))
                        var.get(u'stack').callprop(u'push', var.get(u'cur'))
                        break
                    var.get(u'stack').callprop(u'pop')
                if var.get(u'stack').get(u'length').neg():
                    var.get(u'stack').callprop(u'push', var.get(u'cur'))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'snippets')
    PyJsHoisted_nest_.func_name = u'nest'
    var.put(u'nest', PyJsHoisted_nest_)
    @Js
    def PyJsHoisted_resolveAsSnippet_(node, snippet, this, arguments, var=var):
        var = Scope({u'node':node, u'snippet':snippet, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'snippet'])
        return var.get(u'setNodeAsText')(var.get(u'node'), var.get(u'snippet').get(u'value'))
    PyJsHoisted_resolveAsSnippet_.func_name = u'resolveAsSnippet'
    var.put(u'resolveAsSnippet', PyJsHoisted_resolveAsSnippet_)
    @Js
    def PyJsHoisted_resolveAsProperty_(node, snippet, this, arguments, var=var):
        var = Scope({u'node':node, u'snippet':snippet, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'i', u'snippet', u'token', u'kw', u'abbr', u'keywords'])
        var.put(u'abbr', var.get(u'node').get(u'name'))
        var.get(u'node').put(u'name', var.get(u'snippet').get(u'property'))
        if (var.get(u'node').get(u'value') and PyJsStrictEq(var.get(u'node').get(u'value').typeof(),Js(u'object'))):
            var.put(u'keywords', var.get(u'snippet').callprop(u'keywords'))
            if var.get(u'node').get(u'value').get(u'size').neg():
                var.put(u'kw', var.get(u'findBestMatch')(var.get(u'getUnmatchedPart')(var.get(u'abbr'), var.get(u'node').get(u'name')), var.get(u'keywords')))
                if var.get(u'kw').neg():
                    var.put(u'kw', var.get(u'snippet').get(u'defaulValue'))
                    if (var.get(u'kw') and PyJsStrictEq(var.get(u'kw').callprop(u'indexOf', Js(u'${')),(-Js(1.0)))):
                        var.put(u'kw', ((Js(u'${1:')+var.get(u'kw'))+Js(u'}')))
                if var.get(u'kw'):
                    var.get(u'node').get(u'value').callprop(u'add', var.get(u'kw'))
            else:
                #for JS loop
                var.put(u'i', Js(0.0))
                var.put(u'token', PyJsComma(Js(0.0), Js(None)))
                while (var.get(u'i')<var.get(u'node').get(u'value').get(u'value').get(u'length')):
                    try:
                        var.put(u'token', var.get(u'node').get(u'value').get(u'value').get(var.get(u'i')))
                        if PyJsStrictEq(var.get(u'token'),Js(u'!')):
                            var.put(u'token', ((Js(u'${1} ') if var.get(u'i').neg() else Js(u''))+Js(u'!important')))
                        else:
                            if var.get(u'isKeyword$1$1')(var.get(u'token')):
                                var.put(u'token', ((var.get(u'findBestMatch')(var.get(u'token').get(u'value'), var.get(u'keywords')) or var.get(u'findBestMatch')(var.get(u'token').get(u'value'), var.get(u'globalKeywords'))) or var.get(u'token')))
                            else:
                                if var.get(u'isNumericValue')(var.get(u'token')):
                                    var.put(u'token', var.get(u'resolveNumericValue')(var.get(u'node').get(u'name'), var.get(u'token')))
                        var.get(u'node').get(u'value').get(u'value').put(var.get(u'i'), var.get(u'token'))
                    finally:
                            (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'node')
    PyJsHoisted_resolveAsProperty_.func_name = u'resolveAsProperty'
    var.put(u'resolveAsProperty', PyJsHoisted_resolveAsProperty_)
    @Js
    def PyJsHoisted_consumeIndex_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'stream'])
        var.get(u'stream').put(u'start', var.get(u'stream').get(u'pos'))
        while (var.get(u'stream').callprop(u'eol').neg() and var.get(u'isNumber')(var.get(u'stream').callprop(u'peekCode'))):
            (var.get(u'stream').put(u'pos',Js(var.get(u'stream').get(u'pos').to_number())+Js(1))-Js(1))
        return (var.get(u'Number')(var.get(u'stream').callprop(u'current')) if PyJsStrictNeq(var.get(u'stream').get(u'start'),var.get(u'stream').get(u'pos')) else var.get(u"null"))
    PyJsHoisted_consumeIndex_.func_name = u'consumeIndex'
    var.put(u'consumeIndex', PyJsHoisted_consumeIndex_)
    @Js
    def PyJsHoisted_resolveNode_(node, registry, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'registry':registry, u'arguments':arguments}, var)
        var.registers([u'node', u'resolve', u'stack', u'registry'])
        var.put(u'stack', var.get(u'Set').create())
        @Js
        def PyJs_anonymous_127_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'snippet', u'node', u'tree', u'childTarget'])
            var.put(u'snippet', var.get(u'registry').callprop(u'resolve', var.get(u'node').get(u'name')))
            if (var.get(u'snippet').neg() or var.get(u'stack').callprop(u'has', var.get(u'snippet'))):
                return var.get('undefined')
            if PyJsStrictEq(var.get(u'snippet').get(u'value').typeof(),Js(u'function')):
                return var.get(u'snippet').callprop(u'value', var.get(u'node'), var.get(u'registry'), var.get(u'resolve'))
            var.put(u'tree', var.get(u'index')(var.get(u'snippet').get(u'value')))
            var.get(u'stack').callprop(u'add', var.get(u'snippet'))
            var.get(u'tree').callprop(u'walk', var.get(u'resolve'))
            var.get(u'stack').callprop(u'delete', var.get(u'snippet'))
            var.put(u'childTarget', var.get(u'findDeepestNode')(var.get(u'tree')))
            var.get(u'merge')(var.get(u'childTarget'), var.get(u'node'))
            while var.get(u'tree').get(u'firstChild'):
                var.get(u'node').get(u'parent').callprop(u'insertBefore', var.get(u'tree').get(u'firstChild'), var.get(u'node'))
            var.get(u'childTarget').get(u'parent').callprop(u'insertBefore', var.get(u'node'), var.get(u'childTarget'))
            var.get(u'childTarget').callprop(u'remove')
        PyJs_anonymous_127_._set_name(u'anonymous')
        var.put(u'resolve', PyJs_anonymous_127_)
        var.get(u'resolve')(var.get(u'node'))
    PyJsHoisted_resolveNode_.func_name = u'resolveNode'
    var.put(u'resolveNode', PyJsHoisted_resolveNode_)
    @Js
    def PyJsHoisted_getFieldsModel_(text, fieldState, this, arguments, var=var):
        var = Scope({u'this':this, u'text':text, u'arguments':arguments, u'fieldState':fieldState}, var)
        var.registers([u'largestIndex', u'text', u'model', u'fieldState'])
        var.put(u'model', (var.get(u'text') if PyJsStrictEq(var.get(u'text',throw=False).typeof(),Js(u'object')) else var.get(u'parse$4')(var.get(u'text'))))
        var.put(u'largestIndex', (-Js(1.0)))
        @Js
        def PyJs_anonymous_185_(field, this, arguments, var=var):
            var = Scope({u'this':this, u'field':field, u'arguments':arguments}, var)
            var.registers([u'field'])
            var.get(u'field').put(u'index', var.get(u'fieldState').get(u'index'), u'+')
            if (var.get(u'field').get(u'index')>var.get(u'largestIndex')):
                var.put(u'largestIndex', var.get(u'field').get(u'index'))
        PyJs_anonymous_185_._set_name(u'anonymous')
        var.get(u'model').get(u'fields').callprop(u'forEach', PyJs_anonymous_185_)
        if PyJsStrictNeq(var.get(u'largestIndex'),(-Js(1.0))):
            var.get(u'fieldState').put(u'index', (var.get(u'largestIndex')+Js(1.0)))
        return var.get(u'model')
    PyJsHoisted_getFieldsModel_.func_name = u'getFieldsModel'
    var.put(u'getFieldsModel', PyJsHoisted_getFieldsModel_)
    @Js
    def PyJsHoisted_findBestMatch_(abbr, items, key, this, arguments, var=var):
        var = Scope({u'this':this, u'items':items, u'abbr':abbr, u'key':key, u'arguments':arguments}, var)
        var.registers([u'matchedItem', u'i', u'items', u'item', u'score', u'abbr', u'key', u'maxScore'])
        if var.get(u'abbr').neg():
            return var.get(u"null")
        var.put(u'matchedItem', var.get(u"null"))
        var.put(u'maxScore', Js(0.0))
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'item', PyJsComma(Js(0.0), Js(None)))
        while (var.get(u'i')<var.get(u'items').get(u'length')):
            try:
                var.put(u'item', var.get(u'items').get(var.get(u'i')))
                var.put(u'score', var.get(u'stringScore')(var.get(u'abbr'), (var.get(u'item').get(var.get(u'key')) if (var.get(u'item') and PyJsStrictEq(var.get(u'item',throw=False).typeof(),Js(u'object'))) else var.get(u'item'))))
                if PyJsStrictEq(var.get(u'score'),Js(1.0)):
                    return var.get(u'item')
                if (var.get(u'score')>var.get(u'maxScore')):
                    var.put(u'maxScore', var.get(u'score'))
                    var.put(u'matchedItem', var.get(u'item'))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'matchedItem')
    PyJsHoisted_findBestMatch_.func_name = u'findBestMatch'
    var.put(u'findBestMatch', PyJsHoisted_findBestMatch_)
    @Js
    def PyJsHoisted_isIdent_(code, this, arguments, var=var):
        var = Scope({u'this':this, u'code':code, u'arguments':arguments}, var)
        var.registers([u'code'])
        return var.get(u'isAlphaWord')(var.get(u'code'))
    PyJsHoisted_isIdent_.func_name = u'isIdent'
    var.put(u'isIdent', PyJsHoisted_isIdent_)
    @Js
    def PyJsHoistedNonPyName(node, profile, this, arguments, var=var):
        var = Scope({u'node':node, u'profile':profile, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'profile', u'indent'])
        if ((var.get(u'node').get(u'value')!=var.get(u"null")) and var.get(u'reNl$1').callprop(u'test', var.get(u'node').get(u'value'))):
            var.put(u'indent', var.get(u'profile').callprop(u'indent', Js(1.0)))
            @Js
            def PyJs_anonymous_223_(line, i, this, arguments, var=var):
                var = Scope({u'i':i, u'this':this, u'line':line, u'arguments':arguments}, var)
                var.registers([u'i', u'line'])
                return ((((Js(u'')+var.get(u'indent'))+(Js(u' ') if var.get(u'i') else Js(u'|')))+Js(u' '))+var.get(u'line'))
            PyJs_anonymous_223_._set_name(u'anonymous')
            return var.get(u'splitByLines')(var.get(u'node').get(u'value')).callprop(u'map', PyJs_anonymous_223_).callprop(u'join', Js(u'\n'))
        return var.get(u'node').get(u'value')
    PyJsHoistedNonPyName.func_name = u'formatNodeValue$1'
    var.put(u'formatNodeValue$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(node, profile, this, arguments, var=var):
        var = Scope({u'node':node, u'profile':profile, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'profile', u'indent'])
        if ((var.get(u'node').get(u'value')!=var.get(u"null")) and var.get(u'reNl$2').callprop(u'test', var.get(u'node').get(u'value'))):
            var.put(u'indent', var.get(u'profile').callprop(u'indent', Js(1.0)))
            @Js
            def PyJs_anonymous_230_(line, this, arguments, var=var):
                var = Scope({u'this':this, u'line':line, u'arguments':arguments}, var)
                var.registers([u'line'])
                return ((var.get(u'indent')+Js(u'| '))+var.get(u'line'))
            PyJs_anonymous_230_._set_name(u'anonymous')
            return var.get(u'splitByLines')(var.get(u'node').get(u'value')).callprop(u'map', PyJs_anonymous_230_).callprop(u'join', Js(u'\n'))
        return var.get(u'node').get(u'value')
    PyJsHoistedNonPyName.func_name = u'formatNodeValue$2'
    var.put(u'formatNodeValue$2', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_mergeAttributes_(PyJsArg_66726f6d_, to, this, arguments, var=var):
        var = Scope({u'this':this, u'to':to, u'from':PyJsArg_66726f6d_, u'arguments':arguments}, var)
        var.registers([u'a', u'from', u'attr', u'i', u'i$2', u'i$1', u'to', u'attrs', u'attrMap', u'newAttrs'])
        var.get(u'mergeClassNames')(var.get(u'from'), var.get(u'to'))
        var.put(u'attrMap', var.get(u'Map').create())
        var.put(u'attrs', var.get(u'from').get(u'attributes'))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'attrs').get(u'length')):
            try:
                var.get(u'attrMap').callprop(u'set', var.get(u'attrs').get(var.get(u'i')).get(u'name'), var.get(u'attrs').get(var.get(u'i')).callprop(u'clone'))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        var.put(u'attrs', var.get(u'to').get(u'attributes').callprop(u'slice'))
        #for JS loop
        var.put(u'i$1', Js(0.0))
        var.put(u'attr', PyJsComma(Js(0.0), Js(None)))
        var.put(u'a', PyJsComma(Js(0.0), Js(None)))
        while (var.get(u'i$1')<var.get(u'attrs').get(u'length')):
            try:
                var.put(u'attr', var.get(u'attrs').get(var.get(u'i$1')))
                if var.get(u'attrMap').callprop(u'has', var.get(u'attr').get(u'name')):
                    var.put(u'a', var.get(u'attrMap').callprop(u'get', var.get(u'attr').get(u'name')))
                    var.get(u'a').put(u'value', var.get(u'attr').get(u'value'))
                else:
                    var.get(u'attrMap').callprop(u'set', var.get(u'attr').get(u'name'), var.get(u'attr'))
                var.get(u'to').callprop(u'removeAttribute', var.get(u'attr'))
            finally:
                    (var.put(u'i$1',Js(var.get(u'i$1').to_number())+Js(1))-Js(1))
        var.put(u'newAttrs', var.get(u'Array').callprop(u'from', var.get(u'attrMap').callprop(u'values')))
        #for JS loop
        var.put(u'i$2', Js(0.0))
        while (var.get(u'i$2')<var.get(u'newAttrs').get(u'length')):
            try:
                var.get(u'to').callprop(u'setAttribute', var.get(u'newAttrs').get(var.get(u'i$2')))
            finally:
                    (var.put(u'i$2',Js(var.get(u'i$2').to_number())+Js(1))-Js(1))
        return var.get(u'to')
    PyJsHoisted_mergeAttributes_.func_name = u'mergeAttributes'
    var.put(u'mergeAttributes', PyJsHoisted_mergeAttributes_)
    @Js
    def PyJsHoisted_toShortHex_(num, this, arguments, var=var):
        var = Scope({u'this':this, u'num':num, u'arguments':arguments}, var)
        var.registers([u'num'])
        return (var.get(u'num')>>Js(4.0)).callprop(u'toString', Js(16.0))
    PyJsHoisted_toShortHex_.func_name = u'toShortHex'
    var.put(u'toShortHex', PyJsHoisted_toShortHex_)
    @Js
    def PyJsHoisted_isShortHex_(hex, this, arguments, var=var):
        var = Scope({u'this':this, u'hex':hex, u'arguments':arguments}, var)
        var.registers([u'hex'])
        return (var.get(u'hex')%Js(17.0)).neg()
    PyJsHoisted_isShortHex_.func_name = u'isShortHex'
    var.put(u'isShortHex', PyJsHoisted_isShortHex_)
    @Js
    def PyJsHoisted_consumeArgumentList_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'code', u'arg', u'argsList', u'stream', u'level'])
        if var.get(u'stream').callprop(u'eat', var.get(u'LBRACE')).neg():
            return var.get(u"null")
        var.put(u'level', Js(1.0))
        var.put(u'argsList', Js([]))
        while var.get(u'stream').callprop(u'eol').neg():
            if var.put(u'arg', var.get(u'consumeArgument')(var.get(u'stream'))):
                var.get(u'argsList').callprop(u'push', var.get(u'arg'))
            else:
                var.get(u'eatSpace')(var.get(u'stream'))
                if var.get(u'stream').callprop(u'eat', var.get(u'RBRACE')):
                    break
                if var.get(u'stream').callprop(u'eat', var.get(u'COMMA')).neg():
                    PyJsTempException = JsToPyException(var.get(u'stream').callprop(u'error', Js(u'Expected , or )')))
                    raise PyJsTempException
        return var.get(u'argsList')
    PyJsHoisted_consumeArgumentList_.func_name = u'consumeArgumentList'
    var.put(u'consumeArgumentList', PyJsHoisted_consumeArgumentList_)
    @Js
    def PyJsHoisted_createBlockLookup_(tree, this, arguments, var=var):
        var = Scope({u'this':this, u'tree':tree, u'arguments':arguments}, var)
        var.registers([u'tree', u'lookup'])
        var.put(u'lookup', var.get(u'Map').create())
        @Js
        def PyJs_anonymous_151_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node', u'classNames'])
            var.put(u'classNames', var.get(u'node').get(u'classList'))
            if var.get(u'classNames').get(u'length'):
                var.get(u'lookup').callprop(u'set', var.get(u'node'), ((var.get(u'find')(var.get(u'classNames'), var.get(u'blockCandidates1')) or var.get(u'find')(var.get(u'classNames'), var.get(u'blockCandidates2'))) or var.get(u'lookup').callprop(u'get', var.get(u'node').get(u'parent'))))
        PyJs_anonymous_151_._set_name(u'anonymous')
        var.get(u'tree').callprop(u'walk', PyJs_anonymous_151_)
        return var.get(u'lookup')
    PyJsHoisted_createBlockLookup_.func_name = u'createBlockLookup'
    var.put(u'createBlockLookup', PyJsHoisted_createBlockLookup_)
    @Js
    def PyJsHoisted_isInlineElement_(node, profile, this, arguments, var=var):
        var = Scope({u'node':node, u'profile':profile, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'profile'])
        return (var.get(u'node') and var.get(u'profile').callprop(u'isInline', var.get(u'node')))
    PyJsHoisted_isInlineElement_.func_name = u'isInlineElement'
    var.put(u'isInlineElement', PyJsHoisted_isInlineElement_)
    @Js
    def PyJsHoisted_uniqueClass_(item, i, arr, this, arguments, var=var):
        var = Scope({u'i':i, u'item':item, u'arr':arr, u'this':this, u'arguments':arguments}, var)
        var.registers([u'i', u'item', u'arr'])
        return (var.get(u'item') and PyJsStrictEq(var.get(u'arr').callprop(u'indexOf', var.get(u'item')),var.get(u'i')))
    PyJsHoisted_uniqueClass_.func_name = u'uniqueClass'
    var.put(u'uniqueClass', PyJsHoisted_uniqueClass_)
    @Js
    def PyJsHoisted_eatNumber_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'start', u'stream', u'code', u'negative', u'hadDot'])
        var.put(u'start', var.get(u'stream').get(u'pos'))
        var.put(u'negative', var.get(u'stream').callprop(u'eat', var.get(u'DASH$1')))
        var.put(u'hadDot', Js(False))
        while var.get(u'stream').callprop(u'eol').neg():
            var.put(u'code', var.get(u'stream').callprop(u'peekCode'))
            if (var.get(u'hadDot') if PyJsStrictEq(var.get(u'code'),var.get(u'DOT$1')) else var.get(u'isNumber$1')(var.get(u'code')).neg()):
                break
            if PyJsStrictEq(var.get(u'code'),var.get(u'DOT$1')):
                var.put(u'hadDot', var.get(u'true'))
            (var.get(u'stream').put(u'pos',Js(var.get(u'stream').get(u'pos').to_number())+Js(1))-Js(1))
        if (var.get(u'negative') and PyJsStrictEq((var.get(u'stream').get(u'pos')-var.get(u'start')),Js(1.0))):
            var.get(u'stream').put(u'pos', var.get(u'start'))
        return (var.get(u'start')<var.get(u'stream').get(u'pos'))
    PyJsHoisted_eatNumber_.func_name = u'eatNumber'
    var.put(u'eatNumber', PyJsHoisted_eatNumber_)
    Js(u'use strict')
    @Js
    def PyJs_anonymous_2_(index, placeholder, this, arguments, var=var):
        var = Scope({u'this':this, u'index':index, u'placeholder':placeholder, u'arguments':arguments}, var)
        var.registers([u'index', u'placeholder'])
        return (var.get(u'placeholder') or Js(u''))
    PyJs_anonymous_2_._set_name(u'anonymous')
    PyJs_Object_1_ = Js({u'indent':Js(u'\t'),u'tagCase':Js(u''),u'attributeCase':Js(u''),u'attributeQuotes':Js(u'double'),u'format':var.get(u'true'),u'formatSkip':Js([Js(u'html')]),u'formatForce':Js([Js(u'body')]),u'inlineBreak':Js(3.0),u'compactBooleanAttributes':Js(False),u'booleanAttributes':Js([Js(u'contenteditable'), Js(u'seamless'), Js(u'async'), Js(u'autofocus'), Js(u'autoplay'), Js(u'checked'), Js(u'controls'), Js(u'defer'), Js(u'disabled'), Js(u'formnovalidate'), Js(u'hidden'), Js(u'ismap'), Js(u'loop'), Js(u'multiple'), Js(u'muted'), Js(u'novalidate'), Js(u'readonly'), Js(u'required'), Js(u'reversed'), Js(u'selected'), Js(u'typemustmatch')]),u'selfClosingStyle':Js(u'html'),u'inlineElements':Js([Js(u'a'), Js(u'abbr'), Js(u'acronym'), Js(u'applet'), Js(u'b'), Js(u'basefont'), Js(u'bdo'), Js(u'big'), Js(u'br'), Js(u'button'), Js(u'cite'), Js(u'code'), Js(u'del'), Js(u'dfn'), Js(u'em'), Js(u'font'), Js(u'i'), Js(u'iframe'), Js(u'img'), Js(u'input'), Js(u'ins'), Js(u'kbd'), Js(u'label'), Js(u'map'), Js(u'object'), Js(u'q'), Js(u's'), Js(u'samp'), Js(u'select'), Js(u'small'), Js(u'span'), Js(u'strike'), Js(u'strong'), Js(u'sub'), Js(u'sup'), Js(u'textarea'), Js(u'tt'), Js(u'u'), Js(u'var')]),u'field':PyJs_anonymous_2_})
    var.put(u'defaultOptions$1', PyJs_Object_1_)
    @Js
    def PyJs_Profile_3_(options, this, arguments, var=var):
        var = Scope({u'this':this, u'Profile':PyJs_Profile_3_, u'options':options, u'arguments':arguments}, var)
        var.registers([u'options'])
        PyJs_Object_4_ = Js({})
        var.get(u"this").put(u'options', var.get(u'Object').callprop(u'assign', PyJs_Object_4_, var.get(u'defaultOptions$1'), var.get(u'options')))
        var.get(u"this").put(u'quoteChar', (Js(u"'") if PyJsStrictEq(var.get(u"this").get(u'options').get(u'attributeQuotes'),Js(u'single')) else Js(u'"')))
    PyJs_Profile_3_._set_name(u'Profile')
    var.put(u'Profile', PyJs_Profile_3_)
    @Js
    def PyJs_get_5_(name, this, arguments, var=var):
        var = Scope({u'this':this, u'get':PyJs_get_5_, u'name':name, u'arguments':arguments}, var)
        var.registers([u'name'])
        return var.get(u"this").get(u'options').get(var.get(u'name'))
    PyJs_get_5_._set_name(u'get')
    var.get(u'Profile').get(u'prototype').put(u'get', PyJs_get_5_)
    @Js
    def PyJs_quote_6_(str, this, arguments, var=var):
        var = Scope({u'this':this, u'quote':PyJs_quote_6_, u'arguments':arguments, u'str':str}, var)
        var.registers([u'str'])
        return (((Js(u'')+var.get(u"this").get(u'quoteChar'))+(var.get(u'str') if (var.get(u'str')!=var.get(u"null")) else Js(u'')))+var.get(u"this").get(u'quoteChar'))
    PyJs_quote_6_._set_name(u'quote')
    var.get(u'Profile').get(u'prototype').put(u'quote', PyJs_quote_6_)
    @Js
    def PyJs_name_7_(PyJsArg_6e616d652431_, this, arguments, var=var):
        var = Scope({u'this':this, u'name$1':PyJsArg_6e616d652431_, u'arguments':arguments, u'name':PyJs_name_7_}, var)
        var.registers([u'name$1'])
        return var.get(u'strcase')(var.get(u'name$1'), var.get(u"this").get(u'options').get(u'tagCase'))
    PyJs_name_7_._set_name(u'name')
    var.get(u'Profile').get(u'prototype').put(u'name', PyJs_name_7_)
    @Js
    def PyJs_attribute_8_(attr, this, arguments, var=var):
        var = Scope({u'this':this, u'attribute':PyJs_attribute_8_, u'attr':attr, u'arguments':arguments}, var)
        var.registers([u'attr'])
        return var.get(u'strcase')(var.get(u'attr'), var.get(u"this").get(u'options').get(u'attributeCase'))
    PyJs_attribute_8_._set_name(u'attribute')
    var.get(u'Profile').get(u'prototype').put(u'attribute', PyJs_attribute_8_)
    @Js
    def PyJs_isBooleanAttribute_9_(attr, this, arguments, var=var):
        var = Scope({u'this':this, u'attr':attr, u'isBooleanAttribute':PyJs_isBooleanAttribute_9_, u'arguments':arguments}, var)
        var.registers([u'attr'])
        return (var.get(u'attr').get(u'options').get(u'boolean') or PyJsStrictNeq(var.get(u"this").callprop(u'get', Js(u'booleanAttributes')).callprop(u'indexOf', (var.get(u'attr').get(u'name') or Js(u'')).callprop(u'toLowerCase')),(-Js(1.0))))
    PyJs_isBooleanAttribute_9_._set_name(u'isBooleanAttribute')
    var.get(u'Profile').get(u'prototype').put(u'isBooleanAttribute', PyJs_isBooleanAttribute_9_)
    @Js
    def PyJs_selfClose_10_(this, arguments, var=var):
        var = Scope({u'this':this, u'selfClose':PyJs_selfClose_10_, u'arguments':arguments}, var)
        var.registers([])
        while 1:
            SWITCHED = False
            CONDITION = (var.get(u"this").get(u'options').get(u'selfClosingStyle'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'xhtml')):
                SWITCHED = True
                return Js(u' /')
            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'xml')):
                SWITCHED = True
                return Js(u'/')
            if True:
                SWITCHED = True
                return Js(u'')
            SWITCHED = True
            break
    PyJs_selfClose_10_._set_name(u'selfClose')
    var.get(u'Profile').get(u'prototype').put(u'selfClose', PyJs_selfClose_10_)
    @Js
    def PyJs_indent_11_(level, this, arguments, var=var):
        var = Scope({u'this':this, u'indent':PyJs_indent_11_, u'arguments':arguments, u'level':level}, var)
        var.registers([u'output', u'level', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        var.put(u'level', (var.get(u'level') or Js(0.0)))
        var.put(u'output', Js(u''))
        while (var.put(u'level',Js(var.get(u'level').to_number())-Js(1))+Js(1)):
            var.put(u'output', var.get(u'this$1').get(u'options').get(u'indent'), u'+')
        return var.get(u'output')
    PyJs_indent_11_._set_name(u'indent')
    var.get(u'Profile').get(u'prototype').put(u'indent', PyJs_indent_11_)
    @Js
    def PyJs_isInline_12_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'isInline':PyJs_isInline_12_}, var)
        var.registers([u'node'])
        if PyJsStrictEq(var.get(u'node',throw=False).typeof(),Js(u'string')):
            return PyJsStrictNeq(var.get(u"this").callprop(u'get', Js(u'inlineElements')).callprop(u'indexOf', var.get(u'node').callprop(u'toLowerCase')),(-Js(1.0)))
        return (var.get(u"this").callprop(u'isInline', var.get(u'node').get(u'name')) if (var.get(u'node').get(u'name')!=var.get(u"null")) else var.get(u'node').get(u'isTextOnly'))
    PyJs_isInline_12_._set_name(u'isInline')
    var.get(u'Profile').get(u'prototype').put(u'isInline', PyJs_isInline_12_)
    @Js
    def PyJs_field_13_(index, placeholder, this, arguments, var=var):
        var = Scope({u'this':this, u'index':index, u'placeholder':placeholder, u'arguments':arguments, u'field':PyJs_field_13_}, var)
        var.registers([u'index', u'placeholder'])
        return var.get(u"this").get(u'options').callprop(u'field', var.get(u'index'), var.get(u'placeholder'))
    PyJs_field_13_._set_name(u'field')
    var.get(u'Profile').get(u'prototype').put(u'field', PyJs_field_13_)
    pass
    @Js
    def PyJs_Snippet_14_(key, value, this, arguments, var=var):
        var = Scope({u'this':this, u'Snippet':PyJs_Snippet_14_, u'value':value, u'key':key, u'arguments':arguments}, var)
        var.registers([u'value', u'key'])
        var.get(u"this").put(u'key', var.get(u'key'))
        var.get(u"this").put(u'value', var.get(u'value'))
    PyJs_Snippet_14_._set_name(u'Snippet')
    var.put(u'Snippet', PyJs_Snippet_14_)
    @Js
    def PyJs_SnippetsStorage_15_(data, this, arguments, var=var):
        var = Scope({u'this':this, u'SnippetsStorage':PyJs_SnippetsStorage_15_, u'data':data, u'arguments':arguments}, var)
        var.registers([u'data'])
        var.get(u"this").put(u'_string', var.get(u'Map').create())
        var.get(u"this").put(u'_regexp', var.get(u'Map').create())
        var.get(u"this").put(u'_disabled', Js(False))
        var.get(u"this").callprop(u'load', var.get(u'data'))
    PyJs_SnippetsStorage_15_._set_name(u'SnippetsStorage')
    var.put(u'SnippetsStorage', PyJs_SnippetsStorage_15_)
    PyJs_Object_17_ = Js({})
    PyJs_Object_16_ = Js({u'disabled':PyJs_Object_17_})
    var.put(u'prototypeAccessors', PyJs_Object_16_)
    @Js
    def PyJs_anonymous_18_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'_disabled')
    PyJs_anonymous_18_._set_name(u'anonymous')
    var.get(u'prototypeAccessors').get(u'disabled').put(u'get', PyJs_anonymous_18_)
    @Js
    def PyJs_disable_19_(this, arguments, var=var):
        var = Scope({u'this':this, u'disable':PyJs_disable_19_, u'arguments':arguments}, var)
        var.registers([])
        var.get(u"this").put(u'_disabled', var.get(u'true'))
    PyJs_disable_19_._set_name(u'disable')
    var.get(u'SnippetsStorage').get(u'prototype').put(u'disable', PyJs_disable_19_)
    @Js
    def PyJs_enable_20_(this, arguments, var=var):
        var = Scope({u'this':this, u'enable':PyJs_enable_20_, u'arguments':arguments}, var)
        var.registers([])
        var.get(u"this").put(u'_disabled', Js(False))
    PyJs_enable_20_._set_name(u'enable')
    var.get(u'SnippetsStorage').get(u'prototype').put(u'enable', PyJs_enable_20_)
    @Js
    def PyJs_set_21_(key, value, this, arguments, var=var):
        var = Scope({u'this':this, u'set':PyJs_set_21_, u'value':value, u'key':key, u'arguments':arguments}, var)
        var.registers([u'value', u'key', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        if PyJsStrictEq(var.get(u'key',throw=False).typeof(),Js(u'string')):
            @Js
            def PyJs_anonymous_22_(k, this, arguments, var=var):
                var = Scope({u'this':this, u'k':k, u'arguments':arguments}, var)
                var.registers([u'k'])
                return var.get(u'this$1').get(u'_string').callprop(u'set', var.get(u'k'), var.get(u'Snippet').create(var.get(u'k'), var.get(u'value')))
            PyJs_anonymous_22_._set_name(u'anonymous')
            var.get(u'key').callprop(u'split', Js(u'|')).callprop(u'forEach', PyJs_anonymous_22_)
        else:
            if var.get(u'key').instanceof(var.get(u'RegExp')):
                var.get(u"this").get(u'_regexp').callprop(u'set', var.get(u'key'), var.get(u'Snippet').create(var.get(u'key'), var.get(u'value')))
            else:
                PyJsTempException = JsToPyException(var.get(u'Error').create((Js(u'Unknow snippet key: ')+var.get(u'key'))))
                raise PyJsTempException
        return var.get(u"this")
    PyJs_set_21_._set_name(u'set')
    var.get(u'SnippetsStorage').get(u'prototype').put(u'set', PyJs_set_21_)
    @Js
    def PyJs_get_23_(key, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'key':key, u'get':PyJs_get_23_}, var)
        var.registers([u'keys', u'i', u'il', u'key', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        if var.get(u"this").get(u'disabled'):
            return var.get(u'undefined')
        if var.get(u"this").get(u'_string').callprop(u'has', var.get(u'key')):
            return var.get(u"this").get(u'_string').callprop(u'get', var.get(u'key'))
        var.put(u'keys', var.get(u'Array').callprop(u'from', var.get(u"this").get(u'_regexp').callprop(u'keys')))
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'il', var.get(u'keys').get(u'length'))
        while (var.get(u'i')<var.get(u'il')):
            try:
                if var.get(u'keys').get(var.get(u'i')).callprop(u'test', var.get(u'key')):
                    return var.get(u'this$1').get(u'_regexp').callprop(u'get', var.get(u'keys').get(var.get(u'i')))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
    PyJs_get_23_._set_name(u'get')
    var.get(u'SnippetsStorage').get(u'prototype').put(u'get', PyJs_get_23_)
    @Js
    def PyJs_load_24_(data, this, arguments, var=var):
        var = Scope({u'this':this, u'load':PyJs_load_24_, u'data':data, u'arguments':arguments}, var)
        var.registers([u'data', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        var.get(u"this").callprop(u'reset')
        if var.get(u'data').instanceof(var.get(u'Map')):
            @Js
            def PyJs_anonymous_25_(value, key, this, arguments, var=var):
                var = Scope({u'this':this, u'key':key, u'value':value, u'arguments':arguments}, var)
                var.registers([u'key', u'value'])
                return var.get(u'this$1').callprop(u'set', var.get(u'key'), var.get(u'value'))
            PyJs_anonymous_25_._set_name(u'anonymous')
            var.get(u'data').callprop(u'forEach', PyJs_anonymous_25_)
        else:
            if (var.get(u'data') and PyJsStrictEq(var.get(u'data',throw=False).typeof(),Js(u'object'))):
                @Js
                def PyJs_anonymous_26_(key, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'key':key}, var)
                    var.registers([u'key'])
                    return var.get(u'this$1').callprop(u'set', var.get(u'key'), var.get(u'data').get(var.get(u'key')))
                PyJs_anonymous_26_._set_name(u'anonymous')
                var.get(u'Object').callprop(u'keys', var.get(u'data')).callprop(u'forEach', PyJs_anonymous_26_)
    PyJs_load_24_._set_name(u'load')
    var.get(u'SnippetsStorage').get(u'prototype').put(u'load', PyJs_load_24_)
    @Js
    def PyJs_reset_27_(this, arguments, var=var):
        var = Scope({u'this':this, u'reset':PyJs_reset_27_, u'arguments':arguments}, var)
        var.registers([])
        var.get(u"this").get(u'_string').callprop(u'clear')
        var.get(u"this").get(u'_regexp').callprop(u'clear')
    PyJs_reset_27_._set_name(u'reset')
    var.get(u'SnippetsStorage').get(u'prototype').put(u'reset', PyJs_reset_27_)
    @Js
    def PyJs_values_28_(this, arguments, var=var):
        var = Scope({u'this':this, u'values':PyJs_values_28_, u'arguments':arguments}, var)
        var.registers([u'regexp', u'string'])
        if var.get(u"this").get(u'disabled'):
            return Js([])
        var.put(u'string', var.get(u'Array').callprop(u'from', var.get(u"this").get(u'_string').callprop(u'values')))
        var.put(u'regexp', var.get(u'Array').callprop(u'from', var.get(u"this").get(u'_regexp').callprop(u'values')))
        return var.get(u'string').callprop(u'concat', var.get(u'regexp'))
    PyJs_values_28_._set_name(u'values')
    var.get(u'SnippetsStorage').get(u'prototype').put(u'values', PyJs_values_28_)
    var.get(u'Object').callprop(u'defineProperties', var.get(u'SnippetsStorage').get(u'prototype'), var.get(u'prototypeAccessors'))
    @Js
    def PyJs_SnippetsRegistry_29_(data, this, arguments, var=var):
        var = Scope({u'this':this, u'SnippetsRegistry':PyJs_SnippetsRegistry_29_, u'data':data, u'arguments':arguments}, var)
        var.registers([u'data', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        var.get(u"this").put(u'_registry', Js([]))
        if var.get(u'Array').callprop(u'isArray', var.get(u'data')):
            @Js
            def PyJs_anonymous_30_(snippets, level, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'snippets':snippets, u'level':level}, var)
                var.registers([u'snippets', u'level'])
                return var.get(u'this$1').callprop(u'add', var.get(u'level'), var.get(u'snippets'))
            PyJs_anonymous_30_._set_name(u'anonymous')
            var.get(u'data').callprop(u'forEach', PyJs_anonymous_30_)
        else:
            if PyJsStrictEq(var.get(u'data',throw=False).typeof(),Js(u'object')):
                var.get(u"this").callprop(u'add', var.get(u'data'))
    PyJs_SnippetsRegistry_29_._set_name(u'SnippetsRegistry')
    var.put(u'SnippetsRegistry', PyJs_SnippetsRegistry_29_)
    @Js
    def PyJs_get_31_(level, this, arguments, var=var):
        var = Scope({u'this':this, u'get':PyJs_get_31_, u'arguments':arguments, u'level':level}, var)
        var.registers([u'i', u'item', u'level', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u"this").get(u'_registry').get(u'length')):
            try:
                var.put(u'item', var.get(u'this$1').get(u'_registry').get(var.get(u'i')))
                if PyJsStrictEq(var.get(u'item').get(u'level'),var.get(u'level')):
                    return var.get(u'item').get(u'store')
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
    PyJs_get_31_._set_name(u'get')
    var.get(u'SnippetsRegistry').get(u'prototype').put(u'get', PyJs_get_31_)
    @Js
    def PyJs_add_32_(level, snippets, this, arguments, var=var):
        var = Scope({u'this':this, u'add':PyJs_add_32_, u'arguments':arguments, u'snippets':snippets, u'level':level}, var)
        var.registers([u'snippets', u'store', u'level'])
        if ((var.get(u'level')!=var.get(u"null")) and PyJsStrictEq(var.get(u'level',throw=False).typeof(),Js(u'object'))):
            var.put(u'snippets', var.get(u'level'))
            var.put(u'level', Js(0.0))
        var.put(u'store', var.get(u'SnippetsStorage').create(var.get(u'snippets')))
        var.get(u"this").callprop(u'remove', var.get(u'level'))
        PyJs_Object_33_ = Js({u'level':var.get(u'level'),u'store':var.get(u'store')})
        var.get(u"this").get(u'_registry').callprop(u'push', PyJs_Object_33_)
        @Js
        def PyJs_anonymous_34_(a, b, this, arguments, var=var):
            var = Scope({u'a':a, u'this':this, u'b':b, u'arguments':arguments}, var)
            var.registers([u'a', u'b'])
            return (var.get(u'b').get(u'level')-var.get(u'a').get(u'level'))
        PyJs_anonymous_34_._set_name(u'anonymous')
        var.get(u"this").get(u'_registry').callprop(u'sort', PyJs_anonymous_34_)
        return var.get(u'store')
    PyJs_add_32_._set_name(u'add')
    var.get(u'SnippetsRegistry').get(u'prototype').put(u'add', PyJs_add_32_)
    @Js
    def PyJs_remove_35_(data, this, arguments, var=var):
        var = Scope({u'this':this, u'data':data, u'arguments':arguments, u'remove':PyJs_remove_35_}, var)
        var.registers([u'data'])
        @Js
        def PyJs_anonymous_36_(item, this, arguments, var=var):
            var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
            var.registers([u'item'])
            return (PyJsStrictNeq(var.get(u'item').get(u'level'),var.get(u'data')) and PyJsStrictNeq(var.get(u'item').get(u'store'),var.get(u'data')))
        PyJs_anonymous_36_._set_name(u'anonymous')
        var.get(u"this").put(u'_registry', var.get(u"this").get(u'_registry').callprop(u'filter', PyJs_anonymous_36_))
    PyJs_remove_35_._set_name(u'remove')
    var.get(u'SnippetsRegistry').get(u'prototype').put(u'remove', PyJs_remove_35_)
    @Js
    def PyJs_resolve_37_(name, this, arguments, var=var):
        var = Scope({u'this':this, u'resolve':PyJs_resolve_37_, u'name':name, u'arguments':arguments}, var)
        var.registers([u'i', u'snippet', u'name', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u"this").get(u'_registry').get(u'length')):
            try:
                var.put(u'snippet', var.get(u'this$1').get(u'_registry').get(var.get(u'i')).get(u'store').callprop(u'get', var.get(u'name')))
                if var.get(u'snippet'):
                    return var.get(u'snippet')
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
    PyJs_resolve_37_._set_name(u'resolve')
    var.get(u'SnippetsRegistry').get(u'prototype').put(u'resolve', PyJs_resolve_37_)
    @Js
    def PyJs_all_38_(options, this, arguments, var=var):
        var = Scope({u'this':this, u'all':PyJs_all_38_, u'options':options, u'arguments':arguments}, var)
        var.registers([u'fillResult', u'result', u'options'])
        PyJs_Object_39_ = Js({})
        var.put(u'options', (var.get(u'options') or PyJs_Object_39_))
        var.put(u'result', var.get(u'Map').create())
        @Js
        def PyJs_anonymous_40_(snippet, this, arguments, var=var):
            var = Scope({u'snippet':snippet, u'this':this, u'arguments':arguments}, var)
            var.registers([u'snippet', u'type'])
            var.put(u'type', (Js(u'regexp') if var.get(u'snippet').get(u'key').instanceof(var.get(u'RegExp')) else Js(u'string')))
            if ((var.get(u'options').get(u'type').neg() or PyJsStrictEq(var.get(u'options').get(u'type'),var.get(u'type'))) and var.get(u'result').callprop(u'has', var.get(u'snippet').get(u'key')).neg()):
                var.get(u'result').callprop(u'set', var.get(u'snippet').get(u'key'), var.get(u'snippet'))
        PyJs_anonymous_40_._set_name(u'anonymous')
        var.put(u'fillResult', PyJs_anonymous_40_)
        @Js
        def PyJs_anonymous_41_(item, this, arguments, var=var):
            var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
            var.registers([u'item'])
            var.get(u'item').get(u'store').callprop(u'values').callprop(u'forEach', var.get(u'fillResult'))
        PyJs_anonymous_41_._set_name(u'anonymous')
        var.get(u"this").get(u'_registry').callprop(u'forEach', PyJs_anonymous_41_)
        return var.get(u'Array').callprop(u'from', var.get(u'result').callprop(u'values'))
    PyJs_all_38_._set_name(u'all')
    var.get(u'SnippetsRegistry').get(u'prototype').put(u'all', PyJs_all_38_)
    @Js
    def PyJs_clear_42_(this, arguments, var=var):
        var = Scope({u'this':this, u'clear':PyJs_clear_42_, u'arguments':arguments}, var)
        var.registers([])
        var.get(u"this").get(u'_registry').put(u'length', Js(0.0))
    PyJs_clear_42_._set_name(u'clear')
    var.get(u'SnippetsRegistry').get(u'prototype').put(u'clear', PyJs_clear_42_)
    @Js
    def PyJs_Attribute_43_(name, value, options, this, arguments, var=var):
        var = Scope({u'name':name, u'this':this, u'Attribute':PyJs_Attribute_43_, u'value':value, u'arguments':arguments, u'options':options}, var)
        var.registers([u'name', u'value', u'options'])
        var.get(u"this").put(u'name', var.get(u'name'))
        var.get(u"this").put(u'value', (var.get(u'value') if (var.get(u'value')!=var.get(u"null")) else var.get(u"null")))
        PyJs_Object_44_ = Js({})
        var.get(u"this").put(u'options', (var.get(u'options') or PyJs_Object_44_))
    PyJs_Attribute_43_._set_name(u'Attribute')
    var.put(u'Attribute', PyJs_Attribute_43_)
    @Js
    def PyJs_clone_45_(this, arguments, var=var):
        var = Scope({u'this':this, u'clone':PyJs_clone_45_, u'arguments':arguments}, var)
        var.registers([])
        PyJs_Object_46_ = Js({})
        return var.get(u'Attribute').create(var.get(u"this").get(u'name'), var.get(u"this").get(u'value'), var.get(u'Object').callprop(u'assign', PyJs_Object_46_, var.get(u"this").get(u'options')))
    PyJs_clone_45_._set_name(u'clone')
    var.get(u'Attribute').get(u'prototype').put(u'clone', PyJs_clone_45_)
    @Js
    def PyJs_valueOf_47_(this, arguments, var=var):
        var = Scope({u'this':this, u'valueOf':PyJs_valueOf_47_, u'arguments':arguments}, var)
        var.registers([])
        return (((var.get(u"this").get(u'name')+Js(u'="'))+var.get(u"this").get(u'value'))+Js(u'"'))
    PyJs_valueOf_47_._set_name(u'valueOf')
    var.get(u'Attribute').get(u'prototype').put(u'valueOf', PyJs_valueOf_47_)
    @Js
    def PyJs_Node_48_(name, attributes, this, arguments, var=var):
        var = Scope({u'this':this, u'attributes':attributes, u'name':name, u'Node':PyJs_Node_48_, u'arguments':arguments}, var)
        var.registers([u'attributes', u'name', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        var.get(u"this").put(u'name', (var.get(u'name') or var.get(u"null")))
        var.get(u"this").put(u'value', var.get(u"null"))
        var.get(u"this").put(u'repeat', var.get(u"null"))
        var.get(u"this").put(u'selfClosing', Js(False))
        var.get(u"this").put(u'children', Js([]))
        var.get(u"this").put(u'parent', var.get(u"null"))
        var.get(u"this").put(u'next', var.get(u"null"))
        var.get(u"this").put(u'previous', var.get(u"null"))
        var.get(u"this").put(u'_attributes', Js([]))
        if var.get(u'Array').callprop(u'isArray', var.get(u'attributes')):
            @Js
            def PyJs_anonymous_49_(attr, this, arguments, var=var):
                var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
                var.registers([u'attr'])
                return var.get(u'this$1').callprop(u'setAttribute', var.get(u'attr'))
            PyJs_anonymous_49_._set_name(u'anonymous')
            var.get(u'attributes').callprop(u'forEach', PyJs_anonymous_49_)
    PyJs_Node_48_._set_name(u'Node')
    var.put(u'Node', PyJs_Node_48_)
    PyJs_Object_51_ = Js({})
    PyJs_Object_52_ = Js({})
    PyJs_Object_53_ = Js({})
    PyJs_Object_54_ = Js({})
    PyJs_Object_55_ = Js({})
    PyJs_Object_56_ = Js({})
    PyJs_Object_57_ = Js({})
    PyJs_Object_58_ = Js({})
    PyJs_Object_59_ = Js({})
    PyJs_Object_60_ = Js({})
    PyJs_Object_50_ = Js({u'attributes':PyJs_Object_51_,u'attributesMap':PyJs_Object_52_,u'isGroup':PyJs_Object_53_,u'isTextOnly':PyJs_Object_54_,u'firstChild':PyJs_Object_55_,u'lastChild':PyJs_Object_56_,u'childIndex':PyJs_Object_57_,u'nextSibling':PyJs_Object_58_,u'previousSibling':PyJs_Object_59_,u'classList':PyJs_Object_60_})
    var.put(u'prototypeAccessors$1', PyJs_Object_50_)
    @Js
    def PyJs_anonymous_61_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'_attributes')
    PyJs_anonymous_61_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$1').get(u'attributes').put(u'get', PyJs_anonymous_61_)
    @Js
    def PyJs_anonymous_62_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_63_(out, attr, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'attr':attr, u'out':out}, var)
            var.registers([u'attr', u'out'])
            var.get(u'out').put(var.get(u'attr').get(u'name'), (var.get(u'attr').get(u'name') if var.get(u'attr').get(u'options').get(u'boolean') else var.get(u'attr').get(u'value')))
            return var.get(u'out')
        PyJs_anonymous_63_._set_name(u'anonymous')
        PyJs_Object_64_ = Js({})
        return var.get(u"this").get(u'attributes').callprop(u'reduce', PyJs_anonymous_63_, PyJs_Object_64_)
    PyJs_anonymous_62_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$1').get(u'attributesMap').put(u'get', PyJs_anonymous_62_)
    @Js
    def PyJs_anonymous_65_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return ((var.get(u"this").get(u'name').neg() and var.get(u"this").get(u'value').neg()) and var.get(u"this").get(u'_attributes').get(u'length').neg())
    PyJs_anonymous_65_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$1').get(u'isGroup').put(u'get', PyJs_anonymous_65_)
    @Js
    def PyJs_anonymous_66_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return ((var.get(u"this").get(u'name').neg() and var.get(u"this").get(u'value').neg().neg()) and var.get(u"this").get(u'_attributes').get(u'length').neg())
    PyJs_anonymous_66_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$1').get(u'isTextOnly').put(u'get', PyJs_anonymous_66_)
    @Js
    def PyJs_anonymous_67_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'children').get(u'0')
    PyJs_anonymous_67_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$1').get(u'firstChild').put(u'get', PyJs_anonymous_67_)
    @Js
    def PyJs_anonymous_68_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'children').get((var.get(u"this").get(u'children').get(u'length')-Js(1.0)))
    PyJs_anonymous_68_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$1').get(u'lastChild').put(u'get', PyJs_anonymous_68_)
    @Js
    def PyJs_anonymous_69_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return (var.get(u"this").get(u'parent').get(u'children').callprop(u'indexOf', var.get(u"this")) if var.get(u"this").get(u'parent') else (-Js(1.0)))
    PyJs_anonymous_69_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$1').get(u'childIndex').put(u'get', PyJs_anonymous_69_)
    @Js
    def PyJs_anonymous_70_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'next')
    PyJs_anonymous_70_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$1').get(u'nextSibling').put(u'get', PyJs_anonymous_70_)
    @Js
    def PyJs_anonymous_71_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'previous')
    PyJs_anonymous_71_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$1').get(u'previousSibling').put(u'get', PyJs_anonymous_71_)
    @Js
    def PyJs_anonymous_72_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'attr'])
        var.put(u'attr', var.get(u"this").callprop(u'getAttribute', Js(u'class')))
        return (var.get(u'attr').get(u'value').callprop(u'split', JsRegExp(u'/\\s+/g')).callprop(u'filter', var.get(u'uniqueClass')) if (var.get(u'attr') and var.get(u'attr').get(u'value')) else Js([]))
    PyJs_anonymous_72_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$1').get(u'classList').put(u'get', PyJs_anonymous_72_)
    @Js
    def PyJs_create_73_(name, attributes, this, arguments, var=var):
        var = Scope({u'this':this, u'attributes':attributes, u'create':PyJs_create_73_, u'name':name, u'arguments':arguments}, var)
        var.registers([u'attributes', u'name'])
        return var.get(u'Node').create(var.get(u'name'), var.get(u'attributes'))
    PyJs_create_73_._set_name(u'create')
    var.get(u'Node').get(u'prototype').put(u'create', PyJs_create_73_)
    @Js
    def PyJs_setAttribute_74_(name, value, this, arguments, var=var):
        var = Scope({u'this':this, u'setAttribute':PyJs_setAttribute_74_, u'name':name, u'value':value, u'arguments':arguments}, var)
        var.registers([u'curAttr', u'attr', u'value', u'name'])
        var.put(u'attr', var.get(u'createAttribute')(var.get(u'name'), var.get(u'value')))
        var.put(u'curAttr', var.get(u"this").callprop(u'getAttribute', var.get(u'name')))
        if var.get(u'curAttr'):
            var.get(u"this").callprop(u'replaceAttribute', var.get(u'curAttr'), var.get(u'attr'))
        else:
            var.get(u"this").get(u'_attributes').callprop(u'push', var.get(u'attr'))
    PyJs_setAttribute_74_._set_name(u'setAttribute')
    var.get(u'Node').get(u'prototype').put(u'setAttribute', PyJs_setAttribute_74_)
    @Js
    def PyJs_hasAttribute_75_(name, this, arguments, var=var):
        var = Scope({u'this':this, u'hasAttribute':PyJs_hasAttribute_75_, u'name':name, u'arguments':arguments}, var)
        var.registers([u'name'])
        return var.get(u"this").callprop(u'getAttribute', var.get(u'name')).neg().neg()
    PyJs_hasAttribute_75_._set_name(u'hasAttribute')
    var.get(u'Node').get(u'prototype').put(u'hasAttribute', PyJs_hasAttribute_75_)
    @Js
    def PyJs_getAttribute_76_(name, this, arguments, var=var):
        var = Scope({u'this':this, u'getAttribute':PyJs_getAttribute_76_, u'name':name, u'arguments':arguments}, var)
        var.registers([u'i', u'attr', u'name', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        if PyJsStrictEq(var.get(u'name',throw=False).typeof(),Js(u'object')):
            var.put(u'name', var.get(u'name').get(u'name'))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u"this").get(u'_attributes').get(u'length')):
            try:
                var.put(u'attr', var.get(u'this$1').get(u'_attributes').get(var.get(u'i')))
                if PyJsStrictEq(var.get(u'attr').get(u'name'),var.get(u'name')):
                    return var.get(u'attr')
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
    PyJs_getAttribute_76_._set_name(u'getAttribute')
    var.get(u'Node').get(u'prototype').put(u'getAttribute', PyJs_getAttribute_76_)
    @Js
    def PyJs_replaceAttribute_77_(curAttribute, newName, newValue, this, arguments, var=var):
        var = Scope({u'curAttribute':curAttribute, u'newName':newName, u'this':this, u'arguments':arguments, u'replaceAttribute':PyJs_replaceAttribute_77_, u'newValue':newValue}, var)
        var.registers([u'newName', u'ix', u'newValue', u'curAttribute'])
        if PyJsStrictEq(var.get(u'curAttribute',throw=False).typeof(),Js(u'string')):
            var.put(u'curAttribute', var.get(u"this").callprop(u'getAttribute', var.get(u'curAttribute')))
        var.put(u'ix', var.get(u"this").get(u'_attributes').callprop(u'indexOf', var.get(u'curAttribute')))
        if PyJsStrictNeq(var.get(u'ix'),(-Js(1.0))):
            var.get(u"this").get(u'_attributes').callprop(u'splice', var.get(u'ix'), Js(1.0), var.get(u'createAttribute')(var.get(u'newName'), var.get(u'newValue')))
    PyJs_replaceAttribute_77_._set_name(u'replaceAttribute')
    var.get(u'Node').get(u'prototype').put(u'replaceAttribute', PyJs_replaceAttribute_77_)
    @Js
    def PyJs_removeAttribute_78_(attr, this, arguments, var=var):
        var = Scope({u'this':this, u'removeAttribute':PyJs_removeAttribute_78_, u'attr':attr, u'arguments':arguments}, var)
        var.registers([u'ix', u'attr'])
        if PyJsStrictEq(var.get(u'attr',throw=False).typeof(),Js(u'string')):
            var.put(u'attr', var.get(u"this").callprop(u'getAttribute', var.get(u'attr')))
        var.put(u'ix', var.get(u"this").get(u'_attributes').callprop(u'indexOf', var.get(u'attr')))
        if PyJsStrictNeq(var.get(u'ix'),(-Js(1.0))):
            var.get(u"this").get(u'_attributes').callprop(u'splice', var.get(u'ix'), Js(1.0))
    PyJs_removeAttribute_78_._set_name(u'removeAttribute')
    var.get(u'Node').get(u'prototype').put(u'removeAttribute', PyJs_removeAttribute_78_)
    @Js
    def PyJs_clearAttributes_79_(this, arguments, var=var):
        var = Scope({u'this':this, u'clearAttributes':PyJs_clearAttributes_79_, u'arguments':arguments}, var)
        var.registers([])
        var.get(u"this").get(u'_attributes').put(u'length', Js(0.0))
    PyJs_clearAttributes_79_._set_name(u'clearAttributes')
    var.get(u'Node').get(u'prototype').put(u'clearAttributes', PyJs_clearAttributes_79_)
    @Js
    def PyJs_addClass_80_(token, this, arguments, var=var):
        var = Scope({u'this':this, u'token':token, u'arguments':arguments, u'addClass':PyJs_addClass_80_}, var)
        var.registers([u'token'])
        var.put(u'token', var.get(u'normalize')(var.get(u'token')))
        if var.get(u"this").callprop(u'hasAttribute', Js(u'class')).neg():
            var.get(u"this").callprop(u'setAttribute', Js(u'class'), var.get(u'token'))
        else:
            if (var.get(u'token') and var.get(u"this").callprop(u'hasClass', var.get(u'token')).neg()):
                var.get(u"this").callprop(u'setAttribute', Js(u'class'), var.get(u"this").get(u'classList').callprop(u'concat', var.get(u'token')).callprop(u'join', Js(u' ')))
    PyJs_addClass_80_._set_name(u'addClass')
    var.get(u'Node').get(u'prototype').put(u'addClass', PyJs_addClass_80_)
    @Js
    def PyJs_hasClass_81_(token, this, arguments, var=var):
        var = Scope({u'this':this, u'hasClass':PyJs_hasClass_81_, u'token':token, u'arguments':arguments}, var)
        var.registers([u'token'])
        return PyJsStrictNeq(var.get(u"this").get(u'classList').callprop(u'indexOf', var.get(u'normalize')(var.get(u'token'))),(-Js(1.0)))
    PyJs_hasClass_81_._set_name(u'hasClass')
    var.get(u'Node').get(u'prototype').put(u'hasClass', PyJs_hasClass_81_)
    @Js
    def PyJs_removeClass_82_(token, this, arguments, var=var):
        var = Scope({u'this':this, u'token':token, u'removeClass':PyJs_removeClass_82_, u'arguments':arguments}, var)
        var.registers([u'token'])
        var.put(u'token', var.get(u'normalize')(var.get(u'token')))
        if var.get(u"this").callprop(u'hasClass', var.get(u'token')):
            @Js
            def PyJs_anonymous_83_(name, this, arguments, var=var):
                var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
                var.registers([u'name'])
                return PyJsStrictNeq(var.get(u'name'),var.get(u'token'))
            PyJs_anonymous_83_._set_name(u'anonymous')
            var.get(u"this").callprop(u'setAttribute', Js(u'class'), var.get(u"this").get(u'classList').callprop(u'filter', PyJs_anonymous_83_).callprop(u'join', Js(u' ')))
    PyJs_removeClass_82_._set_name(u'removeClass')
    var.get(u'Node').get(u'prototype').put(u'removeClass', PyJs_removeClass_82_)
    @Js
    def PyJs_appendChild_84_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'appendChild':PyJs_appendChild_84_}, var)
        var.registers([u'node'])
        var.get(u"this").callprop(u'insertAt', var.get(u'node'), var.get(u"this").get(u'children').get(u'length'))
    PyJs_appendChild_84_._set_name(u'appendChild')
    var.get(u'Node').get(u'prototype').put(u'appendChild', PyJs_appendChild_84_)
    @Js
    def PyJs_insertBefore_85_(newNode, refNode, this, arguments, var=var):
        var = Scope({u'refNode':refNode, u'newNode':newNode, u'this':this, u'arguments':arguments, u'insertBefore':PyJs_insertBefore_85_}, var)
        var.registers([u'refNode', u'newNode'])
        var.get(u"this").callprop(u'insertAt', var.get(u'newNode'), var.get(u"this").get(u'children').callprop(u'indexOf', var.get(u'refNode')))
    PyJs_insertBefore_85_._set_name(u'insertBefore')
    var.get(u'Node').get(u'prototype').put(u'insertBefore', PyJs_insertBefore_85_)
    @Js
    def PyJs_insertAt_86_(node, pos, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'insertAt':PyJs_insertAt_86_, u'pos':pos, u'arguments':arguments}, var)
        var.registers([u'node', u'prev', u'pos', u'next'])
        if ((var.get(u'pos')<Js(0.0)) or (var.get(u'pos')>var.get(u"this").get(u'children').get(u'length'))):
            PyJsTempException = JsToPyException(var.get(u'Error').create(Js(u'Unable to insert node: position is out of child list range')))
            raise PyJsTempException
        var.put(u'prev', var.get(u"this").get(u'children').get((var.get(u'pos')-Js(1.0))))
        var.put(u'next', var.get(u"this").get(u'children').get(var.get(u'pos')))
        var.get(u'node').callprop(u'remove')
        var.get(u'node').put(u'parent', var.get(u"this"))
        var.get(u"this").get(u'children').callprop(u'splice', var.get(u'pos'), Js(0.0), var.get(u'node'))
        if var.get(u'prev'):
            var.get(u'node').put(u'previous', var.get(u'prev'))
            var.get(u'prev').put(u'next', var.get(u'node'))
        if var.get(u'next'):
            var.get(u'node').put(u'next', var.get(u'next'))
            var.get(u'next').put(u'previous', var.get(u'node'))
    PyJs_insertAt_86_._set_name(u'insertAt')
    var.get(u'Node').get(u'prototype').put(u'insertAt', PyJs_insertAt_86_)
    @Js
    def PyJs_removeChild_87_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'removeChild':PyJs_removeChild_87_}, var)
        var.registers([u'node', u'ix'])
        var.put(u'ix', var.get(u"this").get(u'children').callprop(u'indexOf', var.get(u'node')))
        if PyJsStrictNeq(var.get(u'ix'),(-Js(1.0))):
            var.get(u"this").get(u'children').callprop(u'splice', var.get(u'ix'), Js(1.0))
            if var.get(u'node').get(u'previous'):
                var.get(u'node').get(u'previous').put(u'next', var.get(u'node').get(u'next'))
            if var.get(u'node').get(u'next'):
                var.get(u'node').get(u'next').put(u'previous', var.get(u'node').get(u'previous'))
            var.get(u'node').put(u'parent', var.get(u'node').put(u'next', var.get(u'node').put(u'previous', var.get(u"null"))))
    PyJs_removeChild_87_._set_name(u'removeChild')
    var.get(u'Node').get(u'prototype').put(u'removeChild', PyJs_removeChild_87_)
    @Js
    def PyJs_remove_88_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'remove':PyJs_remove_88_}, var)
        var.registers([])
        if var.get(u"this").get(u'parent'):
            var.get(u"this").get(u'parent').callprop(u'removeChild', var.get(u"this"))
    PyJs_remove_88_._set_name(u'remove')
    var.get(u'Node').get(u'prototype').put(u'remove', PyJs_remove_88_)
    @Js
    def PyJs_clone_89_(deep, this, arguments, var=var):
        var = Scope({u'this':this, u'clone':PyJs_clone_89_, u'arguments':arguments, u'deep':deep}, var)
        var.registers([u'clone', u'deep'])
        var.put(u'clone', var.get(u'Node').create(var.get(u"this").get(u'name')))
        var.get(u'clone').put(u'value', var.get(u"this").get(u'value'))
        var.get(u'clone').put(u'selfClosing', var.get(u"this").get(u'selfClosing'))
        if var.get(u"this").get(u'repeat'):
            PyJs_Object_90_ = Js({})
            var.get(u'clone').put(u'repeat', var.get(u'Object').callprop(u'assign', PyJs_Object_90_, var.get(u"this").get(u'repeat')))
        @Js
        def PyJs_anonymous_91_(attr, this, arguments, var=var):
            var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
            var.registers([u'attr'])
            return var.get(u'clone').callprop(u'setAttribute', var.get(u'attr').callprop(u'clone'))
        PyJs_anonymous_91_._set_name(u'anonymous')
        var.get(u"this").get(u'_attributes').callprop(u'forEach', PyJs_anonymous_91_)
        if var.get(u'deep'):
            @Js
            def PyJs_anonymous_92_(child, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'child':child}, var)
                var.registers([u'child'])
                return var.get(u'clone').callprop(u'appendChild', var.get(u'child').callprop(u'clone', var.get(u'true')))
            PyJs_anonymous_92_._set_name(u'anonymous')
            var.get(u"this").get(u'children').callprop(u'forEach', PyJs_anonymous_92_)
        return var.get(u'clone')
    PyJs_clone_89_._set_name(u'clone')
    var.get(u'Node').get(u'prototype').put(u'clone', PyJs_clone_89_)
    @Js
    def PyJs_walk_93_(fn, _level, this, arguments, var=var):
        var = Scope({u'this':this, u'_level':_level, u'arguments':arguments, u'fn':fn, u'walk':PyJs_walk_93_}, var)
        var.registers([u'_level', u'ctx', u'fn', u'next'])
        var.put(u'_level', (var.get(u'_level') or Js(0.0)))
        var.put(u'ctx', var.get(u"this").get(u'firstChild'))
        while var.get(u'ctx'):
            var.put(u'next', var.get(u'ctx').get(u'next'))
            if (PyJsStrictEq(var.get(u'fn')(var.get(u'ctx'), var.get(u'_level')),Js(False)) or PyJsStrictEq(var.get(u'ctx').callprop(u'walk', var.get(u'fn'), (var.get(u'_level')+Js(1.0))),Js(False))):
                return Js(False)
            var.put(u'ctx', var.get(u'next'))
    PyJs_walk_93_._set_name(u'walk')
    var.get(u'Node').get(u'prototype').put(u'walk', PyJs_walk_93_)
    @Js
    def PyJs_use_94_(fn, this, arguments, var=var):
        var = Scope({u'this':this, u'use':PyJs_use_94_, u'arguments':arguments, u'fn':fn}, var)
        var.registers([u'i', u'arguments$1', u'args', u'fn'])
        var.put(u'arguments$1', var.get(u'arguments'))
        var.put(u'args', Js([var.get(u"this")]))
        #for JS loop
        var.put(u'i', Js(1.0))
        while (var.get(u'i')<var.get(u'arguments').get(u'length')):
            try:
                var.get(u'args').callprop(u'push', var.get(u'arguments$1').get(var.get(u'i')))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        var.get(u'fn').callprop(u'apply', var.get(u"null"), var.get(u'args'))
        return var.get(u"this")
    PyJs_use_94_._set_name(u'use')
    var.get(u'Node').get(u'prototype').put(u'use', PyJs_use_94_)
    @Js
    def PyJs_toString_95_(this, arguments, var=var):
        var = Scope({u'this':this, u'toString':PyJs_toString_95_, u'arguments':arguments}, var)
        var.registers([u'out', u'attrs', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        @Js
        def PyJs_anonymous_96_(attr, this, arguments, var=var):
            var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
            var.registers([u'opt', u'attr', u'out'])
            var.put(u'attr', var.get(u'this$1').callprop(u'getAttribute', var.get(u'attr').get(u'name')))
            var.put(u'opt', var.get(u'attr').get(u'options'))
            var.put(u'out', ((Js(u'')+(Js(u'!') if (var.get(u'opt') and var.get(u'opt').get(u'implied')) else Js(u'')))+(var.get(u'attr').get(u'name') or Js(u''))))
            if (var.get(u'opt') and var.get(u'opt').get(u'boolean')):
                var.put(u'out', Js(u'.'), u'+')
            else:
                if (var.get(u'attr').get(u'value')!=var.get(u"null")):
                    var.put(u'out', ((Js(u'="')+var.get(u'attr').get(u'value'))+Js(u'"')), u'+')
            return var.get(u'out')
        PyJs_anonymous_96_._set_name(u'anonymous')
        var.put(u'attrs', var.get(u"this").get(u'attributes').callprop(u'map', PyJs_anonymous_96_))
        var.put(u'out', (Js(u'')+(var.get(u"this").get(u'name') or Js(u''))))
        if var.get(u'attrs').get(u'length'):
            var.put(u'out', ((Js(u'[')+var.get(u'attrs').callprop(u'join', Js(u' ')))+Js(u']')), u'+')
        if (var.get(u"this").get(u'value')!=var.get(u"null")):
            var.put(u'out', ((Js(u'{')+var.get(u"this").get(u'value'))+Js(u'}')), u'+')
        if var.get(u"this").get(u'selfClosing'):
            var.put(u'out', Js(u'/'), u'+')
        if var.get(u"this").get(u'repeat'):
            var.put(u'out', (Js(u'*')+(var.get(u"this").get(u'repeat').get(u'count') if var.get(u"this").get(u'repeat').get(u'count') else Js(u''))), u'+')
            if (var.get(u"this").get(u'repeat').get(u'value')!=var.get(u"null")):
                var.put(u'out', (Js(u'@')+var.get(u"this").get(u'repeat').get(u'value')), u'+')
        return var.get(u'out')
    PyJs_toString_95_._set_name(u'toString')
    var.get(u'Node').get(u'prototype').put(u'toString', PyJs_toString_95_)
    var.get(u'Object').callprop(u'defineProperties', var.get(u'Node').get(u'prototype'), var.get(u'prototypeAccessors$1'))
    pass
    pass
    pass
    var.put(u'escapeCode', Js(92.0))
    @Js
    def PyJs_StreamReader_97_(string, this, arguments, var=var):
        var = Scope({u'this':this, u'string':string, u'StreamReader':PyJs_StreamReader_97_, u'arguments':arguments}, var)
        var.registers([u'string'])
        var.get(u"this").put(u'pos', var.get(u"this").put(u'start', Js(0.0)))
        var.get(u"this").put(u'string', var.get(u'string'))
        var.get(u"this").put(u'_length', var.get(u'string').get(u'length'))
    PyJs_StreamReader_97_._set_name(u'StreamReader')
    var.put(u'StreamReader', PyJs_StreamReader_97_)
    @Js
    def PyJs_eol_98_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'eol':PyJs_eol_98_}, var)
        var.registers([])
        return (var.get(u"this").get(u'pos')>=var.get(u"this").get(u'_length'))
    PyJs_eol_98_._set_name(u'eol')
    var.get(u'StreamReader').get(u'prototype').put(u'eol', PyJs_eol_98_)
    @Js
    def PyJs_peek_99_(this, arguments, var=var):
        var = Scope({u'this':this, u'peek':PyJs_peek_99_, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'string').callprop(u'charAt', var.get(u"this").get(u'pos'))
    PyJs_peek_99_._set_name(u'peek')
    var.get(u'StreamReader').get(u'prototype').put(u'peek', PyJs_peek_99_)
    @Js
    def PyJs_peekCode_100_(this, arguments, var=var):
        var = Scope({u'this':this, u'peekCode':PyJs_peekCode_100_, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'string').callprop(u'charCodeAt', var.get(u"this").get(u'pos'))
    PyJs_peekCode_100_._set_name(u'peekCode')
    var.get(u'StreamReader').get(u'prototype').put(u'peekCode', PyJs_peekCode_100_)
    @Js
    def PyJs_next_101_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'next':PyJs_next_101_}, var)
        var.registers([])
        if (var.get(u"this").get(u'pos')<var.get(u"this").get(u'_length')):
            return var.get(u"this").get(u'string').callprop(u'charAt', (var.get(u"this").put(u'pos',Js(var.get(u"this").get(u'pos').to_number())+Js(1))-Js(1)))
    PyJs_next_101_._set_name(u'next')
    var.get(u'StreamReader').get(u'prototype').put(u'next', PyJs_next_101_)
    @Js
    def PyJs_nextCode_102_(this, arguments, var=var):
        var = Scope({u'this':this, u'nextCode':PyJs_nextCode_102_, u'arguments':arguments}, var)
        var.registers([])
        if (var.get(u"this").get(u'pos')<var.get(u"this").get(u'_length')):
            return var.get(u"this").get(u'string').callprop(u'charCodeAt', (var.get(u"this").put(u'pos',Js(var.get(u"this").get(u'pos').to_number())+Js(1))-Js(1)))
    PyJs_nextCode_102_._set_name(u'nextCode')
    var.get(u'StreamReader').get(u'prototype').put(u'nextCode', PyJs_nextCode_102_)
    @Js
    def PyJs_eat_103_(match, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'match':match, u'eat':PyJs_eat_103_}, var)
        var.registers([u'ch', u'ok', u'match'])
        pass
        if PyJsStrictEq(var.get(u'match',throw=False).typeof(),Js(u'number')):
            var.put(u'ok', PyJsStrictEq(var.get(u"this").callprop(u'peekCode'),var.get(u'match')))
        else:
            if PyJsStrictEq(var.get(u'match',throw=False).typeof(),Js(u'string')):
                var.put(u'ok', PyJsStrictEq(var.get(u"this").callprop(u'peekCode'),var.get(u'match').callprop(u'charCodeAt', Js(0.0))))
            else:
                var.put(u'ch', var.get(u"this").callprop(u'peek'))
                var.put(u'ok', (var.get(u'ch') and (var.get(u'match').callprop(u'test', var.get(u'ch')) if var.get(u'match').get(u'test') else var.get(u'match')(var.get(u'ch')))))
        if var.get(u'ok'):
            var.get(u"this").put(u'pos',Js(var.get(u"this").get(u'pos').to_number())+Js(1))
        return var.get(u'ok')
    PyJs_eat_103_._set_name(u'eat')
    var.get(u'StreamReader').get(u'prototype').put(u'eat', PyJs_eat_103_)
    @Js
    def PyJs_eatWhile_104_(match, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'match':match, u'eatWhile':PyJs_eatWhile_104_}, var)
        var.registers([u'start', u'match'])
        var.put(u'start', var.get(u"this").get(u'pos'))
        while var.get(u"this").callprop(u'eat', var.get(u'match')):
            pass
        return (var.get(u"this").get(u'pos')>var.get(u'start'))
    PyJs_eatWhile_104_._set_name(u'eatWhile')
    var.get(u'StreamReader').get(u'prototype').put(u'eatWhile', PyJs_eatWhile_104_)
    @Js
    def PyJs_skipTo_105_(ch, this, arguments, var=var):
        var = Scope({u'this':this, u'skipTo':PyJs_skipTo_105_, u'ch':ch, u'arguments':arguments}, var)
        var.registers([u'found', u'ch'])
        var.put(u'found', var.get(u"this").get(u'string').callprop(u'indexOf', var.get(u'ch'), var.get(u"this").get(u'pos')))
        if (var.get(u'found')>(-Js(1.0))):
            var.get(u"this").put(u'pos', var.get(u'found'))
            return var.get(u'true')
    PyJs_skipTo_105_._set_name(u'skipTo')
    var.get(u'StreamReader').get(u'prototype').put(u'skipTo', PyJs_skipTo_105_)
    @Js
    def PyJs_backUp_106_(n, this, arguments, var=var):
        var = Scope({u'this':this, u'backUp':PyJs_backUp_106_, u'arguments':arguments, u'n':n}, var)
        var.registers([u'n'])
        var.get(u"this").put(u'pos', var.get(u'n'), u'-')
    PyJs_backUp_106_._set_name(u'backUp')
    var.get(u'StreamReader').get(u'prototype').put(u'backUp', PyJs_backUp_106_)
    @Js
    def PyJs_current_107_(this, arguments, var=var):
        var = Scope({u'this':this, u'current':PyJs_current_107_, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'string').callprop(u'slice', var.get(u"this").get(u'start'), var.get(u"this").get(u'pos'))
    PyJs_current_107_._set_name(u'current')
    var.get(u'StreamReader').get(u'prototype').put(u'current', PyJs_current_107_)
    @Js
    def PyJs_consume_108_(match, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'match':match, u'consume':PyJs_consume_108_}, var)
        var.registers([u'match'])
        var.get(u"this").put(u'start', var.get(u"this").get(u'pos'))
        var.get(u"this").callprop(u'eatWhile', var.get(u'match'))
        return var.get(u"this").callprop(u'current')
    PyJs_consume_108_._set_name(u'consume')
    var.get(u'StreamReader').get(u'prototype').put(u'consume', PyJs_consume_108_)
    @Js
    def PyJs_eatQuoted_109_(quote, this, arguments, var=var):
        var = Scope({u'this':this, u'quote':quote, u'eatQuoted':PyJs_eatQuoted_109_, u'arguments':arguments}, var)
        var.registers([u'quote', u'quoteCode', u'pos', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        var.put(u'pos', var.get(u"this").get(u'pos'))
        var.put(u'quoteCode', (var.get(u'quote') if PyJsStrictEq(var.get(u'quote',throw=False).typeof(),Js(u'number')) else var.get(u'quote').callprop(u'charCodeAt', Js(0.0))))
        while var.get(u"this").callprop(u'eol').neg():
            while 1:
                SWITCHED = False
                CONDITION = (var.get(u'this$1').callprop(u'nextCode'))
                if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'quoteCode')):
                    SWITCHED = True
                    return var.get(u'true')
                if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'escapeCode')):
                    SWITCHED = True
                    (var.get(u'this$1').put(u'pos',Js(var.get(u'this$1').get(u'pos').to_number())+Js(1))-Js(1))
                SWITCHED = True
                break
        var.get(u"this").put(u'pos', var.get(u'pos'))
        return Js(False)
    PyJs_eatQuoted_109_._set_name(u'eatQuoted')
    var.get(u'StreamReader').get(u'prototype').put(u'eatQuoted', PyJs_eatQuoted_109_)
    @Js
    def PyJs_save_110_(pos, this, arguments, var=var):
        var = Scope({u'this':this, u'save':PyJs_save_110_, u'pos':pos, u'arguments':arguments}, var)
        var.registers([u'pos'])
        return var.get(u"this").put(u'start', (var.get(u"this").get(u'pos') if (var.get(u'pos')==var.get(u"null")) else var.get(u'pos')))
    PyJs_save_110_._set_name(u'save')
    var.get(u'StreamReader').get(u'prototype').put(u'save', PyJs_save_110_)
    @Js
    def PyJs_error_111_(message, this, arguments, var=var):
        var = Scope({u'this':this, u'message':message, u'arguments':arguments, u'error':PyJs_error_111_}, var)
        var.registers([u'message', u'err'])
        var.put(u'err', var.get(u'Error').create((((((var.get(u'message')+Js(u' at char '))+(var.get(u"this").get(u'pos')+Js(1.0)))+Js(u' of "'))+var.get(u"this").get(u'string'))+Js(u'" string'))))
        var.get(u'err').put(u'originalMessage', var.get(u'message'))
        var.get(u'err').put(u'pos', var.get(u"this").get(u'pos'))
        var.get(u'err').put(u'string', var.get(u"this").get(u'string'))
        return var.get(u'err')
    PyJs_error_111_._set_name(u'error')
    var.get(u'StreamReader').get(u'prototype').put(u'error', PyJs_error_111_)
    @Js
    def PyJs_anonymous_112_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'stream', u'value'])
        if var.get(u'stream').callprop(u'eat', Js(u'*')):
            var.put(u'value', var.get(u'stream').callprop(u'consume', JsRegExp(u'/[0-9]/')))
            PyJs_Object_113_ = Js({u'count':((+var.get(u'value')) if var.get(u'value') else var.get(u"null"))})
            return PyJs_Object_113_
        return var.get(u"null")
    PyJs_anonymous_112_._set_name(u'anonymous')
    var.put(u'consumeRepeat', PyJs_anonymous_112_)
    @Js
    def PyJs_anonymous_114_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'quote', u'stream', u'start'])
        if var.get(u'isQuote')(var.get(u'stream').callprop(u'peek')).neg():
            return var.get(u"null")
        var.put(u'quote', var.get(u'stream').callprop(u'next'))
        var.put(u'start', var.get(u'stream').get(u'pos'))
        if var.get(u'stream').callprop(u'eatQuoted', var.get(u'quote')).neg():
            PyJsTempException = JsToPyException(var.get(u'stream').callprop(u'error', ((Js(u'Unable to find matching ')+var.get(u'quote'))+Js(u' for string literal'))))
            raise PyJsTempException
        return var.get(u'stream').get(u'string').callprop(u'slice', var.get(u'start'), (var.get(u'stream').get(u'pos')-Js(1.0)))
    PyJs_anonymous_114_._set_name(u'anonymous')
    var.put(u'consumeQuoted', PyJs_anonymous_114_)
    pass
    @Js
    def PyJs_anonymous_115_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'start', u'ch', u'stack', u'stream'])
        if PyJsStrictNeq(var.get(u'stream').callprop(u'peek'),Js(u'{')):
            return var.get(u"null")
        var.put(u'start', (var.get(u'stream').get(u'pos')+Js(1.0)))
        var.put(u'stack', Js(0.0))
        while var.get(u'stream').callprop(u'eol').neg():
            if PyJsStrictNeq(var.get(u'consumeQuoted')(var.get(u'stream')),var.get(u"null")):
                continue
            var.put(u'ch', var.get(u'stream').callprop(u'next'))
            if PyJsStrictEq(var.get(u'ch'),Js(u'{')):
                (var.put(u'stack',Js(var.get(u'stack').to_number())+Js(1))-Js(1))
                continue
            else:
                if PyJsStrictEq(var.get(u'ch'),Js(u'}')):
                    (var.put(u'stack',Js(var.get(u'stack').to_number())-Js(1))+Js(1))
                    if var.get(u'stack').neg():
                        return var.get(u'stream').get(u'string').callprop(u'slice', var.get(u'start'), (var.get(u'stream').get(u'pos')-Js(1.0)))
                else:
                    if PyJsStrictEq(var.get(u'ch'),Js(u'\\')):
                        var.get(u'stream').callprop(u'next')
                        continue
        PyJsTempException = JsToPyException(var.get(u'stream').callprop(u'error', Js(u'Unable to find matching } for text node')))
        raise PyJsTempException
    PyJs_anonymous_115_._set_name(u'anonymous')
    var.put(u'consumeTextNode', PyJs_anonymous_115_)
    var.put(u'reAttributeName', JsRegExp(u'/^\\!?[\\w\\-:\\$@]+\\.?$/'))
    var.put(u'reSpaceChar', JsRegExp(u'/[\\s\\u00a0]/'))
    var.put(u'reUnquotedValueChar', JsRegExp(u'/[^\\s\\u00a0\\[\\]=\'"]/'))
    @Js
    def PyJs_anonymous_116_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'attr', u'result', u'stream', u'next'])
        if var.get(u'stream').callprop(u'eat', Js(u'[')).neg():
            return var.get(u"null")
        var.put(u'result', Js([]))
        while var.get(u'stream').callprop(u'eol').neg():
            var.get(u'stream').callprop(u'eatWhile', var.get(u'reSpaceChar'))
            if var.get(u'stream').callprop(u'eat', Js(u']')):
                return var.get(u'result')
            var.put(u'next', var.get(u'consumeQuoted')(var.get(u'stream')))
            if PyJsStrictNeq(var.get(u'next'),var.get(u"null")):
                PyJs_Object_117_ = Js({u'name':var.get(u"null"),u'value':var.get(u'next')})
                var.get(u'result').callprop(u'push', PyJs_Object_117_)
                continue
            if var.put(u'next', var.get(u'stream').callprop(u'consume', var.get(u'reUnquotedValueChar'))):
                if var.get(u'reAttributeName').callprop(u'test', var.get(u'next')).neg():
                    PyJs_Object_118_ = Js({u'name':var.get(u"null"),u'value':var.get(u'next')})
                    var.get(u'result').callprop(u'push', PyJs_Object_118_)
                    continue
            else:
                PyJsTempException = JsToPyException(var.get(u'stream').callprop(u'error', Js(u'Expected attribute name or default value')))
                raise PyJsTempException
            PyJs_Object_119_ = Js({u'name':var.get(u'next')})
            var.put(u'attr', PyJs_Object_119_)
            var.get(u'result').callprop(u'push', var.get(u'attr'))
            if PyJsStrictEq(var.get(u'next').get((var.get(u'next').get(u'length')-Js(1.0))),Js(u'.')):
                var.get(u'attr').put(u'name', var.get(u'next').callprop(u'slice', Js(0.0), (var.get(u'next').get(u'length')-Js(1.0))))
                PyJs_Object_120_ = Js({u'boolean':var.get(u'true')})
                var.get(u'attr').put(u'options', PyJs_Object_120_)
                continue
            if PyJsStrictEq(var.get(u'next').get(u'0'),Js(u'!')):
                var.get(u'attr').put(u'name', var.get(u'next').callprop(u'slice', Js(1.0)))
                PyJs_Object_121_ = Js({u'implied':var.get(u'true')})
                var.get(u'attr').put(u'options', PyJs_Object_121_)
            if var.get(u'stream').callprop(u'eat', Js(u'=')):
                if PyJsStrictNeq(var.put(u'next', var.get(u'consumeQuoted')(var.get(u'stream'))),var.get(u"null")):
                    var.get(u'attr').put(u'value', var.get(u'next'))
                else:
                    if PyJsStrictNeq(var.put(u'next', var.get(u'consumeTextNode')(var.get(u'stream'))),var.get(u"null")):
                        var.get(u'attr').put(u'value', var.get(u'next'))
                        PyJs_Object_122_ = Js({u'before':Js(u'{'),u'after':Js(u'}')})
                        var.get(u'attr').put(u'options', PyJs_Object_122_)
                    else:
                        var.get(u'attr').put(u'value', var.get(u'stream').callprop(u'consume', var.get(u'reUnquotedValueChar')))
        PyJsTempException = JsToPyException(var.get(u'stream').callprop(u'error', Js(u'Expected closing "]" brace in attribute set')))
        raise PyJsTempException
    PyJs_anonymous_116_._set_name(u'anonymous')
    var.put(u'consumeAttributes', PyJs_anonymous_116_)
    var.put(u'reNameChar', JsRegExp(u'/[\\w\\-:\\$@\\!%]/'))
    @Js
    def PyJs_anonymous_123_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'node', u'stream', u'i', u'next', u'start', u'il'])
        var.put(u'start', var.get(u'stream').get(u'pos'))
        var.put(u'node', var.get(u'Node').create(var.get(u'stream').callprop(u'consume', var.get(u'reNameChar'))))
        while var.get(u'stream').callprop(u'eol').neg():
            var.put(u'next', PyJsComma(Js(0.0), Js(None)))
            if var.get(u'stream').callprop(u'eat', Js(u'.')):
                var.get(u'node').callprop(u'addClass', var.get(u'stream').callprop(u'consume', var.get(u'reNameChar')))
            else:
                if var.get(u'stream').callprop(u'eat', Js(u'#')):
                    var.get(u'node').callprop(u'setAttribute', Js(u'id'), var.get(u'stream').callprop(u'consume', var.get(u'reNameChar')))
                else:
                    if var.get(u'stream').callprop(u'eat', Js(u'/')):
                        if var.get(u'node').get(u'isGroup'):
                            var.get(u'stream').callprop(u'backUp', Js(1.0))
                            PyJsTempException = JsToPyException(var.get(u'stream').callprop(u'error', Js(u'Unexpected self-closing indicator')))
                            raise PyJsTempException
                        var.get(u'node').put(u'selfClosing', var.get(u'true'))
                        if var.put(u'next', var.get(u'consumeRepeat')(var.get(u'stream'))):
                            var.get(u'node').put(u'repeat', var.get(u'next'))
                        break
                    else:
                        if var.put(u'next', var.get(u'consumeAttributes')(var.get(u'stream'))):
                            #for JS loop
                            var.put(u'i', Js(0.0))
                            var.put(u'il', var.get(u'next').get(u'length'))
                            while (var.get(u'i')<var.get(u'il')):
                                try:
                                    var.get(u'node').callprop(u'setAttribute', var.get(u'next').get(var.get(u'i')))
                                finally:
                                        (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                        else:
                            if PyJsStrictNeq(var.put(u'next', var.get(u'consumeTextNode')(var.get(u'stream'))),var.get(u"null")):
                                var.get(u'node').put(u'value', var.get(u'next'))
                            else:
                                if var.put(u'next', var.get(u'consumeRepeat')(var.get(u'stream'))):
                                    var.get(u'node').put(u'repeat', var.get(u'next'))
                                else:
                                    break
        if PyJsStrictEq(var.get(u'start'),var.get(u'stream').get(u'pos')):
            PyJsTempException = JsToPyException(var.get(u'stream').callprop(u'error', (Js(u'Unable to consume abbreviation node, unexpected ')+var.get(u'stream').callprop(u'peek'))))
            raise PyJsTempException
        return var.get(u'node')
    PyJs_anonymous_123_._set_name(u'anonymous')
    var.put(u'consumeElement', PyJs_anonymous_123_)
    pass
    pass
    @Js
    def PyJs_anonymous_124_(abbr, this, arguments, var=var):
        var = Scope({u'this':this, u'abbr':abbr, u'arguments':arguments}, var)
        var.registers([u'tree', u'abbr'])
        var.put(u'tree', var.get(u'parse$2')(var.get(u'abbr')))
        var.get(u'tree').callprop(u'walk', var.get(u'unroll'))
        return var.get(u'tree')
    PyJs_anonymous_124_._set_name(u'anonymous')
    var.put(u'index', PyJs_anonymous_124_)
    pass
    @Js
    def PyJs_anonymous_125_(tree, registry, this, arguments, var=var):
        var = Scope({u'this':this, u'tree':tree, u'registry':registry, u'arguments':arguments}, var)
        var.registers([u'tree', u'registry'])
        @Js
        def PyJs_anonymous_126_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            return var.get(u'resolveNode')(var.get(u'node'), var.get(u'registry'))
        PyJs_anonymous_126_._set_name(u'anonymous')
        var.get(u'tree').callprop(u'walk', PyJs_anonymous_126_)
        return var.get(u'tree')
    PyJs_anonymous_125_._set_name(u'anonymous')
    var.put(u'index$1', PyJs_anonymous_125_)
    pass
    pass
    pass
    pass
    pass
    var.put(u'inlineElements', var.get(u'Set').create(Js(u'a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,select,small,span,strike,strong,sub,sup,textarea,tt,u,var').callprop(u'split', Js(u','))))
    PyJs_Object_129_ = Js({u'p':Js(u'span'),u'ul':Js(u'li'),u'ol':Js(u'li'),u'table':Js(u'tr'),u'tr':Js(u'td'),u'tbody':Js(u'tr'),u'thead':Js(u'tr'),u'tfoot':Js(u'tr'),u'colgroup':Js(u'col'),u'select':Js(u'option'),u'optgroup':Js(u'option'),u'audio':Js(u'source'),u'video':Js(u'source'),u'object':Js(u'param'),u'map':Js(u'area')})
    var.put(u'elementMap', PyJs_Object_129_)
    pass
    @Js
    def PyJs_anonymous_130_(tree, this, arguments, var=var):
        var = Scope({u'this':this, u'tree':tree, u'arguments':arguments}, var)
        var.registers([u'tree'])
        @Js
        def PyJs_anonymous_131_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            if ((var.get(u'node').get(u'name')==var.get(u"null")) and var.get(u'node').get(u'attributes').get(u'length')):
                var.get(u'node').put(u'name', var.get(u'resolveImplicitName')(var.get(u'node').get(u'parent').get(u'name')))
        PyJs_anonymous_131_._set_name(u'anonymous')
        var.get(u'tree').callprop(u'walk', PyJs_anonymous_131_)
        return var.get(u'tree')
    PyJs_anonymous_130_._set_name(u'anonymous')
    var.put(u'implicitTags', PyJs_anonymous_130_)
    pass
    pass
    pass
    var.put(u'numberingToken', Js(u'$'))
    @Js
    def PyJs_anonymous_133_(tree, this, arguments, var=var):
        var = Scope({u'this':this, u'tree':tree, u'arguments':arguments}, var)
        var.registers([u'tree'])
        var.get(u'tree').callprop(u'walk', var.get(u'applyNumbering$1'))
        return var.get(u'tree')
    PyJs_anonymous_133_._set_name(u'anonymous')
    var.put(u'applyNumbering', PyJs_anonymous_133_)
    pass
    pass
    pass
    pass
    pass
    pass
    var.put(u'placeholder', Js(u'$#'))
    var.put(u'caret', Js(u'|'))
    var.put(u'reUrl', JsRegExp(u'/^((?:https?|ftp|file):\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/'))
    var.put(u'reEmail', JsRegExp(u'/^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/'))
    var.put(u'reProto', JsRegExp(u'/^([a-z]+:)?\\/\\//i'))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    PyJs_Object_142_ = Js({u'element':Js(u'__'),u'modifier':Js(u'_')})
    var.put(u'defaultOptions$2', PyJs_Object_142_)
    var.put(u'reElement', JsRegExp(u'/^(-+)([a-z0-9]+)/i'))
    var.put(u'reModifier', JsRegExp(u'/^(_+)([a-z0-9]+)/i'))
    @Js
    def PyJs_anonymous_143_(className, this, arguments, var=var):
        var = Scope({u'className':className, u'this':this, u'arguments':arguments}, var)
        var.registers([u'className'])
        return JsRegExp(u'/^[a-z]\\-/i').callprop(u'test', var.get(u'className'))
    PyJs_anonymous_143_._set_name(u'anonymous')
    var.put(u'blockCandidates1', PyJs_anonymous_143_)
    @Js
    def PyJs_anonymous_144_(className, this, arguments, var=var):
        var = Scope({u'className':className, u'this':this, u'arguments':arguments}, var)
        var.registers([u'className'])
        return JsRegExp(u'/^[a-z]/i').callprop(u'test', var.get(u'className'))
    PyJs_anonymous_144_._set_name(u'anonymous')
    var.put(u'blockCandidates2', PyJs_anonymous_144_)
    @Js
    def PyJs_anonymous_145_(tree, options, this, arguments, var=var):
        var = Scope({u'this':this, u'tree':tree, u'options':options, u'arguments':arguments}, var)
        var.registers([u'tree', u'lookup', u'options'])
        PyJs_Object_146_ = Js({})
        var.put(u'options', var.get(u'Object').callprop(u'assign', PyJs_Object_146_, var.get(u'defaultOptions$2'), var.get(u'options')))
        @Js
        def PyJs_anonymous_147_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            return var.get(u'expandClassNames')(var.get(u'node'), var.get(u'options'))
        PyJs_anonymous_147_._set_name(u'anonymous')
        var.get(u'tree').callprop(u'walk', PyJs_anonymous_147_)
        var.put(u'lookup', var.get(u'createBlockLookup')(var.get(u'tree')))
        @Js
        def PyJs_anonymous_148_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            return var.get(u'expandShortNotation')(var.get(u'node'), var.get(u'lookup'), var.get(u'options'))
        PyJs_anonymous_148_._set_name(u'anonymous')
        var.get(u'tree').callprop(u'walk', PyJs_anonymous_148_)
        return var.get(u'tree')
    PyJs_anonymous_145_._set_name(u'anonymous')
    var.put(u'bem', PyJs_anonymous_145_)
    pass
    pass
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_152_(tree, this, arguments, var=var):
        var = Scope({u'this':this, u'tree':tree, u'arguments':arguments}, var)
        var.registers([u'tree'])
        @Js
        def PyJs_anonymous_153_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            var.get(u'replace')(var.get(u'node'), Js(u'class'), Js(u'className'))
            var.get(u'replace')(var.get(u'node'), Js(u'for'), Js(u'htmlFor'))
        PyJs_anonymous_153_._set_name(u'anonymous')
        var.get(u'tree').callprop(u'walk', PyJs_anonymous_153_)
        return var.get(u'tree')
    PyJs_anonymous_152_._set_name(u'anonymous')
    var.put(u'jsx', PyJs_anonymous_152_)
    pass
    var.put(u'reSupporterNames', JsRegExp(u'/^xsl:(variable|with\\-param)$/i'))
    @Js
    def PyJs_anonymous_154_(tree, this, arguments, var=var):
        var = Scope({u'this':this, u'tree':tree, u'arguments':arguments}, var)
        var.registers([u'tree'])
        @Js
        def PyJs_anonymous_155_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            if (var.get(u'reSupporterNames').callprop(u'test', (var.get(u'node').get(u'name') or Js(u''))) and (var.get(u'node').get(u'children').get(u'length') or var.get(u'node').get(u'value'))):
                var.get(u'node').callprop(u'removeAttribute', Js(u'select'))
        PyJs_anonymous_155_._set_name(u'anonymous')
        var.get(u'tree').callprop(u'walk', PyJs_anonymous_155_)
        return var.get(u'tree')
    PyJs_anonymous_154_._set_name(u'anonymous')
    var.put(u'xsl', PyJs_anonymous_154_)
    PyJs_Object_156_ = Js({u'bem':var.get(u'bem'),u'jsx':var.get(u'jsx'),u'xsl':var.get(u'xsl')})
    var.put(u'supportedAddons', PyJs_Object_156_)
    @Js
    def PyJs_anonymous_157_(tree, addons, this, arguments, var=var):
        var = Scope({u'this':this, u'addons':addons, u'tree':tree, u'arguments':arguments}, var)
        var.registers([u'addons', u'tree'])
        @Js
        def PyJs_anonymous_158_(key, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'key':key}, var)
            var.registers([u'addonOpt', u'key'])
            if var.get(u'supportedAddons').contains(var.get(u'key')):
                var.put(u'addonOpt', (var.get(u'addons').get(var.get(u'key')) if PyJsStrictEq(var.get(u'addons').get(var.get(u'key')).typeof(),Js(u'object')) else var.get(u"null")))
                var.put(u'tree', var.get(u'tree').callprop(u'use', var.get(u'supportedAddons').get(var.get(u'key')), var.get(u'addonOpt')))
        PyJs_anonymous_158_._set_name(u'anonymous')
        PyJs_Object_159_ = Js({})
        var.get(u'Object').callprop(u'keys', (var.get(u'addons') or PyJs_Object_159_)).callprop(u'forEach', PyJs_anonymous_158_)
        return var.get(u'tree')
    PyJs_anonymous_157_._set_name(u'anonymous')
    var.put(u'addons', PyJs_anonymous_157_)
    @Js
    def PyJs_anonymous_160_(tree, content, appliedAddons, this, arguments, var=var):
        var = Scope({u'content':content, u'this':this, u'appliedAddons':appliedAddons, u'tree':tree, u'arguments':arguments}, var)
        var.registers([u'content', u'appliedAddons', u'tree'])
        if PyJsStrictEq(var.get(u'content',throw=False).typeof(),Js(u'string')):
            var.put(u'content', Js([var.get(u'content')]))
        else:
            if ((var.get(u'content') and PyJsStrictEq(var.get(u'content',throw=False).typeof(),Js(u'object'))) and var.get(u'Array').callprop(u'isArray', var.get(u'content')).neg()):
                var.put(u'appliedAddons', var.get(u'content'))
                var.put(u'content', var.get(u"null"))
        return var.get(u'tree').callprop(u'use', var.get(u'implicitTags')).callprop(u'use', var.get(u'prepare'), (var.get(u'content').get(u'length') if var.get(u'Array').callprop(u'isArray', var.get(u'content')) else var.get(u"null"))).callprop(u'use', var.get(u'applyNumbering')).callprop(u'use', var.get(u'insert'), var.get(u'content')).callprop(u'use', var.get(u'addons'), var.get(u'appliedAddons'))
    PyJs_anonymous_160_._set_name(u'anonymous')
    var.put(u'index$2', PyJs_anonymous_160_)
    pass
    pass
    pass
    pass
    var.put(u'DOLLAR', Js(36.0))
    var.put(u'COLON', Js(58.0))
    var.put(u'ESCAPE', Js(92.0))
    var.put(u'OPEN_BRACE', Js(123.0))
    var.put(u'CLOSE_BRACE', Js(125.0))
    pass
    pass
    pass
    pass
    pass
    pass
    @Js
    def PyJs_Field_169_(index, placeholder, location, this, arguments, var=var):
        var = Scope({u'index':index, u'this':this, u'Field':PyJs_Field_169_, u'location':location, u'placeholder':placeholder, u'arguments':arguments}, var)
        var.registers([u'index', u'placeholder', u'location'])
        var.get(u"this").put(u'index', var.get(u'index'))
        var.get(u"this").put(u'placeholder', var.get(u'placeholder'))
        var.get(u"this").put(u'location', var.get(u'location'))
        var.get(u"this").put(u'length', var.get(u"this").get(u'placeholder').get(u'length'))
    PyJs_Field_169_._set_name(u'Field')
    var.put(u'Field', PyJs_Field_169_)
    @Js
    def PyJs_FieldString_170_(string, fields, this, arguments, var=var):
        var = Scope({u'this':this, u'fields':fields, u'FieldString':PyJs_FieldString_170_, u'string':string, u'arguments':arguments}, var)
        var.registers([u'fields', u'string'])
        var.get(u"this").put(u'string', var.get(u'string'))
        var.get(u"this").put(u'fields', var.get(u'fields'))
    PyJs_FieldString_170_._set_name(u'FieldString')
    var.put(u'FieldString', PyJs_FieldString_170_)
    @Js
    def PyJs_InlineNonPyName_171_(token, this, arguments, var=var):
        var = Scope({u'this':this, u'mark$1':PyJs_InlineNonPyName_171_, u'token':token, u'arguments':arguments}, var)
        var.registers([u'token'])
        return var.get(u'mark')(var.get(u"this").get(u'string'), var.get(u"this").get(u'fields'), var.get(u'token'))
    PyJs_InlineNonPyName_171_._set_name(u'mark$1')
    var.get(u'FieldString').get(u'prototype').put(u'mark', PyJs_InlineNonPyName_171_)
    @Js
    def PyJs_toString_172_(this, arguments, var=var):
        var = Scope({u'this':this, u'toString':PyJs_toString_172_, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u'string')
    PyJs_toString_172_._set_name(u'toString')
    var.get(u'FieldString').get(u'prototype').put(u'toString', PyJs_toString_172_)
    pass
    @Js
    def PyJs_anonymous_173_(text, this, arguments, var=var):
        var = Scope({u'this':this, u'text':text, u'arguments':arguments}, var)
        var.registers([u'text'])
        return var.get(u'text')
    PyJs_anonymous_173_._set_name(u'anonymous')
    var.put(u'defaultFieldsRenderer', PyJs_anonymous_173_)
    @Js
    def PyJs_OutputNode_174_(node, fieldsRenderer, options, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'fieldsRenderer':fieldsRenderer, u'OutputNode':PyJs_OutputNode_174_, u'arguments':arguments, u'options':options}, var)
        var.registers([u'node', u'fieldsRenderer', u'options'])
        if PyJsStrictEq(var.get(u'fieldsRenderer',throw=False).typeof(),Js(u'object')):
            var.put(u'options', var.get(u'fieldsRenderer'))
            var.put(u'fieldsRenderer', var.get(u"null"))
        var.get(u"this").put(u'node', var.get(u'node'))
        var.get(u"this").put(u'_fieldsRenderer', (var.get(u'fieldsRenderer') or var.get(u'defaultFieldsRenderer')))
        var.get(u"this").put(u'open', var.get(u"null"))
        var.get(u"this").put(u'beforeOpen', Js(u''))
        var.get(u"this").put(u'afterOpen', Js(u''))
        var.get(u"this").put(u'close', var.get(u"null"))
        var.get(u"this").put(u'beforeClose', Js(u''))
        var.get(u"this").put(u'afterClose', Js(u''))
        var.get(u"this").put(u'text', var.get(u"null"))
        var.get(u"this").put(u'beforeText', Js(u''))
        var.get(u"this").put(u'afterText', Js(u''))
        var.get(u"this").put(u'indent', Js(u''))
        var.get(u"this").put(u'newline', Js(u''))
        if var.get(u'options'):
            var.get(u'Object').callprop(u'assign', var.get(u"this"), var.get(u'options'))
    PyJs_OutputNode_174_._set_name(u'OutputNode')
    var.put(u'OutputNode', PyJs_OutputNode_174_)
    @Js
    def PyJs_clone_175_(this, arguments, var=var):
        var = Scope({u'this':this, u'clone':PyJs_clone_175_, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'constructor').create(var.get(u"this").get(u'node'), var.get(u"this"))
    PyJs_clone_175_._set_name(u'clone')
    var.get(u'OutputNode').get(u'prototype').put(u'clone', PyJs_clone_175_)
    @Js
    def PyJs_indentText_176_(text, this, arguments, var=var):
        var = Scope({u'this':this, u'text':text, u'arguments':arguments, u'indentText':PyJs_indentText_176_}, var)
        var.registers([u'nl', u'text', u'lines', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        var.put(u'lines', var.get(u'splitByLines$1')(var.get(u'text')))
        if PyJsStrictEq(var.get(u'lines').get(u'length'),Js(1.0)):
            return var.get(u'text')
        var.put(u'nl', (Js(u' ') if (var.get(u"this").get(u'newline').neg() and var.get(u"this").get(u'indent').neg()) else var.get(u"this").get(u'newline')))
        @Js
        def PyJs_anonymous_177_(line, i, this, arguments, var=var):
            var = Scope({u'i':i, u'this':this, u'line':line, u'arguments':arguments}, var)
            var.registers([u'i', u'line'])
            return ((var.get(u'this$1').get(u'indent')+var.get(u'line')) if var.get(u'i') else var.get(u'line'))
        PyJs_anonymous_177_._set_name(u'anonymous')
        return var.get(u'lines').callprop(u'map', PyJs_anonymous_177_).callprop(u'join', var.get(u'nl'))
    PyJs_indentText_176_._set_name(u'indentText')
    var.get(u'OutputNode').get(u'prototype').put(u'indentText', PyJs_indentText_176_)
    @Js
    def PyJs_renderFields_178_(text, this, arguments, var=var):
        var = Scope({u'this':this, u'text':text, u'renderFields':PyJs_renderFields_178_, u'arguments':arguments}, var)
        var.registers([u'text'])
        return var.get(u"this").callprop(u'_fieldsRenderer', var.get(u'text'))
    PyJs_renderFields_178_._set_name(u'renderFields')
    var.get(u'OutputNode').get(u'prototype').put(u'renderFields', PyJs_renderFields_178_)
    @Js
    def PyJs_toString_179_(children, this, arguments, var=var):
        var = Scope({u'this':this, u'toString':PyJs_toString_179_, u'children':children, u'arguments':arguments}, var)
        var.registers([u'close', u'open', u'children', u'text'])
        var.put(u'open', var.get(u"this").callprop(u'_wrap', var.get(u"this").get(u'open'), var.get(u"this").get(u'beforeOpen'), var.get(u"this").get(u'afterOpen')))
        var.put(u'close', var.get(u"this").callprop(u'_wrap', var.get(u"this").get(u'close'), var.get(u"this").get(u'beforeClose'), var.get(u"this").get(u'afterClose')))
        var.put(u'text', var.get(u"this").callprop(u'_wrap', var.get(u"this").get(u'text'), var.get(u"this").get(u'beforeText'), var.get(u"this").get(u'afterText')))
        return (((var.get(u'open')+var.get(u'text'))+(var.get(u'children') if (var.get(u'children')!=var.get(u"null")) else Js(u'')))+var.get(u'close'))
    PyJs_toString_179_._set_name(u'toString')
    var.get(u'OutputNode').get(u'prototype').put(u'toString', PyJs_toString_179_)
    @Js
    def PyJs__wrap_180_(str, before, after, this, arguments, var=var):
        var = Scope({u'this':this, u'after':after, u'arguments':arguments, u'str':str, u'_wrap':PyJs__wrap_180_, u'before':before}, var)
        var.registers([u'after', u'str', u'before'])
        var.put(u'before', (var.get(u'before') if (var.get(u'before')!=var.get(u"null")) else Js(u'')))
        var.put(u'after', (var.get(u'after') if (var.get(u'after')!=var.get(u"null")) else Js(u'')))
        if (var.get(u'str')!=var.get(u"null")):
            var.put(u'str', (var.get(u'str').callprop(u'replace', JsRegExp(u'/^\\s+/'), Js(u'')) if var.get(u'before') else var.get(u'str')))
            var.put(u'str', (var.get(u'str').callprop(u'replace', JsRegExp(u'/\\s+$/'), Js(u'')) if var.get(u'after') else var.get(u'str')))
            return ((var.get(u'before')+var.get(u"this").callprop(u'indentText', var.get(u'str')))+var.get(u'after'))
        return Js(u'')
    PyJs__wrap_180_._set_name(u'_wrap')
    var.get(u'OutputNode').get(u'prototype').put(u'_wrap', PyJs__wrap_180_)
    pass
    @Js
    def PyJs_anonymous_181_(index, placeholder, this, arguments, var=var):
        var = Scope({u'this':this, u'index':index, u'placeholder':placeholder, u'arguments':arguments}, var)
        var.registers([u'index', u'placeholder'])
        return (var.get(u'placeholder') or Js(u''))
    PyJs_anonymous_181_._set_name(u'anonymous')
    var.put(u'defaultField', PyJs_anonymous_181_)
    pass
    pass
    pass
    pass
    var.put(u'TOKEN', JsRegExp(u'/^(.*?)([A-Z_]+)(.*?)$/'))
    var.put(u'TOKEN_OPEN', Js(91.0))
    var.put(u'TOKEN_CLOSE', Js(93.0))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    PyJs_Object_188_ = Js({u'enabled':Js(False),u'trigger':Js([Js(u'id'), Js(u'class')]),u'before':Js(u''),u'after':Js(u'\n<!-- /[#ID][.CLASS] -->')})
    var.put(u'commentOptions', PyJs_Object_188_)
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.put(u'reId', JsRegExp(u'/^id$/i'))
    var.put(u'reClass', JsRegExp(u'/^class$/i'))
    @Js
    def PyJs_anonymous_196_(attrs, this, arguments, var=var):
        var = Scope({u'this':this, u'attrs':attrs, u'arguments':arguments}, var)
        var.registers([u'attrs'])
        return var.get(u'attrs').callprop(u'join', Js(u''))
    PyJs_anonymous_196_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_197_(attrs, this, arguments, var=var):
        var = Scope({u'this':this, u'attrs':attrs, u'arguments':arguments}, var)
        var.registers([u'attrs'])
        @Js
        def PyJs_anonymous_198_(attr, this, arguments, var=var):
            var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
            var.registers([u'attr'])
            return (var.get(u'attr').get(u'name') if var.get(u'attr').get(u'isBoolean') else ((var.get(u'attr').get(u'name')+Js(u'='))+var.get(u'attr').get(u'value')))
        PyJs_anonymous_198_._set_name(u'anonymous')
        return var.get(u'attrs').callprop(u'map', PyJs_anonymous_198_).callprop(u'join', Js(u', '))
    PyJs_anonymous_197_._set_name(u'anonymous')
    PyJs_Object_195_ = Js({u'primary':PyJs_anonymous_196_,u'secondary':PyJs_anonymous_197_})
    var.put(u'defaultAttrOptions', PyJs_Object_195_)
    PyJs_Object_199_ = Js({u'open':var.get(u"null"),u'close':var.get(u"null"),u'omitName':JsRegExp(u'/^div$/i'),u'attributes':var.get(u'defaultAttrOptions')})
    var.put(u'defaultNodeOptions', PyJs_Object_199_)
    pass
    pass
    pass
    var.put(u'reNl', JsRegExp(u'/\\n|\\r/'))
    pass
    pass
    pass
    pass
    var.put(u'reNl$1', JsRegExp(u'/\\n|\\r/'))
    PyJs_Object_214_ = Js({u'none':Js(u'[ SECONDARY_ATTRS]'),u'round':Js(u'[(SECONDARY_ATTRS)]'),u'curly':Js(u'[{SECONDARY_ATTRS}]'),u'square':Js(u'[[SECONDARY_ATTRS]')})
    var.put(u'secondaryAttrs', PyJs_Object_214_)
    pass
    pass
    pass
    pass
    var.put(u'reNl$2', JsRegExp(u'/\\n|\\r/'))
    pass
    pass
    pass
    PyJs_Object_231_ = Js({u'html':var.get(u'html'),u'haml':var.get(u'haml'),u'slim':var.get(u'slim'),u'pug':var.get(u'pug')})
    var.put(u'supportedSyntaxed', PyJs_Object_231_)
    @Js
    def PyJs_anonymous_232_(tree, profile, syntax, options, this, arguments, var=var):
        var = Scope({u'profile':profile, u'arguments':arguments, u'this':this, u'tree':tree, u'options':options, u'syntax':syntax}, var)
        var.registers([u'profile', u'tree', u'options', u'syntax'])
        if PyJsStrictEq(var.get(u'syntax',throw=False).typeof(),Js(u'object')):
            var.put(u'options', var.get(u'syntax'))
            var.put(u'syntax', var.get(u"null"))
        if var.get(u'supports')(var.get(u'syntax')).neg():
            var.put(u'syntax', Js(u'html'))
        return var.get(u'supportedSyntaxed').callprop(var.get(u'syntax'), var.get(u'tree'), var.get(u'profile'), var.get(u'options'))
    PyJs_anonymous_232_._set_name(u'anonymous')
    var.put(u'index$3', PyJs_anonymous_232_)
    pass
    pass
    pass
    @Js
    def PyJs_Attribute_234_(name, value, options, this, arguments, var=var):
        var = Scope({u'name':name, u'this':this, u'Attribute':PyJs_Attribute_234_, u'value':value, u'arguments':arguments, u'options':options}, var)
        var.registers([u'name', u'value', u'options'])
        var.get(u"this").put(u'name', var.get(u'name'))
        var.get(u"this").put(u'value', (var.get(u'value') or var.get(u"null")))
        PyJs_Object_235_ = Js({})
        var.get(u"this").put(u'options', (var.get(u'options') or PyJs_Object_235_))
    PyJs_Attribute_234_._set_name(u'Attribute')
    var.put(u'Attribute$1', PyJs_Attribute_234_)
    @Js
    def PyJs_clone_236_(this, arguments, var=var):
        var = Scope({u'this':this, u'clone':PyJs_clone_236_, u'arguments':arguments}, var)
        var.registers([])
        PyJs_Object_237_ = Js({})
        return var.get(u'Attribute$1').create(var.get(u"this").get(u'name'), var.get(u"this").get(u'value'), var.get(u'Object').callprop(u'assign', PyJs_Object_237_, var.get(u"this").get(u'options')))
    PyJs_clone_236_._set_name(u'clone')
    var.get(u'Attribute$1').get(u'prototype').put(u'clone', PyJs_clone_236_)
    @Js
    def PyJs_valueOf_238_(this, arguments, var=var):
        var = Scope({u'this':this, u'valueOf':PyJs_valueOf_238_, u'arguments':arguments}, var)
        var.registers([])
        return (((var.get(u"this").get(u'name')+Js(u'="'))+var.get(u"this").get(u'value'))+Js(u'"'))
    PyJs_valueOf_238_._set_name(u'valueOf')
    var.get(u'Attribute$1').get(u'prototype').put(u'valueOf', PyJs_valueOf_238_)
    @Js
    def PyJs_Node_239_(name, attributes, this, arguments, var=var):
        var = Scope({u'this':this, u'attributes':attributes, u'name':name, u'Node':PyJs_Node_239_, u'arguments':arguments}, var)
        var.registers([u'attributes', u'name', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        var.get(u"this").put(u'name', (var.get(u'name') or var.get(u"null")))
        var.get(u"this").put(u'value', var.get(u"null"))
        var.get(u"this").put(u'repeat', var.get(u"null"))
        var.get(u"this").put(u'selfClosing', Js(False))
        var.get(u"this").put(u'children', Js([]))
        var.get(u"this").put(u'parent', var.get(u"null"))
        var.get(u"this").put(u'next', var.get(u"null"))
        var.get(u"this").put(u'previous', var.get(u"null"))
        var.get(u"this").put(u'_attributes', Js([]))
        if var.get(u'Array').callprop(u'isArray', var.get(u'attributes')):
            @Js
            def PyJs_anonymous_240_(attr, this, arguments, var=var):
                var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
                var.registers([u'attr'])
                return var.get(u'this$1').callprop(u'setAttribute', var.get(u'attr'))
            PyJs_anonymous_240_._set_name(u'anonymous')
            var.get(u'attributes').callprop(u'forEach', PyJs_anonymous_240_)
    PyJs_Node_239_._set_name(u'Node')
    var.put(u'Node$2', PyJs_Node_239_)
    PyJs_Object_242_ = Js({})
    PyJs_Object_243_ = Js({})
    PyJs_Object_244_ = Js({})
    PyJs_Object_245_ = Js({})
    PyJs_Object_246_ = Js({})
    PyJs_Object_247_ = Js({})
    PyJs_Object_248_ = Js({})
    PyJs_Object_249_ = Js({})
    PyJs_Object_250_ = Js({})
    PyJs_Object_251_ = Js({})
    PyJs_Object_241_ = Js({u'attributes':PyJs_Object_242_,u'attributesMap':PyJs_Object_243_,u'isGroup':PyJs_Object_244_,u'isTextOnly':PyJs_Object_245_,u'firstChild':PyJs_Object_246_,u'lastChild':PyJs_Object_247_,u'childIndex':PyJs_Object_248_,u'nextSibling':PyJs_Object_249_,u'previousSibling':PyJs_Object_250_,u'classList':PyJs_Object_251_})
    var.put(u'prototypeAccessors$3', PyJs_Object_241_)
    @Js
    def PyJs_anonymous_252_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'_attributes')
    PyJs_anonymous_252_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$3').get(u'attributes').put(u'get', PyJs_anonymous_252_)
    @Js
    def PyJs_anonymous_253_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_254_(out, attr, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'attr':attr, u'out':out}, var)
            var.registers([u'attr', u'out'])
            var.get(u'out').put(var.get(u'attr').get(u'name'), (var.get(u'attr').get(u'name') if var.get(u'attr').get(u'options').get(u'boolean') else var.get(u'attr').get(u'value')))
            return var.get(u'out')
        PyJs_anonymous_254_._set_name(u'anonymous')
        PyJs_Object_255_ = Js({})
        return var.get(u"this").get(u'attributes').callprop(u'reduce', PyJs_anonymous_254_, PyJs_Object_255_)
    PyJs_anonymous_253_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$3').get(u'attributesMap').put(u'get', PyJs_anonymous_253_)
    @Js
    def PyJs_anonymous_256_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return ((var.get(u"this").get(u'name').neg() and var.get(u"this").get(u'value').neg()) and var.get(u"this").get(u'_attributes').get(u'length').neg())
    PyJs_anonymous_256_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$3').get(u'isGroup').put(u'get', PyJs_anonymous_256_)
    @Js
    def PyJs_anonymous_257_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return ((var.get(u"this").get(u'name').neg() and var.get(u"this").get(u'value').neg().neg()) and var.get(u"this").get(u'_attributes').get(u'length').neg())
    PyJs_anonymous_257_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$3').get(u'isTextOnly').put(u'get', PyJs_anonymous_257_)
    @Js
    def PyJs_anonymous_258_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'children').get(u'0')
    PyJs_anonymous_258_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$3').get(u'firstChild').put(u'get', PyJs_anonymous_258_)
    @Js
    def PyJs_anonymous_259_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'children').get((var.get(u"this").get(u'children').get(u'length')-Js(1.0)))
    PyJs_anonymous_259_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$3').get(u'lastChild').put(u'get', PyJs_anonymous_259_)
    @Js
    def PyJs_anonymous_260_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return (var.get(u"this").get(u'parent').get(u'children').callprop(u'indexOf', var.get(u"this")) if var.get(u"this").get(u'parent') else (-Js(1.0)))
    PyJs_anonymous_260_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$3').get(u'childIndex').put(u'get', PyJs_anonymous_260_)
    @Js
    def PyJs_anonymous_261_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'next')
    PyJs_anonymous_261_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$3').get(u'nextSibling').put(u'get', PyJs_anonymous_261_)
    @Js
    def PyJs_anonymous_262_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'previous')
    PyJs_anonymous_262_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$3').get(u'previousSibling').put(u'get', PyJs_anonymous_262_)
    @Js
    def PyJs_anonymous_263_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'attr'])
        var.put(u'attr', var.get(u"this").callprop(u'getAttribute', Js(u'class')))
        return (var.get(u'attr').get(u'value').callprop(u'split', JsRegExp(u'/\\s+/g')).callprop(u'filter', var.get(u'uniqueClass$1')) if (var.get(u'attr') and var.get(u'attr').get(u'value')) else Js([]))
    PyJs_anonymous_263_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$3').get(u'classList').put(u'get', PyJs_anonymous_263_)
    @Js
    def PyJs_create_264_(name, attributes, this, arguments, var=var):
        var = Scope({u'this':this, u'attributes':attributes, u'create':PyJs_create_264_, u'name':name, u'arguments':arguments}, var)
        var.registers([u'attributes', u'name'])
        return var.get(u'Node$2').create(var.get(u'name'), var.get(u'attributes'))
    PyJs_create_264_._set_name(u'create')
    var.get(u'Node$2').get(u'prototype').put(u'create', PyJs_create_264_)
    @Js
    def PyJs_setAttribute_265_(name, value, this, arguments, var=var):
        var = Scope({u'this':this, u'setAttribute':PyJs_setAttribute_265_, u'name':name, u'value':value, u'arguments':arguments}, var)
        var.registers([u'curAttr', u'attr', u'value', u'name'])
        var.put(u'attr', var.get(u'createAttribute$1')(var.get(u'name'), var.get(u'value')))
        var.put(u'curAttr', var.get(u"this").callprop(u'getAttribute', var.get(u'name')))
        if var.get(u'curAttr'):
            var.get(u"this").callprop(u'replaceAttribute', var.get(u'curAttr'), var.get(u'attr'))
        else:
            var.get(u"this").get(u'_attributes').callprop(u'push', var.get(u'attr'))
    PyJs_setAttribute_265_._set_name(u'setAttribute')
    var.get(u'Node$2').get(u'prototype').put(u'setAttribute', PyJs_setAttribute_265_)
    @Js
    def PyJs_hasAttribute_266_(name, this, arguments, var=var):
        var = Scope({u'this':this, u'hasAttribute':PyJs_hasAttribute_266_, u'name':name, u'arguments':arguments}, var)
        var.registers([u'name'])
        return var.get(u"this").callprop(u'getAttribute', var.get(u'name')).neg().neg()
    PyJs_hasAttribute_266_._set_name(u'hasAttribute')
    var.get(u'Node$2').get(u'prototype').put(u'hasAttribute', PyJs_hasAttribute_266_)
    @Js
    def PyJs_getAttribute_267_(name, this, arguments, var=var):
        var = Scope({u'this':this, u'getAttribute':PyJs_getAttribute_267_, u'name':name, u'arguments':arguments}, var)
        var.registers([u'i', u'attr', u'name', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        if PyJsStrictEq(var.get(u'name',throw=False).typeof(),Js(u'object')):
            var.put(u'name', var.get(u'name').get(u'name'))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u"this").get(u'_attributes').get(u'length')):
            try:
                var.put(u'attr', var.get(u'this$1').get(u'_attributes').get(var.get(u'i')))
                if PyJsStrictEq(var.get(u'attr').get(u'name'),var.get(u'name')):
                    return var.get(u'attr')
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
    PyJs_getAttribute_267_._set_name(u'getAttribute')
    var.get(u'Node$2').get(u'prototype').put(u'getAttribute', PyJs_getAttribute_267_)
    @Js
    def PyJs_replaceAttribute_268_(curAttribute, newName, newValue, this, arguments, var=var):
        var = Scope({u'curAttribute':curAttribute, u'newName':newName, u'this':this, u'arguments':arguments, u'replaceAttribute':PyJs_replaceAttribute_268_, u'newValue':newValue}, var)
        var.registers([u'newName', u'ix', u'newValue', u'curAttribute'])
        if PyJsStrictEq(var.get(u'curAttribute',throw=False).typeof(),Js(u'string')):
            var.put(u'curAttribute', var.get(u"this").callprop(u'getAttribute', var.get(u'curAttribute')))
        var.put(u'ix', var.get(u"this").get(u'_attributes').callprop(u'indexOf', var.get(u'curAttribute')))
        if PyJsStrictNeq(var.get(u'ix'),(-Js(1.0))):
            var.get(u"this").get(u'_attributes').callprop(u'splice', var.get(u'ix'), Js(1.0), var.get(u'createAttribute$1')(var.get(u'newName'), var.get(u'newValue')))
    PyJs_replaceAttribute_268_._set_name(u'replaceAttribute')
    var.get(u'Node$2').get(u'prototype').put(u'replaceAttribute', PyJs_replaceAttribute_268_)
    @Js
    def PyJs_removeAttribute_269_(attr, this, arguments, var=var):
        var = Scope({u'this':this, u'removeAttribute':PyJs_removeAttribute_269_, u'attr':attr, u'arguments':arguments}, var)
        var.registers([u'ix', u'attr'])
        if PyJsStrictEq(var.get(u'attr',throw=False).typeof(),Js(u'string')):
            var.put(u'attr', var.get(u"this").callprop(u'getAttribute', var.get(u'attr')))
        var.put(u'ix', var.get(u"this").get(u'_attributes').callprop(u'indexOf', var.get(u'attr')))
        if PyJsStrictNeq(var.get(u'ix'),(-Js(1.0))):
            var.get(u"this").get(u'_attributes').callprop(u'splice', var.get(u'ix'), Js(1.0))
    PyJs_removeAttribute_269_._set_name(u'removeAttribute')
    var.get(u'Node$2').get(u'prototype').put(u'removeAttribute', PyJs_removeAttribute_269_)
    @Js
    def PyJs_clearAttributes_270_(this, arguments, var=var):
        var = Scope({u'this':this, u'clearAttributes':PyJs_clearAttributes_270_, u'arguments':arguments}, var)
        var.registers([])
        var.get(u"this").get(u'_attributes').put(u'length', Js(0.0))
    PyJs_clearAttributes_270_._set_name(u'clearAttributes')
    var.get(u'Node$2').get(u'prototype').put(u'clearAttributes', PyJs_clearAttributes_270_)
    @Js
    def PyJs_addClass_271_(token, this, arguments, var=var):
        var = Scope({u'this':this, u'token':token, u'arguments':arguments, u'addClass':PyJs_addClass_271_}, var)
        var.registers([u'token'])
        var.put(u'token', var.get(u'normalize$1')(var.get(u'token')))
        if var.get(u"this").callprop(u'hasClass', var.get(u'token')).neg():
            var.get(u"this").callprop(u'setAttribute', Js(u'class'), var.get(u"this").get(u'classList').callprop(u'concat', var.get(u'token')).callprop(u'join', Js(u' ')))
    PyJs_addClass_271_._set_name(u'addClass')
    var.get(u'Node$2').get(u'prototype').put(u'addClass', PyJs_addClass_271_)
    @Js
    def PyJs_hasClass_272_(token, this, arguments, var=var):
        var = Scope({u'this':this, u'hasClass':PyJs_hasClass_272_, u'token':token, u'arguments':arguments}, var)
        var.registers([u'token'])
        return PyJsStrictNeq(var.get(u"this").get(u'classList').callprop(u'indexOf', var.get(u'normalize$1')(var.get(u'token'))),(-Js(1.0)))
    PyJs_hasClass_272_._set_name(u'hasClass')
    var.get(u'Node$2').get(u'prototype').put(u'hasClass', PyJs_hasClass_272_)
    @Js
    def PyJs_removeClass_273_(token, this, arguments, var=var):
        var = Scope({u'this':this, u'token':token, u'removeClass':PyJs_removeClass_273_, u'arguments':arguments}, var)
        var.registers([u'token'])
        var.put(u'token', var.get(u'normalize$1')(var.get(u'token')))
        if var.get(u"this").callprop(u'hasClass', var.get(u'token')):
            @Js
            def PyJs_anonymous_274_(name, this, arguments, var=var):
                var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
                var.registers([u'name'])
                return PyJsStrictNeq(var.get(u'name'),var.get(u'token'))
            PyJs_anonymous_274_._set_name(u'anonymous')
            var.get(u"this").callprop(u'setAttribute', Js(u'class'), var.get(u"this").get(u'classList').callprop(u'filter', PyJs_anonymous_274_).callprop(u'join', Js(u' ')))
    PyJs_removeClass_273_._set_name(u'removeClass')
    var.get(u'Node$2').get(u'prototype').put(u'removeClass', PyJs_removeClass_273_)
    @Js
    def PyJs_appendChild_275_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'appendChild':PyJs_appendChild_275_}, var)
        var.registers([u'node'])
        var.get(u"this").callprop(u'insertAt', var.get(u'node'), var.get(u"this").get(u'children').get(u'length'))
    PyJs_appendChild_275_._set_name(u'appendChild')
    var.get(u'Node$2').get(u'prototype').put(u'appendChild', PyJs_appendChild_275_)
    @Js
    def PyJs_insertBefore_276_(newNode, refNode, this, arguments, var=var):
        var = Scope({u'refNode':refNode, u'newNode':newNode, u'this':this, u'arguments':arguments, u'insertBefore':PyJs_insertBefore_276_}, var)
        var.registers([u'refNode', u'newNode'])
        var.get(u"this").callprop(u'insertAt', var.get(u'newNode'), var.get(u"this").get(u'children').callprop(u'indexOf', var.get(u'refNode')))
    PyJs_insertBefore_276_._set_name(u'insertBefore')
    var.get(u'Node$2').get(u'prototype').put(u'insertBefore', PyJs_insertBefore_276_)
    @Js
    def PyJs_insertAt_277_(node, pos, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'insertAt':PyJs_insertAt_277_, u'pos':pos, u'arguments':arguments}, var)
        var.registers([u'node', u'prev', u'pos', u'next'])
        if ((var.get(u'pos')<Js(0.0)) or (var.get(u'pos')>var.get(u"this").get(u'children').get(u'length'))):
            PyJsTempException = JsToPyException(var.get(u'Error').create(Js(u'Unable to insert node: position is out of child list range')))
            raise PyJsTempException
        var.put(u'prev', var.get(u"this").get(u'children').get((var.get(u'pos')-Js(1.0))))
        var.put(u'next', var.get(u"this").get(u'children').get(var.get(u'pos')))
        var.get(u'node').callprop(u'remove')
        var.get(u'node').put(u'parent', var.get(u"this"))
        var.get(u"this").get(u'children').callprop(u'splice', var.get(u'pos'), Js(0.0), var.get(u'node'))
        if var.get(u'prev'):
            var.get(u'node').put(u'previous', var.get(u'prev'))
            var.get(u'prev').put(u'next', var.get(u'node'))
        if var.get(u'next'):
            var.get(u'node').put(u'next', var.get(u'next'))
            var.get(u'next').put(u'previous', var.get(u'node'))
    PyJs_insertAt_277_._set_name(u'insertAt')
    var.get(u'Node$2').get(u'prototype').put(u'insertAt', PyJs_insertAt_277_)
    @Js
    def PyJs_removeChild_278_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'removeChild':PyJs_removeChild_278_}, var)
        var.registers([u'node', u'ix'])
        var.put(u'ix', var.get(u"this").get(u'children').callprop(u'indexOf', var.get(u'node')))
        if PyJsStrictNeq(var.get(u'ix'),(-Js(1.0))):
            var.get(u"this").get(u'children').callprop(u'splice', var.get(u'ix'), Js(1.0))
            if var.get(u'node').get(u'previous'):
                var.get(u'node').get(u'previous').put(u'next', var.get(u'node').get(u'next'))
            if var.get(u'node').get(u'next'):
                var.get(u'node').get(u'next').put(u'previous', var.get(u'node').get(u'previous'))
            var.get(u'node').put(u'parent', var.get(u'node').put(u'next', var.get(u'node').put(u'previous', var.get(u"null"))))
    PyJs_removeChild_278_._set_name(u'removeChild')
    var.get(u'Node$2').get(u'prototype').put(u'removeChild', PyJs_removeChild_278_)
    @Js
    def PyJs_remove_279_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'remove':PyJs_remove_279_}, var)
        var.registers([])
        if var.get(u"this").get(u'parent'):
            var.get(u"this").get(u'parent').callprop(u'removeChild', var.get(u"this"))
    PyJs_remove_279_._set_name(u'remove')
    var.get(u'Node$2').get(u'prototype').put(u'remove', PyJs_remove_279_)
    @Js
    def PyJs_clone_280_(deep, this, arguments, var=var):
        var = Scope({u'this':this, u'clone':PyJs_clone_280_, u'arguments':arguments, u'deep':deep}, var)
        var.registers([u'clone', u'deep'])
        var.put(u'clone', var.get(u'Node$2').create(var.get(u"this").get(u'name')))
        var.get(u'clone').put(u'value', var.get(u"this").get(u'value'))
        var.get(u'clone').put(u'selfClosing', var.get(u"this").get(u'selfClosing'))
        if var.get(u"this").get(u'repeat'):
            PyJs_Object_281_ = Js({})
            var.get(u'clone').put(u'repeat', var.get(u'Object').callprop(u'assign', PyJs_Object_281_, var.get(u"this").get(u'repeat')))
        @Js
        def PyJs_anonymous_282_(attr, this, arguments, var=var):
            var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
            var.registers([u'attr'])
            return var.get(u'clone').callprop(u'setAttribute', var.get(u'attr').callprop(u'clone'))
        PyJs_anonymous_282_._set_name(u'anonymous')
        var.get(u"this").get(u'_attributes').callprop(u'forEach', PyJs_anonymous_282_)
        if var.get(u'deep'):
            @Js
            def PyJs_anonymous_283_(child, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'child':child}, var)
                var.registers([u'child'])
                return var.get(u'clone').callprop(u'appendChild', var.get(u'child').callprop(u'clone', var.get(u'true')))
            PyJs_anonymous_283_._set_name(u'anonymous')
            var.get(u"this").get(u'children').callprop(u'forEach', PyJs_anonymous_283_)
        return var.get(u'clone')
    PyJs_clone_280_._set_name(u'clone')
    var.get(u'Node$2').get(u'prototype').put(u'clone', PyJs_clone_280_)
    @Js
    def PyJs_walk_284_(fn, _level, this, arguments, var=var):
        var = Scope({u'this':this, u'_level':_level, u'arguments':arguments, u'fn':fn, u'walk':PyJs_walk_284_}, var)
        var.registers([u'_level', u'ctx', u'fn', u'next'])
        var.put(u'_level', (var.get(u'_level') or Js(0.0)))
        var.put(u'ctx', var.get(u"this").get(u'firstChild'))
        while var.get(u'ctx'):
            var.put(u'next', var.get(u'ctx').get(u'next'))
            if (PyJsStrictEq(var.get(u'fn')(var.get(u'ctx'), var.get(u'_level')),Js(False)) or PyJsStrictEq(var.get(u'ctx').callprop(u'walk', var.get(u'fn'), (var.get(u'_level')+Js(1.0))),Js(False))):
                return Js(False)
            var.put(u'ctx', var.get(u'next'))
    PyJs_walk_284_._set_name(u'walk')
    var.get(u'Node$2').get(u'prototype').put(u'walk', PyJs_walk_284_)
    @Js
    def PyJs_use_285_(fn, this, arguments, var=var):
        var = Scope({u'this':this, u'use':PyJs_use_285_, u'arguments':arguments, u'fn':fn}, var)
        var.registers([u'i', u'arguments$1', u'args', u'fn'])
        var.put(u'arguments$1', var.get(u'arguments'))
        var.put(u'args', Js([var.get(u"this")]))
        #for JS loop
        var.put(u'i', Js(1.0))
        while (var.get(u'i')<var.get(u'arguments').get(u'length')):
            try:
                var.get(u'args').callprop(u'push', var.get(u'arguments$1').get(var.get(u'i')))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        var.get(u'fn').callprop(u'apply', var.get(u"null"), var.get(u'args'))
        return var.get(u"this")
    PyJs_use_285_._set_name(u'use')
    var.get(u'Node$2').get(u'prototype').put(u'use', PyJs_use_285_)
    @Js
    def PyJs_toString_286_(this, arguments, var=var):
        var = Scope({u'this':this, u'toString':PyJs_toString_286_, u'arguments':arguments}, var)
        var.registers([u'out', u'attrs', u'this$1'])
        var.put(u'this$1', var.get(u"this"))
        @Js
        def PyJs_anonymous_287_(attr, this, arguments, var=var):
            var = Scope({u'this':this, u'attr':attr, u'arguments':arguments}, var)
            var.registers([u'opt', u'attr', u'out'])
            var.put(u'attr', var.get(u'this$1').callprop(u'getAttribute', var.get(u'attr').get(u'name')))
            var.put(u'opt', var.get(u'attr').get(u'options'))
            var.put(u'out', ((Js(u'')+(Js(u'!') if (var.get(u'opt') and var.get(u'opt').get(u'implied')) else Js(u'')))+(var.get(u'attr').get(u'name') or Js(u''))))
            if (var.get(u'opt') and var.get(u'opt').get(u'boolean')):
                var.put(u'out', Js(u'.'), u'+')
            else:
                if (var.get(u'attr').get(u'value')!=var.get(u"null")):
                    var.put(u'out', ((Js(u'="')+var.get(u'attr').get(u'value'))+Js(u'"')), u'+')
            return var.get(u'out')
        PyJs_anonymous_287_._set_name(u'anonymous')
        var.put(u'attrs', var.get(u"this").get(u'attributes').callprop(u'map', PyJs_anonymous_287_))
        var.put(u'out', (Js(u'')+(var.get(u"this").get(u'name') or Js(u''))))
        if var.get(u'attrs').get(u'length'):
            var.put(u'out', ((Js(u'[')+var.get(u'attrs').callprop(u'join', Js(u' ')))+Js(u']')), u'+')
        if (var.get(u"this").get(u'value')!=var.get(u"null")):
            var.put(u'out', ((Js(u'{')+var.get(u"this").get(u'value'))+Js(u'}')), u'+')
        if var.get(u"this").get(u'selfClosing'):
            var.put(u'out', Js(u'/'), u'+')
        if var.get(u"this").get(u'repeat'):
            var.put(u'out', (Js(u'*')+(var.get(u"this").get(u'repeat').get(u'count') if var.get(u"this").get(u'repeat').get(u'count') else Js(u''))), u'+')
            if (var.get(u"this").get(u'repeat').get(u'value')!=var.get(u"null")):
                var.put(u'out', (Js(u'@')+var.get(u"this").get(u'repeat').get(u'value')), u'+')
        return var.get(u'out')
    PyJs_toString_286_._set_name(u'toString')
    var.get(u'Node$2').get(u'prototype').put(u'toString', PyJs_toString_286_)
    var.get(u'Object').callprop(u'defineProperties', var.get(u'Node$2').get(u'prototype'), var.get(u'prototypeAccessors$3'))
    pass
    pass
    pass
    @Js
    def PyJs_CSSValue_288_(this, arguments, var=var):
        var = Scope({u'this':this, u'CSSValue':PyJs_CSSValue_288_, u'arguments':arguments}, var)
        var.registers([])
        var.get(u"this").put(u'type', Js(u'css-value'))
        var.get(u"this").put(u'value', Js([]))
    PyJs_CSSValue_288_._set_name(u'CSSValue')
    var.put(u'CSSValue', PyJs_CSSValue_288_)
    PyJs_Object_290_ = Js({})
    PyJs_Object_289_ = Js({u'size':PyJs_Object_290_})
    var.put(u'prototypeAccessors$2', PyJs_Object_289_)
    @Js
    def PyJs_anonymous_291_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'value').get(u'length')
    PyJs_anonymous_291_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$2').get(u'size').put(u'get', PyJs_anonymous_291_)
    @Js
    def PyJs_add_292_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'add':PyJs_add_292_, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        var.get(u"this").get(u'value').callprop(u'push', var.get(u'value'))
    PyJs_add_292_._set_name(u'add')
    var.get(u'CSSValue').get(u'prototype').put(u'add', PyJs_add_292_)
    @Js
    def PyJs_has_293_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'has':PyJs_has_293_, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return PyJsStrictNeq(var.get(u"this").get(u'value').callprop(u'indexOf', var.get(u'value')),(-Js(1.0)))
    PyJs_has_293_._set_name(u'has')
    var.get(u'CSSValue').get(u'prototype').put(u'has', PyJs_has_293_)
    @Js
    def PyJs_toString_294_(this, arguments, var=var):
        var = Scope({u'this':this, u'toString':PyJs_toString_294_, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'value').callprop(u'join', Js(u' '))
    PyJs_toString_294_._set_name(u'toString')
    var.get(u'CSSValue').get(u'prototype').put(u'toString', PyJs_toString_294_)
    var.get(u'Object').callprop(u'defineProperties', var.get(u'CSSValue').get(u'prototype'), var.get(u'prototypeAccessors$2'))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.put(u'HASH', Js(35.0))
    var.put(u'DOT', Js(46.0))
    @Js
    def PyJs_anonymous_295_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'base', u'stream'])
        if PyJsStrictEq(var.get(u'stream').callprop(u'peekCode'),var.get(u'HASH')):
            var.get(u'stream').put(u'start', (var.get(u'stream').put(u'pos',Js(var.get(u'stream').get(u'pos').to_number())+Js(1))-Js(1)))
            (var.get(u'stream').callprop(u'eat', Js(116.0)) or var.get(u'eatWhile')(var.get(u'stream'), var.get(u'isHex')))
            var.put(u'base', var.get(u'stream').callprop(u'current'))
            var.get(u'stream').put(u'start', var.get(u'stream').get(u'pos'))
            if (var.get(u'stream').callprop(u'eat', var.get(u'DOT')) and var.get(u'eatWhile')(var.get(u'stream'), var.get(u'isNumber$1')).neg()):
                PyJsTempException = JsToPyException(var.get(u'stream').callprop(u'error', Js(u'Unexpected character for alpha value of color')))
                raise PyJsTempException
            return var.get(u'Color').create(var.get(u'base'), var.get(u'stream').callprop(u'current'))
    PyJs_anonymous_295_._set_name(u'anonymous')
    var.put(u'consumeColor', PyJs_anonymous_295_)
    @Js
    def PyJs_Color_296_(value, alpha, this, arguments, var=var):
        var = Scope({u'this':this, u'alpha':alpha, u'Color':PyJs_Color_296_, u'arguments':arguments, u'value':value}, var)
        var.registers([u'alpha', u'r', u'b', u'value', u'g'])
        var.get(u"this").put(u'type', Js(u'color'))
        var.get(u"this").put(u'raw', var.get(u'value'))
        var.get(u"this").put(u'alpha', var.get(u'Number')((var.get(u'alpha') if ((var.get(u'alpha')!=var.get(u"null")) and PyJsStrictNeq(var.get(u'alpha'),Js(u''))) else Js(1.0))))
        var.put(u'value', var.get(u'value').callprop(u'slice', Js(1.0)))
        var.put(u'r', Js(0.0))
        var.put(u'g', Js(0.0))
        var.put(u'b', Js(0.0))
        if PyJsStrictEq(var.get(u'value'),Js(u't')):
            var.get(u"this").put(u'alpha', Js(0.0))
        else:
            while 1:
                SWITCHED = False
                CONDITION = (var.get(u'value').get(u'length'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                    SWITCHED = True
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                    SWITCHED = True
                    var.put(u'r', var.put(u'g', var.put(u'b', (var.get(u'value')+var.get(u'value')))))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                    SWITCHED = True
                    var.put(u'r', var.put(u'g', var.put(u'b', var.get(u'value'))))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                    SWITCHED = True
                    var.put(u'r', (var.get(u'value').get(u'0')+var.get(u'value').get(u'0')))
                    var.put(u'g', (var.get(u'value').get(u'1')+var.get(u'value').get(u'1')))
                    var.put(u'b', (var.get(u'value').get(u'2')+var.get(u'value').get(u'2')))
                    break
                if True:
                    SWITCHED = True
                    var.put(u'value', var.get(u'value'), u'+')
                    var.put(u'r', var.get(u'value').callprop(u'slice', Js(0.0), Js(2.0)))
                    var.put(u'g', var.get(u'value').callprop(u'slice', Js(2.0), Js(4.0)))
                    var.put(u'b', var.get(u'value').callprop(u'slice', Js(4.0), Js(6.0)))
                SWITCHED = True
                break
        var.get(u"this").put(u'r', var.get(u'parseInt')(var.get(u'r'), Js(16.0)))
        var.get(u"this").put(u'g', var.get(u'parseInt')(var.get(u'g'), Js(16.0)))
        var.get(u"this").put(u'b', var.get(u'parseInt')(var.get(u'b'), Js(16.0)))
    PyJs_Color_296_._set_name(u'Color')
    var.put(u'Color', PyJs_Color_296_)
    @Js
    def PyJs_InlineNonPyName_297_(short, this, arguments, var=var):
        var = Scope({u'this':this, u'toHex$1':PyJs_InlineNonPyName_297_, u'short':short, u'arguments':arguments}, var)
        var.registers([u'short', u'fn'])
        var.put(u'fn', (var.get(u'toShortHex') if (((var.get(u'short') and var.get(u'isShortHex')(var.get(u"this").get(u'r'))) and var.get(u'isShortHex')(var.get(u"this").get(u'g'))) and var.get(u'isShortHex')(var.get(u"this").get(u'b'))) else var.get(u'toHex')))
        return (((Js(u'#')+var.get(u'fn')(var.get(u"this").get(u'r')))+var.get(u'fn')(var.get(u"this").get(u'g')))+var.get(u'fn')(var.get(u"this").get(u'b')))
    PyJs_InlineNonPyName_297_._set_name(u'toHex$1')
    var.get(u'Color').get(u'prototype').put(u'toHex', PyJs_InlineNonPyName_297_)
    @Js
    def PyJs_toRGB_298_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'toRGB':PyJs_toRGB_298_}, var)
        var.registers([u'values'])
        var.put(u'values', Js([var.get(u"this").get(u'r'), var.get(u"this").get(u'g'), var.get(u"this").get(u'b')]))
        if PyJsStrictNeq(var.get(u"this").get(u'alpha'),Js(1.0)):
            var.get(u'values').callprop(u'push', var.get(u"this").get(u'alpha').callprop(u'toFixed', Js(8.0)).callprop(u'replace', JsRegExp(u'/\\.?0+$/'), Js(u'')))
        return ((((Js(u'rgb') if PyJsStrictEq(var.get(u'values').get(u'length'),Js(3.0)) else Js(u'rgba'))+Js(u'('))+var.get(u'values').callprop(u'join', Js(u', ')))+Js(u')'))
    PyJs_toRGB_298_._set_name(u'toRGB')
    var.get(u'Color').get(u'prototype').put(u'toRGB', PyJs_toRGB_298_)
    @Js
    def PyJs_toString_299_(short, this, arguments, var=var):
        var = Scope({u'this':this, u'short':short, u'toString':PyJs_toString_299_, u'arguments':arguments}, var)
        var.registers([u'short'])
        if (((var.get(u"this").get(u'r').neg() and var.get(u"this").get(u'g').neg()) and var.get(u"this").get(u'b').neg()) and var.get(u"this").get(u'alpha').neg()):
            return Js(u'transparent')
        return (var.get(u"this").callprop(u'toHex', var.get(u'short')) if PyJsStrictEq(var.get(u"this").get(u'alpha'),Js(1.0)) else var.get(u"this").callprop(u'toRGB'))
    PyJs_toString_299_._set_name(u'toString')
    var.get(u'Color').get(u'prototype').put(u'toString', PyJs_toString_299_)
    pass
    pass
    pass
    pass
    pass
    var.put(u'PERCENT', Js(37.0))
    var.put(u'DOT$1', Js(46.0))
    var.put(u'DASH$1', Js(45.0))
    @Js
    def PyJs_anonymous_300_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'num', u'stream'])
        var.get(u'stream').put(u'start', var.get(u'stream').get(u'pos'))
        if var.get(u'eatNumber')(var.get(u'stream')):
            var.put(u'num', var.get(u'stream').callprop(u'current'))
            var.get(u'stream').put(u'start', var.get(u'stream').get(u'pos'))
            (var.get(u'stream').callprop(u'eat', var.get(u'PERCENT')) or var.get(u'eatAlphaWord')(var.get(u'stream')))
            return var.get(u'NumericValue').create(var.get(u'num'), var.get(u'stream').callprop(u'current'))
    PyJs_anonymous_300_._set_name(u'anonymous')
    var.put(u'consumeNumericValue', PyJs_anonymous_300_)
    @Js
    def PyJs_NumericValue_301_(value, unit, this, arguments, var=var):
        var = Scope({u'this':this, u'NumericValue':PyJs_NumericValue_301_, u'unit':unit, u'value':value, u'arguments':arguments}, var)
        var.registers([u'unit', u'value'])
        var.get(u"this").put(u'type', Js(u'numeric'))
        var.get(u"this").put(u'value', var.get(u'Number')(var.get(u'value')))
        var.get(u"this").put(u'unit', (var.get(u'unit') or Js(u'')))
    PyJs_NumericValue_301_._set_name(u'NumericValue')
    var.put(u'NumericValue', PyJs_NumericValue_301_)
    @Js
    def PyJs_toString_302_(this, arguments, var=var):
        var = Scope({u'this':this, u'toString':PyJs_toString_302_, u'arguments':arguments}, var)
        var.registers([])
        return ((Js(u'')+var.get(u"this").get(u'value'))+var.get(u"this").get(u'unit'))
    PyJs_toString_302_._set_name(u'toString')
    var.get(u'NumericValue').get(u'prototype').put(u'toString', PyJs_toString_302_)
    pass
    var.put(u'DOLLAR$1', Js(36.0))
    var.put(u'DASH$2', Js(45.0))
    var.put(u'AT$1', Js(64.0))
    @Js
    def PyJs_anonymous_303_(stream, short, this, arguments, var=var):
        var = Scope({u'this':this, u'short':short, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'short', u'stream'])
        var.get(u'stream').put(u'start', var.get(u'stream').get(u'pos'))
        if (var.get(u'stream').callprop(u'eat', var.get(u'DOLLAR$1')) or var.get(u'stream').callprop(u'eat', var.get(u'AT$1'))):
            var.get(u'eatAlphaNumericWord')(var.get(u'stream'))
        else:
            if var.get(u'short'):
                var.get(u'eatAlphaWord')(var.get(u'stream'))
            else:
                var.get(u'eatKeyword')(var.get(u'stream'))
        return (var.get(u'Keyword').create(var.get(u'stream').callprop(u'current')) if PyJsStrictNeq(var.get(u'stream').get(u'start'),var.get(u'stream').get(u'pos')) else var.get(u"null"))
    PyJs_anonymous_303_._set_name(u'anonymous')
    var.put(u'consumeKeyword', PyJs_anonymous_303_)
    @Js
    def PyJs_Keyword_304_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'Keyword':PyJs_Keyword_304_, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        var.get(u"this").put(u'type', Js(u'keyword'))
        var.get(u"this").put(u'value', var.get(u'value'))
    PyJs_Keyword_304_._set_name(u'Keyword')
    var.put(u'Keyword', PyJs_Keyword_304_)
    @Js
    def PyJs_toString_305_(this, arguments, var=var):
        var = Scope({u'this':this, u'toString':PyJs_toString_305_, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'value')
    PyJs_toString_305_._set_name(u'toString')
    var.get(u'Keyword').get(u'prototype').put(u'toString', PyJs_toString_305_)
    pass
    pass
    var.put(u'SINGLE_QUOTE', Js(39.0))
    var.put(u'DOUBLE_QUOTE', Js(34.0))
    @Js
    def PyJs_anonymous_306_(stream, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'stream':stream}, var)
        var.registers([u'code', u'stream'])
        var.put(u'code', var.get(u'stream').callprop(u'peekCode'))
        if (PyJsStrictEq(var.get(u'code'),var.get(u'SINGLE_QUOTE')) or PyJsStrictEq(var.get(u'code'),var.get(u'DOUBLE_QUOTE'))):
            var.get(u'stream').put(u'start', (var.get(u'stream').put(u'pos',Js(var.get(u'stream').get(u'pos').to_number())+Js(1))-Js(1)))
            var.get(u'stream').callprop(u'eatQuoted', var.get(u'code'))
            return var.get(u'QuotedString').create(var.get(u'stream').callprop(u'current'))
    PyJs_anonymous_306_._set_name(u'anonymous')
    var.put(u'consumeQuoted$1', PyJs_anonymous_306_)
    @Js
    def PyJs_QuotedString_307_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value, u'QuotedString':PyJs_QuotedString_307_}, var)
        var.registers([u'value'])
        var.get(u"this").put(u'type', Js(u'string'))
        var.get(u"this").put(u'value', var.get(u'value'))
    PyJs_QuotedString_307_._set_name(u'QuotedString')
    var.put(u'QuotedString', PyJs_QuotedString_307_)
    @Js
    def PyJs_toString_308_(this, arguments, var=var):
        var = Scope({u'this':this, u'toString':PyJs_toString_308_, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'value')
    PyJs_toString_308_._set_name(u'toString')
    var.get(u'QuotedString').get(u'prototype').put(u'toString', PyJs_toString_308_)
    var.put(u'TAB', Js(9.0))
    var.put(u'SPACE', Js(32.0))
    var.put(u'LBRACE', Js(40.0))
    var.put(u'RBRACE', Js(41.0))
    var.put(u'COMMA', Js(44.0))
    pass
    pass
    pass
    @Js
    def PyJs_FunctionCall_309_(name, args, this, arguments, var=var):
        var = Scope({u'this':this, u'args':args, u'FunctionCall':PyJs_FunctionCall_309_, u'name':name, u'arguments':arguments}, var)
        var.registers([u'args', u'name'])
        var.get(u"this").put(u'type', Js(u'function'))
        var.get(u"this").put(u'name', var.get(u'name'))
        var.get(u"this").put(u'args', (var.get(u'args') or Js([])))
    PyJs_FunctionCall_309_._set_name(u'FunctionCall')
    var.put(u'FunctionCall', PyJs_FunctionCall_309_)
    @Js
    def PyJs_toString_310_(this, arguments, var=var):
        var = Scope({u'this':this, u'toString':PyJs_toString_310_, u'arguments':arguments}, var)
        var.registers([])
        return (((var.get(u"this").get(u'name')+Js(u'('))+var.get(u"this").get(u'args').callprop(u'join', Js(u', ')))+Js(u')'))
    PyJs_toString_310_._set_name(u'toString')
    var.get(u'FunctionCall').get(u'prototype').put(u'toString', PyJs_toString_310_)
    pass
    pass
    var.put(u'EXCL', Js(33.0))
    var.put(u'DOLLAR$1$1', Js(36.0))
    var.put(u'PLUS', Js(43.0))
    var.put(u'DASH', Js(45.0))
    var.put(u'AT', Js(64.0))
    @Js
    def PyJs_anonymous_311_(abbr, this, arguments, var=var):
        var = Scope({u'this':this, u'abbr':abbr, u'arguments':arguments}, var)
        var.registers([u'node', u'stream', u'i', u'args', u'node$1', u'abbr', u'root'])
        var.put(u'root', var.get(u'Node$2').create())
        var.put(u'stream', var.get(u'StreamReader').create(var.get(u'abbr')))
        pass
        while var.get(u'stream').callprop(u'eol').neg():
            var.put(u'node$1', var.get(u'Node$2').create(var.get(u'consumeIdent')(var.get(u'stream'))))
            var.get(u'node$1').put(u'value', var.get(u'consumeValue')(var.get(u'stream')))
            var.put(u'args', var.get(u'consumeArgumentList')(var.get(u'stream')))
            if var.get(u'args'):
                #for JS loop
                var.put(u'i', Js(0.0))
                while (var.get(u'i')<var.get(u'args').get(u'length')):
                    try:
                        var.get(u'node$1').callprop(u'setAttribute', var.get(u'String')(var.get(u'i')), var.get(u'args').get(var.get(u'i')))
                    finally:
                            (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
            if var.get(u'stream').callprop(u'eat', var.get(u'EXCL')):
                var.get(u'node$1').get(u'value').callprop(u'add', Js(u'!'))
            var.get(u'root').callprop(u'appendChild', var.get(u'node$1'))
            if var.get(u'stream').callprop(u'eat', var.get(u'PLUS')).neg():
                break
        if var.get(u'stream').callprop(u'eol').neg():
            PyJsTempException = JsToPyException(var.get(u'stream').callprop(u'error', Js(u'Unexpected character')))
            raise PyJsTempException
        return var.get(u'root')
    PyJs_anonymous_311_._set_name(u'anonymous')
    var.put(u'index$4', PyJs_anonymous_311_)
    pass
    pass
    pass
    pass
    var.put(u'DASH$1$1', Js(45.0))
    @Js
    def PyJs_anonymous_312_(abbr, string, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'abbr':abbr, u'string':string}, var)
        var.registers([u'abbrLength', u'string', u'i', u'j', u'acronym', u'ch1', u'ch2', u'score', u'abbr', u'stringLength', u'found'])
        if PyJsStrictEq(var.get(u'abbr'),var.get(u'string')):
            return Js(1.0)
        if (var.get(u'string').neg() or PyJsStrictNeq(var.get(u'abbr').callprop(u'charCodeAt', Js(0.0)),var.get(u'string').callprop(u'charCodeAt', Js(0.0)))):
            return Js(0.0)
        var.put(u'abbrLength', var.get(u'abbr').get(u'length'))
        var.put(u'stringLength', var.get(u'string').get(u'length'))
        var.put(u'i', Js(1.0))
        var.put(u'j', Js(1.0))
        var.put(u'score', var.get(u'stringLength'))
        pass
        while (var.get(u'i')<var.get(u'abbrLength')):
            var.put(u'ch1', var.get(u'abbr').callprop(u'charCodeAt', var.get(u'i')))
            var.put(u'found', Js(False))
            var.put(u'acronym', Js(False))
            while (var.get(u'j')<var.get(u'stringLength')):
                var.put(u'ch2', var.get(u'string').callprop(u'charCodeAt', var.get(u'j')))
                if PyJsStrictEq(var.get(u'ch1'),var.get(u'ch2')):
                    var.put(u'found', var.get(u'true'))
                    var.put(u'score', ((var.get(u'stringLength')-var.get(u'j'))*(Js(2.0) if var.get(u'acronym') else Js(1.0))), u'+')
                    break
                var.put(u'acronym', PyJsStrictEq(var.get(u'ch2'),var.get(u'DASH$1$1')))
                (var.put(u'j',Js(var.get(u'j').to_number())+Js(1))-Js(1))
            if var.get(u'found').neg():
                break
            (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return (var.get(u'score') and ((var.get(u'score')*(var.get(u'i')/var.get(u'abbrLength')))/var.get(u'sum')(var.get(u'stringLength'))))
    PyJs_anonymous_312_._set_name(u'anonymous')
    var.put(u'stringScore', PyJs_anonymous_312_)
    pass
    var.put(u'reProperty', JsRegExp(u'/^([a-z\\-]+)(?:\\s*:\\s*([^\\n\\r]+))?$/'))
    var.put(u'DASH$1$2', Js(45.0))
    @Js
    def PyJs_anonymous_313_(snippets, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'snippets':snippets}, var)
        var.registers([u'snippets'])
        @Js
        def PyJs_anonymous_314_(snippet, this, arguments, var=var):
            var = Scope({u'snippet':snippet, u'this':this, u'arguments':arguments}, var)
            var.registers([u'snippet'])
            return var.get(u'CSSSnippet').create(var.get(u'snippet').get(u'key'), var.get(u'snippet').get(u'value'))
        PyJs_anonymous_314_._set_name(u'anonymous')
        return var.get(u'nest')(var.get(u'snippets').callprop(u'map', PyJs_anonymous_314_))
    PyJs_anonymous_313_._set_name(u'anonymous')
    var.put(u'cssSnippets', PyJs_anonymous_313_)
    @Js
    def PyJs_CSSSnippet_315_(key, value, this, arguments, var=var):
        var = Scope({u'this':this, u'CSSSnippet':PyJs_CSSSnippet_315_, u'value':value, u'key':key, u'arguments':arguments}, var)
        var.registers([u'm', u'value', u'key'])
        var.get(u"this").put(u'key', var.get(u'key'))
        var.get(u"this").put(u'value', var.get(u'value'))
        var.get(u"this").put(u'property', var.get(u"null"))
        var.put(u'm', (var.get(u'value') and var.get(u'value').callprop(u'match', var.get(u'reProperty'))))
        if var.get(u'm'):
            var.get(u"this").put(u'property', var.get(u'm').get(u'1'))
            var.get(u"this").put(u'value', var.get(u'm').get(u'2'))
        var.get(u"this").put(u'dependencies', Js([]))
    PyJs_CSSSnippet_315_._set_name(u'CSSSnippet')
    var.put(u'CSSSnippet', PyJs_CSSSnippet_315_)
    PyJs_Object_317_ = Js({})
    PyJs_Object_316_ = Js({u'defaulValue':PyJs_Object_317_})
    var.put(u'prototypeAccessors$4', PyJs_Object_316_)
    @Js
    def PyJs_addDependency_318_(dep, this, arguments, var=var):
        var = Scope({u'dep':dep, u'this':this, u'arguments':arguments, u'addDependency':PyJs_addDependency_318_}, var)
        var.registers([u'dep'])
        var.get(u"this").get(u'dependencies').callprop(u'push', var.get(u'dep'))
    PyJs_addDependency_318_._set_name(u'addDependency')
    var.get(u'CSSSnippet').get(u'prototype').put(u'addDependency', PyJs_addDependency_318_)
    @Js
    def PyJs_anonymous_319_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return (var.get(u'splitValue')(var.get(u"this").get(u'value')).get(u'0') if (var.get(u"this").get(u'value')!=var.get(u"null")) else var.get(u"null"))
    PyJs_anonymous_319_._set_name(u'anonymous')
    var.get(u'prototypeAccessors$4').get(u'defaulValue').put(u'get', PyJs_anonymous_319_)
    @Js
    def PyJs_keywords_320_(this, arguments, var=var):
        var = Scope({u'this':this, u'keywords':PyJs_keywords_320_, u'arguments':arguments}, var)
        var.registers([u'i', u'j', u'item', u'candidates', u'deps', u'keywords', u'j$1', u'stack'])
        var.put(u'stack', Js([]))
        var.put(u'keywords', var.get(u'Set').create())
        var.put(u'i', Js(0.0))
        if var.get(u"this").get(u'property'):
            var.get(u'stack').callprop(u'push', var.get(u"this"))
        while (var.get(u'i')<var.get(u'stack').get(u'length')):
            var.put(u'item', var.get(u'stack').get((var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))))
            if var.get(u'item').get(u'value'):
                var.put(u'candidates', var.get(u'splitValue')(var.get(u'item').get(u'value')).callprop(u'filter', var.get(u'isKeyword$1')))
                #for JS loop
                var.put(u'j', Js(0.0))
                while (var.get(u'j')<var.get(u'candidates').get(u'length')):
                    try:
                        var.get(u'keywords').callprop(u'add', var.get(u'candidates').get(var.get(u'j')).callprop(u'trim'))
                    finally:
                            (var.put(u'j',Js(var.get(u'j').to_number())+Js(1))-Js(1))
                #for JS loop
                var.put(u'j$1', Js(0.0))
                var.put(u'deps', var.get(u'item').get(u'dependencies'))
                while (var.get(u'j$1')<var.get(u'deps').get(u'length')):
                    try:
                        if PyJsStrictEq(var.get(u'stack').callprop(u'indexOf', var.get(u'deps').get(var.get(u'j$1'))),(-Js(1.0))):
                            var.get(u'stack').callprop(u'push', var.get(u'deps').get(var.get(u'j$1')))
                    finally:
                            (var.put(u'j$1',Js(var.get(u'j$1').to_number())+Js(1))-Js(1))
        return var.get(u'Array').callprop(u'from', var.get(u'keywords'))
    PyJs_keywords_320_._set_name(u'keywords')
    var.get(u'CSSSnippet').get(u'prototype').put(u'keywords', PyJs_keywords_320_)
    var.get(u'Object').callprop(u'defineProperties', var.get(u'CSSSnippet').get(u'prototype'), var.get(u'prototypeAccessors$4'))
    pass
    pass
    pass
    pass
    var.put(u'globalKeywords', Js([Js(u'auto'), Js(u'inherit')]))
    var.put(u'unitlessProperties', Js([Js(u'z-index'), Js(u'line-height'), Js(u'opacity'), Js(u'font-weight'), Js(u'zoom')]))
    PyJs_Object_321_ = Js({u'e':Js(u'em'),u'p':Js(u'%'),u'x':Js(u'ex'),u'r':Js(u'rem')})
    var.put(u'unitAliases', PyJs_Object_321_)
    @Js
    def PyJs_anonymous_322_(tree, registry, this, arguments, var=var):
        var = Scope({u'this':this, u'tree':tree, u'registry':registry, u'arguments':arguments}, var)
        var.registers([u'tree', u'registry', u'snippets'])
        PyJs_Object_323_ = Js({u'type':Js(u'string')})
        var.put(u'snippets', var.get(u'cssSnippets')(var.get(u'registry').callprop(u'all', PyJs_Object_323_)))
        @Js
        def PyJs_anonymous_324_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            return var.get(u'resolveNode$1')(var.get(u'node'), var.get(u'snippets'))
        PyJs_anonymous_324_._set_name(u'anonymous')
        var.get(u'tree').callprop(u'walk', PyJs_anonymous_324_)
        return var.get(u'tree')
    PyJs_anonymous_322_._set_name(u'anonymous')
    var.put(u'index$5', PyJs_anonymous_322_)
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    PyJs_Object_326_ = Js({u'between':Js(u': '),u'after':Js(u';')})
    PyJs_Object_325_ = Js({u'shortHex':var.get(u'true'),u'format':PyJs_Object_326_})
    var.put(u'defaultOptions$3', PyJs_Object_325_)
    pass
    pass
    pass
    pass
    PyJs_Object_332_ = Js({u'between':Js(u': '),u'after':Js(u';')})
    PyJs_Object_333_ = Js({u'between':Js(u': '),u'after':Js(u'')})
    PyJs_Object_334_ = Js({u'between':Js(u' '),u'after':Js(u'')})
    PyJs_Object_331_ = Js({u'css':PyJs_Object_332_,u'scss':Js(u'css'),u'less':Js(u'css'),u'sass':PyJs_Object_333_,u'stylus':PyJs_Object_334_})
    var.put(u'syntaxFormat', PyJs_Object_331_)
    @Js
    def PyJs_anonymous_335_(tree, profile, syntax, options, this, arguments, var=var):
        var = Scope({u'profile':profile, u'arguments':arguments, u'this':this, u'tree':tree, u'options':options, u'syntax':syntax}, var)
        var.registers([u'profile', u'tree', u'options', u'syntax'])
        if PyJsStrictEq(var.get(u'syntax',throw=False).typeof(),Js(u'object')):
            var.put(u'options', var.get(u'syntax'))
            var.put(u'syntax', var.get(u"null"))
        if var.get(u'supports$1')(var.get(u'syntax')).neg():
            var.put(u'syntax', Js(u'css'))
        PyJs_Object_336_ = Js({})
        PyJs_Object_337_ = Js({u'format':var.get(u'getFormat')(var.get(u'syntax'), var.get(u'options'))})
        var.put(u'options', var.get(u'Object').callprop(u'assign', PyJs_Object_336_, var.get(u'options'), PyJs_Object_337_))
        return var.get(u'css')(var.get(u'tree'), var.get(u'profile'), var.get(u'options'))
    PyJs_anonymous_335_._set_name(u'anonymous')
    var.put(u'index$6', PyJs_anonymous_335_)
    pass
    pass
    pass
    pass
    PyJs_Object_340_ = Js({u'a':Js(u'a[href]'),u'a:link':Js(u"a[href='http://${0}']"),u'a:mail':Js(u"a[href='mailto:${0}']"),u'abbr':Js(u'abbr[title]'),u'acr|acronym':Js(u'acronym[title]'),u'base':Js(u'base[href]/'),u'basefont':Js(u'basefont/'),u'br':Js(u'br/'),u'frame':Js(u'frame/'),u'hr':Js(u'hr/'),u'bdo':Js(u'bdo[dir]'),u'bdo:r':Js(u'bdo[dir=rtl]'),u'bdo:l':Js(u'bdo[dir=ltr]'),u'col':Js(u'col/'),u'link':Js(u'link[rel=stylesheet href]/'),u'link:css':Js(u"link[href='${1:style}.css']"),u'link:print':Js(u"link[href='${1:print}.css' media=print]"),u'link:favicon':Js(u"link[rel='shortcut icon' type=image/x-icon href='${1:favicon.ico}']"),u'link:touch':Js(u"link[rel=apple-touch-icon href='${1:favicon.png}']"),u'link:rss':Js(u"link[rel=alternate type=application/rss+xml title=RSS href='${1:rss.xml}']"),u'link:atom':Js(u"link[rel=alternate type=application/atom+xml title=Atom href='${1:atom.xml}']"),u'link:im|link:import':Js(u"link[rel=import href='${1:component}.html']"),u'meta':Js(u'meta/'),u'meta:utf':Js(u"meta[http-equiv=Content-Type content='text/html;charset=UTF-8']"),u'meta:vp':Js(u"meta[name=viewport content='width=${1:device-width}, initial-scale=${2:1.0}']"),u'meta:compat':Js(u"meta[http-equiv=X-UA-Compatible content='${1:IE=7}']"),u'meta:edge':Js(u"meta:compat[content='${1:ie=edge}']"),u'meta:redirect':Js(u"meta[http-equiv=refresh content='0; url=${1:http://example.com}']"),u'style':Js(u'style'),u'script':Js(u'script[!src]'),u'script:src':Js(u'script[src]'),u'img':Js(u'img[src alt]/'),u'img:s|img:srcset':Js(u'img[srcset src alt]'),u'img:z|img:sizes':Js(u'img[sizes srcset src alt]'),u'picture':Js(u'picture'),u'src|source':Js(u'source/'),u'src:sc|source:src':Js(u'source[src type]'),u'src:s|source:srcset':Js(u'source[srcset]'),u'src:t|source:type':Js(u"source[srcset type='${1:image/}']"),u'src:z|source:sizes':Js(u'source[sizes srcset]'),u'src:m|source:media':Js(u"source[media='(${1:min-width: })' srcset]"),u'src:mt|source:media:type':Js(u"source:media[type='${2:image/}']"),u'src:mz|source:media:sizes':Js(u'source:media[sizes srcset]'),u'src:zt|source:sizes:type':Js(u"source[sizes srcset type='${1:image/}']"),u'iframe':Js(u'iframe[src frameborder=0]'),u'embed':Js(u'embed[src type]/'),u'object':Js(u'object[data type]'),u'param':Js(u'param[name value]/'),u'map':Js(u'map[name]'),u'area':Js(u'area[shape coords href alt]/'),u'area:d':Js(u'area[shape=default]'),u'area:c':Js(u'area[shape=circle]'),u'area:r':Js(u'area[shape=rect]'),u'area:p':Js(u'area[shape=poly]'),u'form':Js(u'form[action]'),u'form:get':Js(u'form[method=get]'),u'form:post':Js(u'form[method=post]'),u'label':Js(u'label[for]'),u'input':Js(u'input[type=${1:text}]/'),u'inp':Js(u'input[name=${1} id=${1}]'),u'input:h|input:hidden':Js(u'input[type=hidden name]'),u'input:t|input:text':Js(u'inp'),u'input:search':Js(u'inp[type=search]'),u'input:email':Js(u'inp[type=email]'),u'input:url':Js(u'inp[type=url]'),u'input:p|input:password':Js(u'inp[type=password]'),u'input:datetime':Js(u'inp[type=datetime]'),u'input:date':Js(u'inp[type=date]'),u'input:datetime-local':Js(u'inp[type=datetime-local]'),u'input:month':Js(u'inp[type=month]'),u'input:week':Js(u'inp[type=week]'),u'input:time':Js(u'inp[type=time]'),u'input:tel':Js(u'inp[type=tel]'),u'input:number':Js(u'inp[type=number]'),u'input:color':Js(u'inp[type=color]'),u'input:c|input:checkbox':Js(u'inp[type=checkbox]'),u'input:r|input:radio':Js(u'inp[type=radio]'),u'input:range':Js(u'inp[type=range]'),u'input:f|input:file':Js(u'inp[type=file]'),u'input:s|input:submit':Js(u'input[type=submit value]'),u'input:i|input:image':Js(u'input[type=image src alt]'),u'input:b|input:button':Js(u'input[type=button value]'),u'input:reset':Js(u'input:button[type=reset]'),u'isindex':Js(u'isindex/'),u'select':Js(u'select[name=${1} id=${1}]'),u'select:d|select:disabled':Js(u'select[disabled.]'),u'opt|option':Js(u'option[value]'),u'textarea':Js(u'textarea[name=${1} id=${1} cols=${2:30} rows=${3:10}]'),u'marquee':Js(u'marquee[behavior direction]'),u'menu:c|menu:context':Js(u'menu[type=context]'),u'menu:t|menu:toolbar':Js(u'menu[type=toolbar]'),u'video':Js(u'video[src]'),u'audio':Js(u'audio[src]'),u'html:xml':Js(u'html[xmlns=http://www.w3.org/1999/xhtml]'),u'keygen':Js(u'keygen/'),u'command':Js(u'command/'),u'btn:s|button:s|button:submit':Js(u'button[type=submit]'),u'btn:r|button:r|button:reset':Js(u'button[type=reset]'),u'btn:d|button:d|button:disabled':Js(u'button[disabled.]'),u'fst:d|fset:d|fieldset:d|fieldset:disabled':Js(u'fieldset[disabled.]'),u'bq':Js(u'blockquote'),u'fig':Js(u'figure'),u'figc':Js(u'figcaption'),u'pic':Js(u'picture'),u'ifr':Js(u'iframe'),u'emb':Js(u'embed'),u'obj':Js(u'object'),u'cap':Js(u'caption'),u'colg':Js(u'colgroup'),u'fst':Js(u'fieldset'),u'btn':Js(u'button'),u'optg':Js(u'optgroup'),u'tarea':Js(u'textarea'),u'leg':Js(u'legend'),u'sect':Js(u'section'),u'art':Js(u'article'),u'hdr':Js(u'header'),u'ftr':Js(u'footer'),u'adr':Js(u'address'),u'dlg':Js(u'dialog'),u'str':Js(u'strong'),u'prog':Js(u'progress'),u'mn':Js(u'main'),u'tem':Js(u'template'),u'fset':Js(u'fieldset'),u'datag':Js(u'datagrid'),u'datal':Js(u'datalist'),u'kg':Js(u'keygen'),u'out':Js(u'output'),u'det':Js(u'details'),u'cmd':Js(u'command'),u'ri:d|ri:dpr':Js(u'img:s'),u'ri:v|ri:viewport':Js(u'img:z'),u'ri:a|ri:art':Js(u'pic>src:m+img'),u'ri:t|ri:type':Js(u'pic>src:t+img'),u'!!!':Js(u'{<!DOCTYPE html>}'),u'doc':Js(u'html[lang=${lang}]>(head>meta[charset=${charset}]+meta:vp+meta:edge+title{${1:Document}})+body'),u'!|html:5':Js(u'!!!+doc'),u'c':Js(u'{<!-- ${0} -->}'),u'cc:ie':Js(u'{<!--[if IE]>${0}<![endif]-->}'),u'cc:noie':Js(u'{<!--[if !IE]><!-->${0}<!--<![endif]-->}')})
    var.put(u'html$1', PyJs_Object_340_)
    PyJs_Object_341_ = Js({u'@f':Js(u'@font-face {\n\tfont-family: ${1};\n\tsrc: url(${1});\n}'),u'@ff':Js(u"@font-face {\n\tfont-family: '${1:FontName}';\n\tsrc: url('${2:FileName}.eot');\n\tsrc: url('${2:FileName}.eot?#iefix') format('embedded-opentype'),\n\t\t url('${2:FileName}.woff') format('woff'),\n\t\t url('${2:FileName}.ttf') format('truetype'),\n\t\t url('${2:FileName}.svg#${1:FontName}') format('svg');\n\tfont-style: ${3:normal};\n\tfont-weight: ${4:normal};\n}"),u'@i|@import':Js(u'@import url(${0});'),u'@kf':Js(u'@keyframes ${1:identifier} {\n\t${2}\n}'),u'@m|@media':Js(u'@media ${1:screen} {\n\t${0}\n}'),u'ac':Js(u'align-content:flex-start|flex-end|center|space-between|space-around|stretch'),u'ai':Js(u'align-items:flex-start|flex-end|center|baseline|stretch'),u'anim':Js(u'animation:${1:name} ${2:duration} ${3:timing-function} ${4:delay} ${5:iteration-count} ${6:direction} ${7:fill-mode}'),u'animdel':Js(u'animation-delay:${1:time}'),u'animdir':Js(u'animation-direction:normal|reverse|alternate|alternate-reverse'),u'animdur':Js(u'animation-duration:${1:0}s'),u'animfm':Js(u'animation-fill-mode:both|forwards|backwards'),u'animic':Js(u'animation-iteration-count:1|infinite'),u'animn':Js(u'animation-name'),u'animps':Js(u'animation-play-state:running|paused'),u'animtf':Js(u'animation-timing-function:linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(${1:0.1}, ${2:0.7}, ${3:1.0}, ${3:0.1})'),u'ap':Js(u'appearance:none'),u'as':Js(u'align-self:auto|flex-start|flex-end|center|baseline|stretch'),u'b':Js(u'bottom'),u'bd':Js(u'border:${1:1px} ${2:solid} ${3:#000}'),u'bdb':Js(u'border-bottom:${1:1px} ${2:solid} ${3:#000}'),u'bdbc':Js(u'border-bottom-color:#${1:000}'),u'bdbi':Js(u'border-bottom-image:url(${0})'),u'bdbk':Js(u'border-break:close'),u'bdbli':Js(u'border-bottom-left-image:url(${0})|continue'),u'bdblrs':Js(u'border-bottom-left-radius'),u'bdbri':Js(u'border-bottom-right-image:url(${0})|continue'),u'bdbrrs':Js(u'border-bottom-right-radius'),u'bdbs':Js(u'border-bottom-style'),u'bdbw':Js(u'border-bottom-width'),u'bdc':Js(u'border-color:#${1:000}'),u'bdci':Js(u'border-corner-image:url(${0})|continue'),u'bdcl':Js(u'border-collapse:collapse|separate'),u'bdf':Js(u'border-fit:repeat|clip|scale|stretch|overwrite|overflow|space'),u'bdi':Js(u'border-image:url(${0})'),u'bdl':Js(u'border-left:${1:1px} ${2:solid} ${3:#000}'),u'bdlc':Js(u'border-left-color:#${1:000}'),u'bdlen':Js(u'border-length'),u'bdli':Js(u'border-left-image:url(${0})'),u'bdls':Js(u'border-left-style'),u'bdlw':Js(u'border-left-width'),u'bdr':Js(u'border-right:${1:1px} ${2:solid} ${3:#000}'),u'bdrc':Js(u'border-right-color:#${1:000}'),u'bdri':Js(u'border-right-image:url(${0})'),u'bdrs':Js(u'border-radius'),u'bdrst':Js(u'border-right-style'),u'bdrw':Js(u'border-right-width'),u'bds':Js(u'border-style:hidden|dotted|dashed|solid|double|dot-dash|dot-dot-dash|wave|groove|ridge|inset|outset'),u'bdsp':Js(u'border-spacing'),u'bdt':Js(u'border-top:${1:1px} ${2:solid} ${3:#000}'),u'bdtc':Js(u'border-top-color:#${1:000}'),u'bdti':Js(u'border-top-image:url(${0})'),u'bdtli':Js(u'border-top-left-image:url(${0})|continue'),u'bdtlrs':Js(u'border-top-left-radius'),u'bdtri':Js(u'border-top-right-image:url(${0})|continue'),u'bdtrrs':Js(u'border-top-right-radius'),u'bdts':Js(u'border-top-style'),u'bdtw':Js(u'border-top-width'),u'bdw':Js(u'border-width'),u'bfv':Js(u'backface-visibility:hidden|visible'),u'bg':Js(u'background:#${1:000}'),u'bga':Js(u'background-attachment:fixed|scroll'),u'bgbk':Js(u'background-break:bounding-box|each-box|continuous'),u'bgc':Js(u'background-color:#${1:fff}'),u'bgcp':Js(u'background-clip:padding-box|border-box|content-box|no-clip'),u'bgi':Js(u'background-image:url(${0})'),u'bgo':Js(u'background-origin:padding-box|border-box|content-box'),u'bgp':Js(u'background-position:${1:0} ${2:0}'),u'bgpx':Js(u'background-position-x'),u'bgpy':Js(u'background-position-y'),u'bgr':Js(u'background-repeat:no-repeat|repeat-x|repeat-y|space|round'),u'bgsz':Js(u'background-size:contain|cover'),u'bxsh':Js(u'box-shadow:${1:inset }${2:hoff} ${3:voff} ${4:blur} ${5:color}|none'),u'bxz':Js(u'box-sizing:border-box|content-box|border-box'),u'c':Js(u'color:#${1:000}'),u'cl':Js(u'clear:both|left|right|none'),u'cm':Js(u'/* ${0} */'),u'cnt':Js(u"content:'${0}'|normal|open-quote|no-open-quote|close-quote|no-close-quote|attr(${0})|counter(${0})|counters({$0})"),u'coi':Js(u'counter-increment'),u'colm':Js(u'columns'),u'colmc':Js(u'column-count'),u'colmf':Js(u'column-fill'),u'colmg':Js(u'column-gap'),u'colmr':Js(u'column-rule'),u'colmrc':Js(u'column-rule-color'),u'colmrs':Js(u'column-rule-style'),u'colmrw':Js(u'column-rule-width'),u'colms':Js(u'column-span'),u'colmw':Js(u'column-width'),u'cor':Js(u'counter-reset'),u'cp':Js(u'clip:auto|rect(${1:top} ${2:right} ${3:bottom} ${4:left})'),u'cps':Js(u'caption-side:top|bottom'),u'cur':Js(u'cursor:pointer|auto|default|crosshair|hand|help|move|pointer|text'),u'd':Js(u'display:block|none|flex|inline-flex|inline|inline-block|list-item|run-in|compact|table|inline-table|table-caption|table-column|table-column-group|table-header-group|table-footer-group|table-row|table-row-group|table-cell|ruby|ruby-base|ruby-base-group|ruby-text|ruby-text-group'),u'ec':Js(u'empty-cells:show|hide'),u'f':Js(u'font:${1:1em} ${2:sans-serif}'),u'fef':Js(u'font-effect:none|engrave|emboss|outline'),u'fem':Js(u'font-emphasize'),u'femp':Js(u'font-emphasize-position:before|after'),u'fems':Js(u'font-emphasize-style:none|accent|dot|circle|disc'),u'ff':Js(u'font-family:serif|sans-serif|cursive|fantasy|monospace'),u'fl':Js(u'float:left|right|none'),u'fs':Js(u'font-style:italic|normal|oblique'),u'fsm':Js(u'font-smoothing:antialiased|subpixel-antialiased|none'),u'fst':Js(u'font-stretch:normal|ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded'),u'fv':Js(u'font-variant:normal|small-caps'),u'fw':Js(u'font-weight:normal|bold|bolder|lighter'),u'fx':Js(u'flex'),u'fxb':Js(u'flex-basis'),u'fxd':Js(u'flex-direction:row|row-reverse|column|column-reverse'),u'fxf':Js(u'flex-flow'),u'fxg':Js(u'flex-grow'),u'fxsh':Js(u'flex-shrink'),u'fxw':Js(u'flex-wrap:nowrap|wrap|wrap-reverse'),u'fz':Js(u'font-size'),u'fza':Js(u'font-size-adjust'),u'h':Js(u'height'),u'jc':Js(u'justify-content:flex-start|flex-end|center|space-between|space-around'),u'l':Js(u'left'),u'lg':Js(u'background-image:linear-gradient(${1})'),u'lh':Js(u'line-height'),u'lis':Js(u'list-style'),u'lisi':Js(u'list-style-image'),u'lisp':Js(u'list-style-position:inside|outside'),u'list':Js(u'list-style-type:disc|circle|square|decimal|decimal-leading-zero|lower-roman|upper-roman'),u'lts':Js(u'letter-spacing:normal'),u'm':Js(u'margin'),u'mah':Js(u'max-height'),u'mar':Js(u'max-resolution'),u'maw':Js(u'max-width'),u'mb':Js(u'margin-bottom'),u'mih':Js(u'min-height'),u'mir':Js(u'min-resolution'),u'miw':Js(u'min-width'),u'ml':Js(u'margin-left'),u'mr':Js(u'margin-right'),u'mt':Js(u'margin-top'),u'ol':Js(u'outline'),u'olc':Js(u'outline-color:#${1:000}|invert'),u'olo':Js(u'outline-offset'),u'ols':Js(u'outline-style:none|dotted|dashed|solid|double|groove|ridge|inset|outset'),u'olw':Js(u'outline-width|thin|medium|thick'),u'op':Js(u'opacity'),u'ord':Js(u'order'),u'ori':Js(u'orientation:landscape|portrait'),u'orp':Js(u'orphans'),u'ov':Js(u'overflow:hidden|visible|hidden|scroll|auto'),u'ovs':Js(u'overflow-style:scrollbar|auto|scrollbar|panner|move|marquee'),u'ovx':Js(u'overflow-x:hidden|visible|hidden|scroll|auto'),u'ovy':Js(u'overflow-y:hidden|visible|hidden|scroll|auto'),u'p':Js(u'padding'),u'pb':Js(u'padding-bottom'),u'pgba':Js(u'page-break-after:auto|always|left|right'),u'pgbb':Js(u'page-break-before:auto|always|left|right'),u'pgbi':Js(u'page-break-inside:auto|avoid'),u'pl':Js(u'padding-left'),u'pos':Js(u'position:relative|absolute|relative|fixed|static'),u'pr':Js(u'padding-right'),u'pt':Js(u'padding-top'),u'q':Js(u'quotes'),u'qen':Js(u"quotes:'\\201C' '\\201D' '\\2018' '\\2019'"),u'qru':Js(u"quotes:'\\00AB' '\\00BB' '\\201E' '\\201C'"),u'r':Js(u'right'),u'rsz':Js(u'resize:none|both|horizontal|vertical'),u't':Js(u'top'),u'ta':Js(u'text-align:left|center|right|justify'),u'tal':Js(u'text-align-last:left|center|right'),u'tbl':Js(u'table-layout:fixed'),u'td':Js(u'text-decoration:none|underline|overline|line-through'),u'te':Js(u'text-emphasis:none|accent|dot|circle|disc|before|after'),u'th':Js(u'text-height:auto|font-size|text-size|max-size'),u'ti':Js(u'text-indent'),u'tj':Js(u'text-justify:auto|inter-word|inter-ideograph|inter-cluster|distribute|kashida|tibetan'),u'to':Js(u'text-outline:${1:0} ${2:0} ${3:#000}'),u'tov':Js(u'text-overflow:ellipsis|clip'),u'tr':Js(u'text-replace'),u'trf':Js(u'transform:${1}|skewX(${1:angle})|skewY(${1:angle})|scale(${1:x}, ${2:y})|scaleX(${1:x})|scaleY(${1:y})|scaleZ(${1:z})|scale3d(${1:x}, ${2:y}, ${3:z})|rotate(${1:angle})|rotateX(${1:angle})|rotateY(${1:angle})|rotateZ(${1:angle})|translate(${1:x}, ${2:y})|translateX(${1:x})|translateY(${1:y})|translateZ(${1:z})|translate3d(${1:tx}, ${2:ty}, ${3:tz})'),u'trfo':Js(u'transform-origin'),u'trfs':Js(u'transform-style:preserve-3d'),u'trs':Js(u'transition:${1:prop} ${2:time}'),u'trsde':Js(u'transition-delay:${1:time}'),u'trsdu':Js(u'transition-duration:${1:time}'),u'trsp':Js(u'transition-property:${1:prop}'),u'trstf':Js(u'transition-timing-function:${1:fn}'),u'tsh':Js(u'text-shadow:${1:hoff} ${2:voff} ${3:blur} ${4:#000}'),u'tt':Js(u'text-transform:uppercase|lowercase|capitalize|none'),u'tw':Js(u'text-wrap:none|normal|unrestricted|suppress'),u'us':Js(u'user-select:none'),u'v':Js(u'visibility:hidden|visible|collapse'),u'va':Js(u'vertical-align:top|super|text-top|middle|baseline|bottom|text-bottom|sub'),u'w':Js(u'width'),u'whs':Js(u'white-space:nowrap|pre|pre-wrap|pre-line|normal'),u'whsc':Js(u'white-space-collapse:normal|keep-all|loose|break-strict|break-all'),u'wid':Js(u'widows'),u'wm':Js(u'writing-mode:lr-tb|lr-tb|lr-bt|rl-tb|rl-bt|tb-rl|tb-lr|bt-lr|bt-rl'),u'wob':Js(u'word-break:normal|keep-all|break-all'),u'wos':Js(u'word-spacing'),u'wow':Js(u'word-wrap:none|unrestricted|suppress|break-word|normal'),u'z':Js(u'z-index'),u'zom':Js(u'zoom:1')})
    var.put(u'css$1', PyJs_Object_341_)
    PyJs_Object_342_ = Js({u'html':var.get(u'html$1'),u'css':var.get(u'css$1')})
    var.put(u'index$7', PyJs_Object_342_)
    PyJs_Object_343_ = Js({u'common':Js([Js(u'lorem'), Js(u'ipsum'), Js(u'dolor'), Js(u'sit'), Js(u'amet'), Js(u'consectetur'), Js(u'adipisicing'), Js(u'elit')]),u'words':Js([Js(u'exercitationem'), Js(u'perferendis'), Js(u'perspiciatis'), Js(u'laborum'), Js(u'eveniet'), Js(u'sunt'), Js(u'iure'), Js(u'nam'), Js(u'nobis'), Js(u'eum'), Js(u'cum'), Js(u'officiis'), Js(u'excepturi'), Js(u'odio'), Js(u'consectetur'), Js(u'quasi'), Js(u'aut'), Js(u'quisquam'), Js(u'vel'), Js(u'eligendi'), Js(u'itaque'), Js(u'non'), Js(u'odit'), Js(u'tempore'), Js(u'quaerat'), Js(u'dignissimos'), Js(u'facilis'), Js(u'neque'), Js(u'nihil'), Js(u'expedita'), Js(u'vitae'), Js(u'vero'), Js(u'ipsum'), Js(u'nisi'), Js(u'animi'), Js(u'cumque'), Js(u'pariatur'), Js(u'velit'), Js(u'modi'), Js(u'natus'), Js(u'iusto'), Js(u'eaque'), Js(u'sequi'), Js(u'illo'), Js(u'sed'), Js(u'ex'), Js(u'et'), Js(u'voluptatibus'), Js(u'tempora'), Js(u'veritatis'), Js(u'ratione'), Js(u'assumenda'), Js(u'incidunt'), Js(u'nostrum'), Js(u'placeat'), Js(u'aliquid'), Js(u'fuga'), Js(u'provident'), Js(u'praesentium'), Js(u'rem'), Js(u'necessitatibus'), Js(u'suscipit'), Js(u'adipisci'), Js(u'quidem'), Js(u'possimus'), Js(u'voluptas'), Js(u'debitis'), Js(u'sint'), Js(u'accusantium'), Js(u'unde'), Js(u'sapiente'), Js(u'voluptate'), Js(u'qui'), Js(u'aspernatur'), Js(u'laudantium'), Js(u'soluta'), Js(u'amet'), Js(u'quo'), Js(u'aliquam'), Js(u'saepe'), Js(u'culpa'), Js(u'libero'), Js(u'ipsa'), Js(u'dicta'), Js(u'reiciendis'), Js(u'nesciunt'), Js(u'doloribus'), Js(u'autem'), Js(u'impedit'), Js(u'minima'), Js(u'maiores'), Js(u'repudiandae'), Js(u'ipsam'), Js(u'obcaecati'), Js(u'ullam'), Js(u'enim'), Js(u'totam'), Js(u'delectus'), Js(u'ducimus'), Js(u'quis'), Js(u'voluptates'), Js(u'dolores'), Js(u'molestiae'), Js(u'harum'), Js(u'dolorem'), Js(u'quia'), Js(u'voluptatem'), Js(u'molestias'), Js(u'magni'), Js(u'distinctio'), Js(u'omnis'), Js(u'illum'), Js(u'dolorum'), Js(u'voluptatum'), Js(u'ea'), Js(u'quas'), Js(u'quam'), Js(u'corporis'), Js(u'quae'), Js(u'blanditiis'), Js(u'atque'), Js(u'deserunt'), Js(u'laboriosam'), Js(u'earum'), Js(u'consequuntur'), Js(u'hic'), Js(u'cupiditate'), Js(u'quibusdam'), Js(u'accusamus'), Js(u'ut'), Js(u'rerum'), Js(u'error'), Js(u'minus'), Js(u'eius'), Js(u'ab'), Js(u'ad'), Js(u'nemo'), Js(u'fugit'), Js(u'officia'), Js(u'at'), Js(u'in'), Js(u'id'), Js(u'quos'), Js(u'reprehenderit'), Js(u'numquam'), Js(u'iste'), Js(u'fugiat'), Js(u'sit'), Js(u'inventore'), Js(u'beatae'), Js(u'repellendus'), Js(u'magnam'), Js(u'recusandae'), Js(u'quod'), Js(u'explicabo'), Js(u'doloremque'), Js(u'aperiam'), Js(u'consequatur'), Js(u'asperiores'), Js(u'commodi'), Js(u'optio'), Js(u'dolor'), Js(u'labore'), Js(u'temporibus'), Js(u'repellat'), Js(u'veniam'), Js(u'architecto'), Js(u'est'), Js(u'esse'), Js(u'mollitia'), Js(u'nulla'), Js(u'a'), Js(u'similique'), Js(u'eos'), Js(u'alias'), Js(u'dolore'), Js(u'tenetur'), Js(u'deleniti'), Js(u'porro'), Js(u'facere'), Js(u'maxime'), Js(u'corrupti')])})
    var.put(u'latin', PyJs_Object_343_)
    PyJs_Object_344_ = Js({u'common':Js([Js(u'\u0434\u0430\u043b\u0435\u043a\u043e-\u0434\u0430\u043b\u0435\u043a\u043e'), Js(u'\u0437\u0430'), Js(u'\u0441\u043b\u043e\u0432\u0435\u0441\u043d\u044b\u043c\u0438'), Js(u'\u0433\u043e\u0440\u0430\u043c\u0438'), Js(u'\u0432 \u0441\u0442\u0440\u0430\u043d\u0435'), Js(u'\u0433\u043b\u0430\u0441\u043d\u044b\u0445'), Js(u'\u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u044b\u0445'), Js(u'\u0436\u0438\u0432\u0443\u0442'), Js(u'\u0440\u044b\u0431\u043d\u044b\u0435'), Js(u'\u0442\u0435\u043a\u0441\u0442\u044b')]),u'words':Js([Js(u'\u0432\u0434\u0430\u043b\u0438'), Js(u'\u043e\u0442 \u0432\u0441\u0435\u0445'), Js(u'\u043e\u043d\u0438'), Js(u'\u0431\u0443\u043a\u0432\u0435\u043d\u043d\u044b\u0445'), Js(u'\u0434\u043e\u043c\u0430\u0445'), Js(u'\u043d\u0430 \u0431\u0435\u0440\u0435\u0433\u0443'), Js(u'\u0441\u0435\u043c\u0430\u043d\u0442\u0438\u043a\u0430'), Js(u'\u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e'), Js(u'\u044f\u0437\u044b\u043a\u043e\u0432\u043e\u0433\u043e'), Js(u'\u043e\u043a\u0435\u0430\u043d\u0430'), Js(u'\u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439'), Js(u'\u0440\u0443\u0447\u0435\u0435\u043a'), Js(u'\u0434\u0430\u043b\u044c'), Js(u'\u0436\u0443\u0440\u0447\u0438\u0442'), Js(u'\u043f\u043e \u0432\u0441\u0435\u0439'), Js(u'\u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442'), Js(u'\u0435\u0435'), Js(u'\u0432\u0441\u0435\u043c\u0438'), Js(u'\u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438'), Js(u'\u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438'), Js(u'\u044d\u0442\u0430'), Js(u'\u043f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f'), Js(u'\u0441\u0442\u0440\u0430\u043d\u0430'), Js(u'\u043a\u043e\u0442\u043e\u0440\u043e\u0439'), Js(u'\u0436\u0430\u0440\u0435\u043d\u043d\u044b\u0435'), Js(u'\u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f'), Js(u'\u0437\u0430\u043b\u0435\u0442\u0430\u044e\u0442'), Js(u'\u043f\u0440\u044f\u043c\u043e'), Js(u'\u0440\u043e\u0442'), Js(u'\u0434\u0430\u0436\u0435'), Js(u'\u0432\u0441\u0435\u043c\u043e\u0433\u0443\u0449\u0430\u044f'), Js(u'\u043f\u0443\u043d\u043a\u0442\u0443\u0430\u0446\u0438\u044f'), Js(u'\u043d\u0435'), Js(u'\u0438\u043c\u0435\u0435\u0442'), Js(u'\u0432\u043b\u0430\u0441\u0442\u0438'), Js(u'\u043d\u0430\u0434'), Js(u'\u0440\u044b\u0431\u043d\u044b\u043c\u0438'), Js(u'\u0442\u0435\u043a\u0441\u0442\u0430\u043c\u0438'), Js(u'\u0432\u0435\u0434\u0443\u0449\u0438\u043c\u0438'), Js(u'\u0431\u0435\u0437\u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u043d\u044b\u0439'), Js(u'\u043e\u0431\u0440\u0430\u0437'), Js(u'\u0436\u0438\u0437\u043d\u0438'), Js(u'\u043e\u0434\u043d\u0430\u0436\u0434\u044b'), Js(u'\u043e\u0434\u043d\u0430'), Js(u'\u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f'), Js(u'\u0441\u0442\u0440\u043e\u0447\u043a\u0430'), Js(u'\u0440\u044b\u0431\u043d\u043e\u0433\u043e'), Js(u'\u0442\u0435\u043a\u0441\u0442\u0430'), Js(u'\u0438\u043c\u0435\u043d\u0438'), Js(u'lorem'), Js(u'ipsum'), Js(u'\u0440\u0435\u0448\u0438\u043b\u0430'), Js(u'\u0432\u044b\u0439\u0442\u0438'), Js(u'\u0431\u043e\u043b\u044c\u0448\u043e\u0439'), Js(u'\u043c\u0438\u0440'), Js(u'\u0433\u0440\u0430\u043c\u043c\u0430\u0442\u0438\u043a\u0438'), Js(u'\u0432\u0435\u043b\u0438\u043a\u0438\u0439'), Js(u'\u043e\u043a\u0441\u043c\u043e\u043a\u0441'), Js(u'\u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0430\u043b'), Js(u'\u043e'), Js(u'\u0437\u043b\u044b\u0445'), Js(u'\u0437\u0430\u043f\u044f\u0442\u044b\u0445'), Js(u'\u0434\u0438\u043a\u0438\u0445'), Js(u'\u0437\u043d\u0430\u043a\u0430\u0445'), Js(u'\u0432\u043e\u043f\u0440\u043e\u0441\u0430'), Js(u'\u043a\u043e\u0432\u0430\u0440\u043d\u044b\u0445'), Js(u'\u0442\u043e\u0447\u043a\u0430\u0445'), Js(u'\u0437\u0430\u043f\u044f\u0442\u043e\u0439'), Js(u'\u043d\u043e'), Js(u'\u0442\u0435\u043a\u0441\u0442'), Js(u'\u0434\u0430\u043b'), Js(u'\u0441\u0431\u0438\u0442\u044c'), Js(u'\u0441\u0435\u0431\u044f'), Js(u'\u0442\u043e\u043b\u043a\u0443'), Js(u'\u043e\u043d'), Js(u'\u0441\u043e\u0431\u0440\u0430\u043b'), Js(u'\u0441\u0435\u043c\u044c'), Js(u'\u0441\u0432\u043e\u0438\u0445'), Js(u'\u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0445'), Js(u'\u0431\u0443\u043a\u0432'), Js(u'\u043f\u043e\u0434\u043f\u043e\u044f\u0441\u0430\u043b'), Js(u'\u0438\u043d\u0438\u0446\u0438\u0430\u043b'), Js(u'\u0437\u0430'), Js(u'\u043f\u043e\u044f\u0441'), Js(u'\u043f\u0443\u0441\u0442\u0438\u043b\u0441\u044f'), Js(u'\u0434\u043e\u0440\u043e\u0433\u0443'), Js(u'\u0432\u0437\u043e\u0431\u0440\u0430\u0432\u0448\u0438\u0441\u044c'), Js(u'\u043f\u0435\u0440\u0432\u0443\u044e'), Js(u'\u0432\u0435\u0440\u0448\u0438\u043d\u0443'), Js(u'\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0445'), Js(u'\u0433\u043e\u0440'), Js(u'\u0431\u0440\u043e\u0441\u0438\u043b'), Js(u'\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439'), Js(u'\u0432\u0437\u0433\u043b\u044f\u0434'), Js(u'\u043d\u0430\u0437\u0430\u0434'), Js(u'\u0441\u0438\u043b\u0443\u044d\u0442'), Js(u'\u0441\u0432\u043e\u0435\u0433\u043e'), Js(u'\u0440\u043e\u0434\u043d\u043e\u0433\u043e'), Js(u'\u0433\u043e\u0440\u043e\u0434\u0430'), Js(u'\u0431\u0443\u043a\u0432\u043e\u0433\u0440\u0430\u0434'), Js(u'\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a'), Js(u'\u0434\u0435\u0440\u0435\u0432\u043d\u0438'), Js(u'\u0430\u043b\u0444\u0430\u0432\u0438\u0442'), Js(u'\u043f\u043e\u0434\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a'), Js(u'\u0441\u0432\u043e\u0435\u0433\u043e'), Js(u'\u043f\u0435\u0440\u0435\u0443\u043b\u043a\u0430'), Js(u'\u0433\u0440\u0443\u0441\u0442\u043d\u044b\u0439'), Js(u'\u0440\u0435\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0439'), Js(u'\u0432\u043e\u043f\u0440\u043e\u0441'), Js(u'\u0441\u043a\u0430\u0442\u0438\u043b\u0441\u044f'), Js(u'\u0435\u0433\u043e'), Js(u'\u0449\u0435\u043a\u0435'), Js(u'\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043b'), Js(u'\u0441\u0432\u043e\u0439'), Js(u'\u043f\u0443\u0442\u044c'), Js(u'\u0434\u043e\u0440\u043e\u0433\u0435'), Js(u'\u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b'), Js(u'\u0440\u0443\u043a\u043e\u043f\u0438\u0441\u044c'), Js(u'\u043e\u043d\u0430'), Js(u'\u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0434\u0438\u043b\u0430'), Js(u'\u043c\u043e\u0435\u0439'), Js(u'\u0432\u0441\u0435'), Js(u'\u043f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f'), Js(u'\u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e'), Js(u'\u0440\u0430\u0437'), Js(u'\u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435'), Js(u'\u0447\u0442\u043e'), Js(u'\u043c\u0435\u043d\u044f'), Js(u'\u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c'), Js(u'\u044d\u0442\u043e'), Js(u'\u043f\u0440\u0438\u0441\u0442\u0430\u0432\u043a\u0430'), Js(u'\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0439\u0441\u044f'), Js(u'\u0442\u044b'), Js(u'\u043b\u0443\u0447\u0448\u0435'), Js(u'\u0441\u0432\u043e\u044e'), Js(u'\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0443\u044e'), Js(u'\u0441\u0442\u0440\u0430\u043d\u0443'), Js(u'\u043f\u043e\u0441\u043b\u0443\u0448\u0430\u0432\u0448\u0438\u0441\u044c'), Js(u'\u0440\u0443\u043a\u043e\u043f\u0438\u0441\u0438'), Js(u'\u043d\u0430\u0448'), Js(u'\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043b'), Js(u'\u0441\u0432\u043e\u0439'), Js(u'\u043f\u0443\u0442\u044c'), Js(u'\u0432\u0441\u043a\u043e\u0440\u0435'), Js(u'\u0435\u043c\u0443'), Js(u'\u043f\u043e\u0432\u0441\u0442\u0440\u0435\u0447\u0430\u043b\u0441\u044f'), Js(u'\u043a\u043e\u0432\u0430\u0440\u043d\u044b\u0439'), Js(u'\u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c'), Js(u'\u0440\u0435\u043a\u043b\u0430\u043c\u043d\u044b\u0445'), Js(u'\u0442\u0435\u043a\u0441\u0442\u043e\u0432'), Js(u'\u043d\u0430\u043f\u043e\u0438\u0432\u0448\u0438\u0439'), Js(u'\u044f\u0437\u044b\u043a\u043e\u043c'), Js(u'\u0440\u0435\u0447\u044c\u044e'), Js(u'\u0437\u0430\u043c\u0430\u043d\u0438\u0432\u0448\u0438\u0439'), Js(u'\u0441\u0432\u043e\u0435'), Js(u'\u0430\u0433\u0435\u043d\u0442\u0441\u0442\u0432\u043e'), Js(u'\u043a\u043e\u0442\u043e\u0440\u043e\u0435'), Js(u'\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e'), Js(u'\u0441\u043d\u043e\u0432\u0430'), Js(u'\u0441\u043d\u043e\u0432\u0430'), Js(u'\u0441\u0432\u043e\u0438\u0445'), Js(u'\u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445'), Js(u'\u0435\u0441\u043b\u0438'), Js(u'\u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u043b\u0438'), Js(u'\u0442\u043e'), Js(u'\u0436\u0438\u0432\u0435\u0442'), Js(u'\u0442\u0430\u043c'), Js(u'\u0434\u043e'), Js(u'\u0441\u0438\u0445'), Js(u'\u043f\u043e\u0440')])})
    var.put(u'ru', PyJs_Object_344_)
    PyJs_Object_345_ = Js({u'common':Js([Js(u'mujer'), Js(u'uno'), Js(u'dolor'), Js(u'm\xe1s'), Js(u'de'), Js(u'poder'), Js(u'mismo'), Js(u'si')]),u'words':Js([Js(u'ejercicio'), Js(u'preferencia'), Js(u'perspicacia'), Js(u'laboral'), Js(u'pa\xf1o'), Js(u'suntuoso'), Js(u'molde'), Js(u'namibia'), Js(u'planeador'), Js(u'mirar'), Js(u'dem\xe1s'), Js(u'oficinista'), Js(u'excepci\xf3n'), Js(u'odio'), Js(u'consecuencia'), Js(u'casi'), Js(u'auto'), Js(u'chicharra'), Js(u'velo'), Js(u'elixir'), Js(u'ataque'), Js(u'no'), Js(u'odio'), Js(u'temporal'), Js(u'cu\xf3rum'), Js(u'dign\xedsimo'), Js(u'facilismo'), Js(u'letra'), Js(u'nihilista'), Js(u'expedici\xf3n'), Js(u'alma'), Js(u'alveolar'), Js(u'aparte'), Js(u'le\xf3n'), Js(u'animal'), Js(u'como'), Js(u'paria'), Js(u'belleza'), Js(u'modo'), Js(u'natividad'), Js(u'justo'), Js(u'ataque'), Js(u's\xe9quito'), Js(u'pillo'), Js(u'sed'), Js(u'ex'), Js(u'y'), Js(u'voluminoso'), Js(u'temporalidad'), Js(u'verdades'), Js(u'racional'), Js(u'asunci\xf3n'), Js(u'incidente'), Js(u'marejada'), Js(u'placenta'), Js(u'amanecer'), Js(u'fuga'), Js(u'previsor'), Js(u'presentaci\xf3n'), Js(u'lejos'), Js(u'necesariamente'), Js(u'sospechoso'), Js(u'adiposidad'), Js(u'quind\xedo'), Js(u'p\xf3cima'), Js(u'voluble'), Js(u'd\xe9bito'), Js(u'sinti\xf3'), Js(u'accesorio'), Js(u'falda'), Js(u'sapiencia'), Js(u'volutas'), Js(u'queso'), Js(u'permacultura'), Js(u'laudo'), Js(u'soluciones'), Js(u'entero'), Js(u'pan'), Js(u'litro'), Js(u'tonelada'), Js(u'culpa'), Js(u'libertario'), Js(u'mosca'), Js(u'dictado'), Js(u'reincidente'), Js(u'nascimiento'), Js(u'dolor'), Js(u'escolar'), Js(u'impedimento'), Js(u'm\xednima'), Js(u'mayores'), Js(u'repugnante'), Js(u'dulce'), Js(u'obcecado'), Js(u'monta\xf1a'), Js(u'enigma'), Js(u'total'), Js(u'delet\xe9reo'), Js(u'd\xe9cima'), Js(u'c\xe1bala'), Js(u'fotograf\xeda'), Js(u'dolores'), Js(u'molesto'), Js(u'olvido'), Js(u'paciencia'), Js(u'resiliencia'), Js(u'voluntad'), Js(u'molestias'), Js(u'magn\xedfico'), Js(u'distinci\xf3n'), Js(u'ovni'), Js(u'marejada'), Js(u'cerro'), Js(u'torre'), Js(u'y'), Js(u'abogada'), Js(u'manantial'), Js(u'corporal'), Js(u'agua'), Js(u'crep\xfasculo'), Js(u'ataque'), Js(u'desierto'), Js(u'laboriosamente'), Js(u'angustia'), Js(u'afortunado'), Js(u'alma'), Js(u'encefalograma'), Js(u'materialidad'), Js(u'cosas'), Js(u'o'), Js(u'renuncia'), Js(u'error'), Js(u'menos'), Js(u'conejo'), Js(u'abad\xeda'), Js(u'analfabeto'), Js(u'remo'), Js(u'fugacidad'), Js(u'oficio'), Js(u'en'), Js(u'alm\xe1cigo'), Js(u'vos'), Js(u'pan'), Js(u'represi\xf3n'), Js(u'n\xfameros'), Js(u'triste'), Js(u'refugiado'), Js(u'trote'), Js(u'inventor'), Js(u'corchea'), Js(u'repelente'), Js(u'magma'), Js(u'recusado'), Js(u'patr\xf3n'), Js(u'expl\xedcito'), Js(u'paloma'), Js(u's\xedndrome'), Js(u'inmune'), Js(u'autoinmune'), Js(u'comodidad'), Js(u'ley'), Js(u'vietnamita'), Js(u'demonio'), Js(u'tasmania'), Js(u'repeler'), Js(u'ap\xe9ndice'), Js(u'arquitecto'), Js(u'columna'), Js(u'yugo'), Js(u'computador'), Js(u'mula'), Js(u'a'), Js(u'prop\xf3sito'), Js(u'fantas\xeda'), Js(u'alias'), Js(u'rayo'), Js(u'tenedor'), Js(u'deleznable'), Js(u'ventana'), Js(u'cara'), Js(u'anemia'), Js(u'corrupto')])})
    var.put(u'sp', PyJs_Object_345_)
    PyJs_Object_346_ = Js({u'latin':var.get(u'latin'),u'ru':var.get(u'ru'),u'sp':var.get(u'sp')})
    var.put(u'langs', PyJs_Object_346_)
    PyJs_Object_347_ = Js({u'wordCount':Js(30.0),u'skipCommon':Js(False),u'lang':Js(u'latin')})
    var.put(u'defaultOptions$4', PyJs_Object_347_)
    @Js
    def PyJs_anonymous_348_(node, options, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'options':options, u'arguments':arguments}, var)
        var.registers([u'startWithCommon', u'node', u'dict', u'options'])
        PyJs_Object_349_ = Js({})
        var.put(u'options', var.get(u'Object').callprop(u'assign', PyJs_Object_349_, var.get(u'defaultOptions$4'), var.get(u'options')))
        var.put(u'dict', (var.get(u'langs').get(var.get(u'options').get(u'lang')) or var.get(u'langs').get(u'latin')))
        var.put(u'startWithCommon', (var.get(u'options').get(u'skipCommon').neg() and var.get(u'isRepeating')(var.get(u'node')).neg()))
        if (var.get(u'node').get(u'repeat').neg() and var.get(u'isRoot$1')(var.get(u'node').get(u'parent')).neg()):
            var.get(u'node').get(u'parent').put(u'value', var.get(u'paragraph')(var.get(u'dict'), var.get(u'options').get(u'wordCount'), var.get(u'startWithCommon')))
            var.get(u'node').callprop(u'remove')
        else:
            var.get(u'node').put(u'value', var.get(u'paragraph')(var.get(u'dict'), var.get(u'options').get(u'wordCount'), var.get(u'startWithCommon')))
            var.get(u'node').put(u'name', var.get(u'resolveImplicitName')(var.get(u'node').get(u'parent').get(u'name')))
        return var.get(u'node')
    PyJs_anonymous_348_._set_name(u'anonymous')
    var.put(u'index$8', PyJs_anonymous_348_)
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.put(u'reLorem', JsRegExp(u'/^lorem([a-z]*)(\\d*)$/'))
    @Js
    def PyJs_anonymous_350_(syntax, snippets, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'snippets':snippets, u'syntax':syntax}, var)
        var.registers([u'syntax', u'registry', u'snippets', u'registrySnippets'])
        var.put(u'registrySnippets', Js([(var.get(u'index$7').get(var.get(u'syntax')) or var.get(u'index$7').get(u'html'))]))
        if var.get(u'Array').callprop(u'isArray', var.get(u'snippets')):
            @Js
            def PyJs_anonymous_351_(item, this, arguments, var=var):
                var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
                var.registers([u'item'])
                var.get(u'registrySnippets').callprop(u'push', (var.get(u'index$7').get(var.get(u'item')) if PyJsStrictEq(var.get(u'item',throw=False).typeof(),Js(u'string')) else var.get(u'item')))
            PyJs_anonymous_351_._set_name(u'anonymous')
            var.get(u'snippets').callprop(u'forEach', PyJs_anonymous_351_)
        else:
            if PyJsStrictEq(var.get(u'snippets',throw=False).typeof(),Js(u'object')):
                var.get(u'registrySnippets').callprop(u'push', var.get(u'snippets'))
        var.put(u'registry', var.get(u'SnippetsRegistry').create(var.get(u'registrySnippets').callprop(u'filter', var.get(u'Boolean'))))
        if PyJsStrictNeq(var.get(u'syntax'),Js(u'css')):
            var.get(u'registry').callprop(u'get', Js(0.0)).callprop(u'set', var.get(u'reLorem'), var.get(u'loremGenerator'))
        return var.get(u'registry')
    PyJs_anonymous_350_._set_name(u'anonymous')
    var.put(u'snippetsRegistryFactory', PyJs_anonymous_350_)
    pass
    PyJs_Object_353_ = Js({u'lang':Js(u'en'),u'locale':Js(u'en-US'),u'charset':Js(u'UTF-8')})
    var.put(u'defaultVariables', PyJs_Object_353_)
    var.put(u'stylesheetSyntaxes', var.get(u'Set').create(Js([Js(u'css'), Js(u'sass'), Js(u'scss'), Js(u'less'), Js(u'stylus'), Js(u'sss')])))
    @Js
    def PyJs_anonymous_355_(index, placeholder, this, arguments, var=var):
        var = Scope({u'this':this, u'index':index, u'placeholder':placeholder, u'arguments':arguments}, var)
        var.registers([u'index', u'placeholder'])
        return (var.get(u'placeholder') or Js(u''))
    PyJs_anonymous_355_._set_name(u'anonymous')
    PyJs_Object_356_ = Js({})
    PyJs_Object_357_ = Js({})
    PyJs_Object_354_ = Js({u'syntax':Js(u'html'),u'field':PyJs_anonymous_355_,u'text':var.get(u"null"),u'profile':var.get(u"null"),u'variables':PyJs_Object_356_,u'snippets':PyJs_Object_357_,u'addons':var.get(u"null"),u'format':var.get(u"null")})
    var.put(u'defaultOptions', PyJs_Object_354_)
    pass
    pass
    pass
    pass
    pass
    pass
    var.get(u'exports').put(u'expand', var.get(u'expand$$1'))
    var.get(u'exports').put(u'parse', var.get(u'parse$$1'))
    var.get(u'exports').put(u'createSnippetsRegistry', var.get(u'createSnippetsRegistry'))
    var.get(u'exports').put(u'createOptions', var.get(u'createOptions'))
    var.get(u'exports').put(u'isStylesheet', var.get(u'isStylesheet'))
    var.get(u'exports').put(u'createProfile', var.get(u'createProfile'))
    PyJs_Object_362_ = Js({u'value':var.get(u'true')})
    var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_362_)
PyJs_anonymous_0_._set_name(u'anonymous')
@Js
def PyJs_anonymous_363_(PyJsArg_676c6f62616c_, factory, this, arguments, var=var):
    var = Scope({u'this':this, u'global':PyJsArg_676c6f62616c_, u'factory':factory, u'arguments':arguments}, var)
    var.registers([u'global', u'factory'])
    def PyJs_LONG_365_(var=var):
        PyJs_Object_364_ = Js({})
        return (var.get(u'factory')(var.get(u'exports')) if (PyJsStrictEq(var.get(u'exports',throw=False).typeof(),Js(u'object')) and PyJsStrictNeq(var.get(u'module',throw=False).typeof(),Js(u'undefined'))) else (var.get(u'define')(Js([Js(u'exports')]), var.get(u'factory')) if (PyJsStrictEq(var.get(u'define',throw=False).typeof(),Js(u'function')) and var.get(u'define').get(u'amd')) else var.get(u'factory')(var.get(u'global').put(u'emmet', (var.get(u'global').get(u'emmet') or PyJs_Object_364_)))))
    PyJs_LONG_365_()
PyJs_anonymous_363_._set_name(u'anonymous')
PyJs_anonymous_363_(var.get(u"this"), PyJs_anonymous_0_)
pass


# Add lib to the module scope
expand = var.to_python()