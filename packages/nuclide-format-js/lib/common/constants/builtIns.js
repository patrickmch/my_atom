'use strict';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 *
 * 
 */

/**
 * This is the set of modules that are "built-in" and never need to be required.
 *
 * Mostly taken from `flow/lib/core.js`.
 */
module.exports = new Set([
// Map, Set excluded on purpose for polyfilling
'Array', 'ArrayBuffer', 'Boolean', 'CallSite', 'DataView', 'Date', 'Error', 'EvalError', 'Float32Array', 'Float64Array', 'Function', 'Infinity', 'Int16Array', 'Int32Array', 'Int8Array', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'Promise', 'Proxy', 'RangeError', 'ReferenceError', 'Reflect', 'RegExp', 'String', 'Symbol', 'SyntaxError', 'TypeError', 'Uint16Array', 'Uint32Array', 'Uint8Array', 'Uint8ClampedArray', 'URIError', 'WeakMap', 'WeakSet', 'arguments', 'global', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'console',

// Browser built ins.
'alert', 'atob', 'btoa', 'clearInterval', 'clearTimeout', 'confirm', 'decodeURI', 'decodeURIComponent', 'document', 'encodeURI', 'encodeURIComponent', 'escape', 'indexedDB', 'location', 'localStorage', 'open', 'performance', 'prompt', 'screen', 'sessionStorage', 'setInterval', 'setTimeout', 'unescape', 'window', 'Option',

// Module built ins.
'exports', 'module', 'require',

// Common dev flag.
'__DEV__',

// Jest/Jasmine build ins.
'afterEach', 'beforeEach', 'describe', 'expect', 'it', 'test', 'jest', 'waitsForPromise', 'jasmine', 'spyOn', 'mockRunTimersOnce']);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vY29uc3RhbnRzL2J1aWx0SW5zLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJTZXQiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7Ozs7QUFVQTs7Ozs7QUFLQUEsT0FBT0MsT0FBUCxHQUFrQixJQUFJQyxHQUFKLENBQVE7QUFDeEI7QUFDQSxPQUZ3QixFQUd4QixhQUh3QixFQUl4QixTQUp3QixFQUt4QixVQUx3QixFQU14QixVQU53QixFQU94QixNQVB3QixFQVF4QixPQVJ3QixFQVN4QixXQVR3QixFQVV4QixjQVZ3QixFQVd4QixjQVh3QixFQVl4QixVQVp3QixFQWF4QixVQWJ3QixFQWN4QixZQWR3QixFQWV4QixZQWZ3QixFQWdCeEIsV0FoQndCLEVBaUJ4QixNQWpCd0IsRUFrQnhCLE1BbEJ3QixFQW1CeEIsS0FuQndCLEVBb0J4QixRQXBCd0IsRUFxQnhCLFFBckJ3QixFQXNCeEIsU0F0QndCLEVBdUJ4QixPQXZCd0IsRUF3QnhCLFlBeEJ3QixFQXlCeEIsZ0JBekJ3QixFQTBCeEIsU0ExQndCLEVBMkJ4QixRQTNCd0IsRUE0QnhCLFFBNUJ3QixFQTZCeEIsUUE3QndCLEVBOEJ4QixhQTlCd0IsRUErQnhCLFdBL0J3QixFQWdDeEIsYUFoQ3dCLEVBaUN4QixhQWpDd0IsRUFrQ3hCLFlBbEN3QixFQW1DeEIsbUJBbkN3QixFQW9DeEIsVUFwQ3dCLEVBcUN4QixTQXJDd0IsRUFzQ3hCLFNBdEN3QixFQXdDeEIsV0F4Q3dCLEVBeUN4QixRQXpDd0IsRUEwQ3hCLFVBMUN3QixFQTJDeEIsT0EzQ3dCLEVBNEN4QixZQTVDd0IsRUE2Q3hCLFVBN0N3QixFQThDeEIsV0E5Q3dCLEVBK0N4QixTQS9Dd0I7O0FBaUR4QjtBQUNBLE9BbER3QixFQW1EeEIsTUFuRHdCLEVBb0R4QixNQXBEd0IsRUFxRHhCLGVBckR3QixFQXNEeEIsY0F0RHdCLEVBdUR4QixTQXZEd0IsRUF3RHhCLFdBeER3QixFQXlEeEIsb0JBekR3QixFQTBEeEIsVUExRHdCLEVBMkR4QixXQTNEd0IsRUE0RHhCLG9CQTVEd0IsRUE2RHhCLFFBN0R3QixFQThEeEIsV0E5RHdCLEVBK0R4QixVQS9Ed0IsRUFnRXhCLGNBaEV3QixFQWlFeEIsTUFqRXdCLEVBa0V4QixhQWxFd0IsRUFtRXhCLFFBbkV3QixFQW9FeEIsUUFwRXdCLEVBcUV4QixnQkFyRXdCLEVBc0V4QixhQXRFd0IsRUF1RXhCLFlBdkV3QixFQXdFeEIsVUF4RXdCLEVBeUV4QixRQXpFd0IsRUEyRXhCLFFBM0V3Qjs7QUE2RXhCO0FBQ0EsU0E5RXdCLEVBK0V4QixRQS9Fd0IsRUFnRnhCLFNBaEZ3Qjs7QUFrRnhCO0FBQ0EsU0FuRndCOztBQXFGeEI7QUFDQSxXQXRGd0IsRUF1RnhCLFlBdkZ3QixFQXdGeEIsVUF4RndCLEVBeUZ4QixRQXpGd0IsRUEwRnhCLElBMUZ3QixFQTJGeEIsTUEzRndCLEVBNEZ4QixNQTVGd0IsRUE2RnhCLGlCQTdGd0IsRUE4RnhCLFNBOUZ3QixFQStGeEIsT0EvRndCLEVBZ0d4QixtQkFoR3dCLENBQVIsQ0FBbEIiLCJmaWxlIjoiYnVpbHRJbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHNldCBvZiBtb2R1bGVzIHRoYXQgYXJlIFwiYnVpbHQtaW5cIiBhbmQgbmV2ZXIgbmVlZCB0byBiZSByZXF1aXJlZC5cbiAqXG4gKiBNb3N0bHkgdGFrZW4gZnJvbSBgZmxvdy9saWIvY29yZS5qc2AuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKG5ldyBTZXQoW1xuICAvLyBNYXAsIFNldCBleGNsdWRlZCBvbiBwdXJwb3NlIGZvciBwb2x5ZmlsbGluZ1xuICAnQXJyYXknLFxuICAnQXJyYXlCdWZmZXInLFxuICAnQm9vbGVhbicsXG4gICdDYWxsU2l0ZScsXG4gICdEYXRhVmlldycsXG4gICdEYXRlJyxcbiAgJ0Vycm9yJyxcbiAgJ0V2YWxFcnJvcicsXG4gICdGbG9hdDMyQXJyYXknLFxuICAnRmxvYXQ2NEFycmF5JyxcbiAgJ0Z1bmN0aW9uJyxcbiAgJ0luZmluaXR5JyxcbiAgJ0ludDE2QXJyYXknLFxuICAnSW50MzJBcnJheScsXG4gICdJbnQ4QXJyYXknLFxuICAnSlNPTicsXG4gICdNYXRoJyxcbiAgJ05hTicsXG4gICdOdW1iZXInLFxuICAnT2JqZWN0JyxcbiAgJ1Byb21pc2UnLFxuICAnUHJveHknLFxuICAnUmFuZ2VFcnJvcicsXG4gICdSZWZlcmVuY2VFcnJvcicsXG4gICdSZWZsZWN0JyxcbiAgJ1JlZ0V4cCcsXG4gICdTdHJpbmcnLFxuICAnU3ltYm9sJyxcbiAgJ1N5bnRheEVycm9yJyxcbiAgJ1R5cGVFcnJvcicsXG4gICdVaW50MTZBcnJheScsXG4gICdVaW50MzJBcnJheScsXG4gICdVaW50OEFycmF5JyxcbiAgJ1VpbnQ4Q2xhbXBlZEFycmF5JyxcbiAgJ1VSSUVycm9yJyxcbiAgJ1dlYWtNYXAnLFxuICAnV2Vha1NldCcsXG5cbiAgJ2FyZ3VtZW50cycsXG4gICdnbG9iYWwnLFxuICAnaXNGaW5pdGUnLFxuICAnaXNOYU4nLFxuICAncGFyc2VGbG9hdCcsXG4gICdwYXJzZUludCcsXG4gICd1bmRlZmluZWQnLFxuICAnY29uc29sZScsXG5cbiAgLy8gQnJvd3NlciBidWlsdCBpbnMuXG4gICdhbGVydCcsXG4gICdhdG9iJyxcbiAgJ2J0b2EnLFxuICAnY2xlYXJJbnRlcnZhbCcsXG4gICdjbGVhclRpbWVvdXQnLFxuICAnY29uZmlybScsXG4gICdkZWNvZGVVUkknLFxuICAnZGVjb2RlVVJJQ29tcG9uZW50JyxcbiAgJ2RvY3VtZW50JyxcbiAgJ2VuY29kZVVSSScsXG4gICdlbmNvZGVVUklDb21wb25lbnQnLFxuICAnZXNjYXBlJyxcbiAgJ2luZGV4ZWREQicsXG4gICdsb2NhdGlvbicsXG4gICdsb2NhbFN0b3JhZ2UnLFxuICAnb3BlbicsXG4gICdwZXJmb3JtYW5jZScsXG4gICdwcm9tcHQnLFxuICAnc2NyZWVuJyxcbiAgJ3Nlc3Npb25TdG9yYWdlJyxcbiAgJ3NldEludGVydmFsJyxcbiAgJ3NldFRpbWVvdXQnLFxuICAndW5lc2NhcGUnLFxuICAnd2luZG93JyxcblxuICAnT3B0aW9uJyxcblxuICAvLyBNb2R1bGUgYnVpbHQgaW5zLlxuICAnZXhwb3J0cycsXG4gICdtb2R1bGUnLFxuICAncmVxdWlyZScsXG5cbiAgLy8gQ29tbW9uIGRldiBmbGFnLlxuICAnX19ERVZfXycsXG5cbiAgLy8gSmVzdC9KYXNtaW5lIGJ1aWxkIGlucy5cbiAgJ2FmdGVyRWFjaCcsXG4gICdiZWZvcmVFYWNoJyxcbiAgJ2Rlc2NyaWJlJyxcbiAgJ2V4cGVjdCcsXG4gICdpdCcsXG4gICd0ZXN0JyxcbiAgJ2plc3QnLFxuICAnd2FpdHNGb3JQcm9taXNlJyxcbiAgJ2phc21pbmUnLFxuICAnc3B5T24nLFxuICAnbW9ja1J1blRpbWVyc09uY2UnLFxuXSk6IFNldDxzdHJpbmc+KTtcbiJdfQ==