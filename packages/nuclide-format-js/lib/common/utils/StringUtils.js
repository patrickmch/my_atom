'use strict';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 *
 * 
 */

function capitalize(word) {
  if (word.length === 0) {
    return word;
  }
  return word.charAt(0).toUpperCase() + word.slice(1);
}

/**
 * Sorting method that works like String::localCompare, but in Node.js as well.
 */
function compareStrings(one_, two_) {
  var one = one_ || '';
  var two = two_ || '';
  var oneLC = one.toLowerCase();
  var twoLC = two.toLowerCase();
  return one !== two && oneLC === twoLC ? simpleCompare(two, one // lowercase first
  ) : simpleCompare(oneLC, twoLC); // alphabetical ascending
}

function simpleCompare(one, two) {
  return one < two ? -1 : one > two ? 1 : 0;
}

function compareStringsCapitalsLast(one, two) {
  var byCapitalization = Number(isCapitalized(one || '')) - Number(isCapitalized(two || ''));
  return byCapitalization !== 0 ? byCapitalization : compareStrings(one, two);
}

function compareStringsCapitalsFirst(one, two) {
  var byCapitalization = Number(isCapitalized(two || '')) - Number(isCapitalized(one || ''));
  return byCapitalization !== 0 ? byCapitalization : compareStrings(one, two);
}

function isCapitalized(name) {
  return name.length > 0 && name.charAt(0).toLowerCase() !== name.charAt(0);
}

function isLowerCase(name) {
  return name.toLowerCase() === name;
}

module.exports = {
  capitalize: capitalize,
  compareStrings: compareStrings,
  compareStringsCapitalsFirst: compareStringsCapitalsFirst,
  compareStringsCapitalsLast: compareStringsCapitalsLast,
  isCapitalized: isCapitalized,
  isLowerCase: isLowerCase
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvU3RyaW5nVXRpbHMuanMiXSwibmFtZXMiOlsiY2FwaXRhbGl6ZSIsIndvcmQiLCJsZW5ndGgiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiY29tcGFyZVN0cmluZ3MiLCJvbmVfIiwidHdvXyIsIm9uZSIsInR3byIsIm9uZUxDIiwidG9Mb3dlckNhc2UiLCJ0d29MQyIsInNpbXBsZUNvbXBhcmUiLCJjb21wYXJlU3RyaW5nc0NhcGl0YWxzTGFzdCIsImJ5Q2FwaXRhbGl6YXRpb24iLCJOdW1iZXIiLCJpc0NhcGl0YWxpemVkIiwiY29tcGFyZVN0cmluZ3NDYXBpdGFsc0ZpcnN0IiwibmFtZSIsImlzTG93ZXJDYXNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7OztBQVVBLFNBQVNBLFVBQVQsQ0FBb0JDLElBQXBCLEVBQTBDO0FBQ3hDLE1BQUlBLEtBQUtDLE1BQUwsS0FBZ0IsQ0FBcEIsRUFBdUI7QUFDckIsV0FBT0QsSUFBUDtBQUNEO0FBQ0QsU0FBT0EsS0FBS0UsTUFBTCxDQUFZLENBQVosRUFBZUMsV0FBZixLQUErQkgsS0FBS0ksS0FBTCxDQUFXLENBQVgsQ0FBdEM7QUFDRDs7QUFFRDs7O0FBR0EsU0FBU0MsY0FBVCxDQUF3QkMsSUFBeEIsRUFBdUNDLElBQXZDLEVBQThEO0FBQzVELE1BQU1DLE1BQU1GLFFBQVEsRUFBcEI7QUFDQSxNQUFNRyxNQUFNRixRQUFRLEVBQXBCO0FBQ0EsTUFBTUcsUUFBUUYsSUFBSUcsV0FBSixFQUFkO0FBQ0EsTUFBTUMsUUFBUUgsSUFBSUUsV0FBSixFQUFkO0FBQ0EsU0FBT0gsUUFBUUMsR0FBUixJQUFlQyxVQUFVRSxLQUF6QixHQUNIQyxjQUFjSixHQUFkLEVBQW1CRCxHQUFuQixDQUF3QjtBQUF4QixHQURHLEdBRUhLLGNBQWNILEtBQWQsRUFBcUJFLEtBQXJCLENBRkosQ0FMNEQsQ0FPM0I7QUFDbEM7O0FBRUQsU0FBU0MsYUFBVCxDQUF1QkwsR0FBdkIsRUFBb0NDLEdBQXBDLEVBQXlEO0FBQ3ZELFNBQU9ELE1BQU1DLEdBQU4sR0FBWSxDQUFDLENBQWIsR0FBaUJELE1BQU1DLEdBQU4sR0FBWSxDQUFaLEdBQWdCLENBQXhDO0FBQ0Q7O0FBRUQsU0FBU0ssMEJBQVQsQ0FBb0NOLEdBQXBDLEVBQWtEQyxHQUFsRCxFQUF3RTtBQUN0RSxNQUFNTSxtQkFDSkMsT0FBT0MsY0FBY1QsT0FBTyxFQUFyQixDQUFQLElBQW1DUSxPQUFPQyxjQUFjUixPQUFPLEVBQXJCLENBQVAsQ0FEckM7QUFFQSxTQUFPTSxxQkFBcUIsQ0FBckIsR0FDSEEsZ0JBREcsR0FFSFYsZUFBZUcsR0FBZixFQUFvQkMsR0FBcEIsQ0FGSjtBQUdEOztBQUVELFNBQVNTLDJCQUFULENBQXFDVixHQUFyQyxFQUFtREMsR0FBbkQsRUFBeUU7QUFDdkUsTUFBTU0sbUJBQ0pDLE9BQU9DLGNBQWNSLE9BQU8sRUFBckIsQ0FBUCxJQUFtQ08sT0FBT0MsY0FBY1QsT0FBTyxFQUFyQixDQUFQLENBRHJDO0FBRUEsU0FBT08scUJBQXFCLENBQXJCLEdBQ0hBLGdCQURHLEdBRUhWLGVBQWVHLEdBQWYsRUFBb0JDLEdBQXBCLENBRko7QUFHRDs7QUFFRCxTQUFTUSxhQUFULENBQXVCRSxJQUF2QixFQUE4QztBQUM1QyxTQUNFQSxLQUFLbEIsTUFBTCxHQUFjLENBQWQsSUFDQWtCLEtBQUtqQixNQUFMLENBQVksQ0FBWixFQUFlUyxXQUFmLE9BQWlDUSxLQUFLakIsTUFBTCxDQUFZLENBQVosQ0FGbkM7QUFJRDs7QUFFRCxTQUFTa0IsV0FBVCxDQUFxQkQsSUFBckIsRUFBNEM7QUFDMUMsU0FBT0EsS0FBS1IsV0FBTCxPQUF1QlEsSUFBOUI7QUFDRDs7QUFFREUsT0FBT0MsT0FBUCxHQUFpQjtBQUNmdkIsd0JBRGU7QUFFZk0sZ0NBRmU7QUFHZmEsMERBSGU7QUFJZkosd0RBSmU7QUFLZkcsOEJBTGU7QUFNZkc7QUFOZSxDQUFqQiIsImZpbGUiOiJTdHJpbmdVdGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmZ1bmN0aW9uIGNhcGl0YWxpemUod29yZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHdvcmQ7XG4gIH1cbiAgcmV0dXJuIHdvcmQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB3b3JkLnNsaWNlKDEpO1xufVxuXG4vKipcbiAqIFNvcnRpbmcgbWV0aG9kIHRoYXQgd29ya3MgbGlrZSBTdHJpbmc6OmxvY2FsQ29tcGFyZSwgYnV0IGluIE5vZGUuanMgYXMgd2VsbC5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZVN0cmluZ3Mob25lXzogP3N0cmluZywgdHdvXzogP3N0cmluZyk6IG51bWJlciB7XG4gIGNvbnN0IG9uZSA9IG9uZV8gfHwgJyc7XG4gIGNvbnN0IHR3byA9IHR3b18gfHwgJyc7XG4gIGNvbnN0IG9uZUxDID0gb25lLnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IHR3b0xDID0gdHdvLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBvbmUgIT09IHR3byAmJiBvbmVMQyA9PT0gdHdvTENcbiAgICA/IHNpbXBsZUNvbXBhcmUodHdvLCBvbmUpIC8vIGxvd2VyY2FzZSBmaXJzdFxuICAgIDogc2ltcGxlQ29tcGFyZShvbmVMQywgdHdvTEMpOyAvLyBhbHBoYWJldGljYWwgYXNjZW5kaW5nXG59XG5cbmZ1bmN0aW9uIHNpbXBsZUNvbXBhcmUob25lOiBzdHJpbmcsIHR3bzogc3RyaW5nKTogbnVtYmVyIHtcbiAgcmV0dXJuIG9uZSA8IHR3byA/IC0xIDogb25lID4gdHdvID8gMSA6IDA7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVTdHJpbmdzQ2FwaXRhbHNMYXN0KG9uZTogP3N0cmluZywgdHdvOiA/c3RyaW5nKTogbnVtYmVyIHtcbiAgY29uc3QgYnlDYXBpdGFsaXphdGlvbiA9XG4gICAgTnVtYmVyKGlzQ2FwaXRhbGl6ZWQob25lIHx8ICcnKSkgLSBOdW1iZXIoaXNDYXBpdGFsaXplZCh0d28gfHwgJycpKTtcbiAgcmV0dXJuIGJ5Q2FwaXRhbGl6YXRpb24gIT09IDBcbiAgICA/IGJ5Q2FwaXRhbGl6YXRpb25cbiAgICA6IGNvbXBhcmVTdHJpbmdzKG9uZSwgdHdvKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZVN0cmluZ3NDYXBpdGFsc0ZpcnN0KG9uZTogP3N0cmluZywgdHdvOiA/c3RyaW5nKTogbnVtYmVyIHtcbiAgY29uc3QgYnlDYXBpdGFsaXphdGlvbiA9XG4gICAgTnVtYmVyKGlzQ2FwaXRhbGl6ZWQodHdvIHx8ICcnKSkgLSBOdW1iZXIoaXNDYXBpdGFsaXplZChvbmUgfHwgJycpKTtcbiAgcmV0dXJuIGJ5Q2FwaXRhbGl6YXRpb24gIT09IDBcbiAgICA/IGJ5Q2FwaXRhbGl6YXRpb25cbiAgICA6IGNvbXBhcmVTdHJpbmdzKG9uZSwgdHdvKTtcbn1cblxuZnVuY3Rpb24gaXNDYXBpdGFsaXplZChuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICBuYW1lLmxlbmd0aCA+IDAgJiZcbiAgICBuYW1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICE9PSBuYW1lLmNoYXJBdCgwKVxuICApO1xufVxuXG5mdW5jdGlvbiBpc0xvd2VyQ2FzZShuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNhcGl0YWxpemUsXG4gIGNvbXBhcmVTdHJpbmdzLFxuICBjb21wYXJlU3RyaW5nc0NhcGl0YWxzRmlyc3QsXG4gIGNvbXBhcmVTdHJpbmdzQ2FwaXRhbHNMYXN0LFxuICBpc0NhcGl0YWxpemVkLFxuICBpc0xvd2VyQ2FzZSxcbn07XG4iXX0=