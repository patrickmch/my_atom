'use strict';

var _StringUtils;

function _load_StringUtils() {
  return _StringUtils = _interopRequireDefault(require('./StringUtils'));
}

var _path = _interopRequireDefault(require('path'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getIdentifiersFromPath(filePath) {
  var ids = new Set();

  var baseName = _path.default.basename(filePath);

  // Get rid of extensions like, '.js', '.jsx', '.react.js', etc.
  var noExtensions = baseName.split('.')[0];

  // These are not valid tokens in an identifier so we have to remove them.
  var splits = noExtensions.split(/[^\w]/);

  // Just a standard identifier.
  ids.add(splits.join(''));

  // Then a camel case identifier (or possibly title case based on file name).
  var camelCaseSplits = [splits[0]];
  for (var i = 1; i < splits.length; i++) {
    camelCaseSplits.push((_StringUtils || _load_StringUtils()).default.capitalize(splits[i]));
  }
  ids.add(camelCaseSplits.join(''));

  return ids;
} /*
   * Copyright (c) 2015-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the license found in the LICENSE file in
   * the root directory of this source tree.
   *
   * 
   */

function getLiteralFromPath(filePath) {
  var baseName = _path.default.basename(filePath);
  return removeFileType(baseName);
}

function relativizeForRequire(sourcePath, destPath) {
  var relativePath = _path.default.relative(_path.default.dirname(sourcePath), destPath);
  var noFileType = removeFileType(relativePath);
  return !noFileType.startsWith('.') ? '.' + _path.default.sep + noFileType : noFileType;
}

function removeFileType(str) {
  var splits = str.split('.');
  if (splits.length <= 1) {
    return str;
  } else {
    return splits.slice(0, -1).join('.');
  }
}

var ModuleMapUtils = {
  getIdentifiersFromPath: getIdentifiersFromPath,
  getLiteralFromPath: getLiteralFromPath,
  relativizeForRequire: relativizeForRequire
};

module.exports = ModuleMapUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvTW9kdWxlTWFwVXRpbHMuanMiXSwibmFtZXMiOlsiZ2V0SWRlbnRpZmllcnNGcm9tUGF0aCIsImZpbGVQYXRoIiwiaWRzIiwiU2V0IiwiYmFzZU5hbWUiLCJiYXNlbmFtZSIsIm5vRXh0ZW5zaW9ucyIsInNwbGl0Iiwic3BsaXRzIiwiYWRkIiwiam9pbiIsImNhbWVsQ2FzZVNwbGl0cyIsImkiLCJsZW5ndGgiLCJwdXNoIiwiY2FwaXRhbGl6ZSIsImdldExpdGVyYWxGcm9tUGF0aCIsInJlbW92ZUZpbGVUeXBlIiwicmVsYXRpdml6ZUZvclJlcXVpcmUiLCJzb3VyY2VQYXRoIiwiZGVzdFBhdGgiLCJyZWxhdGl2ZVBhdGgiLCJyZWxhdGl2ZSIsImRpcm5hbWUiLCJub0ZpbGVUeXBlIiwic3RhcnRzV2l0aCIsInNlcCIsInN0ciIsInNsaWNlIiwiTW9kdWxlTWFwVXRpbHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBWUE7QUFBQTtBQUFBOztBQUNBOzs7O0FBRUEsU0FBU0Esc0JBQVQsQ0FBZ0NDLFFBQWhDLEVBQXlFO0FBQ3ZFLE1BQU1DLE1BQU0sSUFBSUMsR0FBSixFQUFaOztBQUVBLE1BQU1DLFdBQVcsY0FBS0MsUUFBTCxDQUFjSixRQUFkLENBQWpCOztBQUVBO0FBQ0EsTUFBTUssZUFBZUYsU0FBU0csS0FBVCxDQUFlLEdBQWYsRUFBb0IsQ0FBcEIsQ0FBckI7O0FBRUE7QUFDQSxNQUFNQyxTQUFTRixhQUFhQyxLQUFiLENBQW1CLE9BQW5CLENBQWY7O0FBRUE7QUFDQUwsTUFBSU8sR0FBSixDQUFRRCxPQUFPRSxJQUFQLENBQVksRUFBWixDQUFSOztBQUVBO0FBQ0EsTUFBTUMsa0JBQWtCLENBQUNILE9BQU8sQ0FBUCxDQUFELENBQXhCO0FBQ0EsT0FBSyxJQUFJSSxJQUFJLENBQWIsRUFBZ0JBLElBQUlKLE9BQU9LLE1BQTNCLEVBQW1DRCxHQUFuQyxFQUF3QztBQUN0Q0Qsb0JBQWdCRyxJQUFoQixDQUFxQiw4Q0FBWUMsVUFBWixDQUF1QlAsT0FBT0ksQ0FBUCxDQUF2QixDQUFyQjtBQUNEO0FBQ0RWLE1BQUlPLEdBQUosQ0FBUUUsZ0JBQWdCRCxJQUFoQixDQUFxQixFQUFyQixDQUFSOztBQUVBLFNBQU9SLEdBQVA7QUFDRCxDLENBckNEOzs7Ozs7Ozs7O0FBdUNBLFNBQVNjLGtCQUFULENBQTRCZixRQUE1QixFQUE2RDtBQUMzRCxNQUFNRyxXQUFXLGNBQUtDLFFBQUwsQ0FBY0osUUFBZCxDQUFqQjtBQUNBLFNBQU9nQixlQUFlYixRQUFmLENBQVA7QUFDRDs7QUFFRCxTQUFTYyxvQkFBVCxDQUNFQyxVQURGLEVBRUVDLFFBRkYsRUFHZ0I7QUFDZCxNQUFNQyxlQUFlLGNBQUtDLFFBQUwsQ0FBYyxjQUFLQyxPQUFMLENBQWFKLFVBQWIsQ0FBZCxFQUF3Q0MsUUFBeEMsQ0FBckI7QUFDQSxNQUFNSSxhQUFhUCxlQUFlSSxZQUFmLENBQW5CO0FBQ0EsU0FBTyxDQUFDRyxXQUFXQyxVQUFYLENBQXNCLEdBQXRCLENBQUQsR0FDSCxNQUFNLGNBQUtDLEdBQVgsR0FBaUJGLFVBRGQsR0FFSEEsVUFGSjtBQUdEOztBQUVELFNBQVNQLGNBQVQsQ0FBd0JVLEdBQXhCLEVBQTZDO0FBQzNDLE1BQU1uQixTQUFTbUIsSUFBSXBCLEtBQUosQ0FBVSxHQUFWLENBQWY7QUFDQSxNQUFJQyxPQUFPSyxNQUFQLElBQWlCLENBQXJCLEVBQXdCO0FBQ3RCLFdBQU9jLEdBQVA7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPbkIsT0FBT29CLEtBQVAsQ0FBYSxDQUFiLEVBQWdCLENBQUMsQ0FBakIsRUFBb0JsQixJQUFwQixDQUF5QixHQUF6QixDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxJQUFNbUIsaUJBQWlCO0FBQ3JCN0IsZ0RBRHFCO0FBRXJCZ0Isd0NBRnFCO0FBR3JCRTtBQUhxQixDQUF2Qjs7QUFNQVksT0FBT0MsT0FBUCxHQUFpQkYsY0FBakIiLCJmaWxlIjoiTW9kdWxlTWFwVXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgdHlwZSB7QWJzb2x1dGVQYXRoLCBJZGVudGlmaWVyLCBMaXRlcmFsLCBSZWxhdGl2ZVBhdGh9IGZyb20gJy4uL3R5cGVzL2NvbW1vbic7XG5cbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuL1N0cmluZ1V0aWxzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5mdW5jdGlvbiBnZXRJZGVudGlmaWVyc0Zyb21QYXRoKGZpbGVQYXRoOiBBYnNvbHV0ZVBhdGgpOiBTZXQ8SWRlbnRpZmllcj4ge1xuICBjb25zdCBpZHMgPSBuZXcgU2V0KCk7XG5cbiAgY29uc3QgYmFzZU5hbWUgPSBwYXRoLmJhc2VuYW1lKGZpbGVQYXRoKTtcblxuICAvLyBHZXQgcmlkIG9mIGV4dGVuc2lvbnMgbGlrZSwgJy5qcycsICcuanN4JywgJy5yZWFjdC5qcycsIGV0Yy5cbiAgY29uc3Qgbm9FeHRlbnNpb25zID0gYmFzZU5hbWUuc3BsaXQoJy4nKVswXTtcblxuICAvLyBUaGVzZSBhcmUgbm90IHZhbGlkIHRva2VucyBpbiBhbiBpZGVudGlmaWVyIHNvIHdlIGhhdmUgdG8gcmVtb3ZlIHRoZW0uXG4gIGNvbnN0IHNwbGl0cyA9IG5vRXh0ZW5zaW9ucy5zcGxpdCgvW15cXHddLyk7XG5cbiAgLy8gSnVzdCBhIHN0YW5kYXJkIGlkZW50aWZpZXIuXG4gIGlkcy5hZGQoc3BsaXRzLmpvaW4oJycpKTtcblxuICAvLyBUaGVuIGEgY2FtZWwgY2FzZSBpZGVudGlmaWVyIChvciBwb3NzaWJseSB0aXRsZSBjYXNlIGJhc2VkIG9uIGZpbGUgbmFtZSkuXG4gIGNvbnN0IGNhbWVsQ2FzZVNwbGl0cyA9IFtzcGxpdHNbMF1dO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IHNwbGl0cy5sZW5ndGg7IGkrKykge1xuICAgIGNhbWVsQ2FzZVNwbGl0cy5wdXNoKFN0cmluZ1V0aWxzLmNhcGl0YWxpemUoc3BsaXRzW2ldKSk7XG4gIH1cbiAgaWRzLmFkZChjYW1lbENhc2VTcGxpdHMuam9pbignJykpO1xuXG4gIHJldHVybiBpZHM7XG59XG5cbmZ1bmN0aW9uIGdldExpdGVyYWxGcm9tUGF0aChmaWxlUGF0aDogQWJzb2x1dGVQYXRoKTogTGl0ZXJhbCB7XG4gIGNvbnN0IGJhc2VOYW1lID0gcGF0aC5iYXNlbmFtZShmaWxlUGF0aCk7XG4gIHJldHVybiByZW1vdmVGaWxlVHlwZShiYXNlTmFtZSk7XG59XG5cbmZ1bmN0aW9uIHJlbGF0aXZpemVGb3JSZXF1aXJlKFxuICBzb3VyY2VQYXRoOiBBYnNvbHV0ZVBhdGgsXG4gIGRlc3RQYXRoOiBBYnNvbHV0ZVBhdGgsXG4pOiBSZWxhdGl2ZVBhdGgge1xuICBjb25zdCByZWxhdGl2ZVBhdGggPSBwYXRoLnJlbGF0aXZlKHBhdGguZGlybmFtZShzb3VyY2VQYXRoKSwgZGVzdFBhdGgpO1xuICBjb25zdCBub0ZpbGVUeXBlID0gcmVtb3ZlRmlsZVR5cGUocmVsYXRpdmVQYXRoKTtcbiAgcmV0dXJuICFub0ZpbGVUeXBlLnN0YXJ0c1dpdGgoJy4nKVxuICAgID8gJy4nICsgcGF0aC5zZXAgKyBub0ZpbGVUeXBlXG4gICAgOiBub0ZpbGVUeXBlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGaWxlVHlwZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHNwbGl0cyA9IHN0ci5zcGxpdCgnLicpO1xuICBpZiAoc3BsaXRzLmxlbmd0aCA8PSAxKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3BsaXRzLnNsaWNlKDAsIC0xKS5qb2luKCcuJyk7XG4gIH1cbn1cblxuY29uc3QgTW9kdWxlTWFwVXRpbHMgPSB7XG4gIGdldElkZW50aWZpZXJzRnJvbVBhdGgsXG4gIGdldExpdGVyYWxGcm9tUGF0aCxcbiAgcmVsYXRpdml6ZUZvclJlcXVpcmUsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vZHVsZU1hcFV0aWxzO1xuIl19