'use strict';

var _jscodeshift;

function _load_jscodeshift() {
  return _jscodeshift = _interopRequireDefault(require('../utils/jscodeshift'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CONFIG = [{
  nodeType: (_jscodeshift || _load_jscodeshift()).default.ImportDeclaration,
  filters: [function (path) {
    return path.value.importKind === 'type' || path.value.importKind === 'typeof';
  }],
  getNodes: function getNodes(path) {
    return path.node.specifiers.map(function (specifier) {
      return specifier.local;
    });
  }
}, {
  nodeType: (_jscodeshift || _load_jscodeshift()).default.TypeAlias,
  filters: [],
  getNodes: function getNodes(path) {
    return [path.node.id];
  }
}, {
  nodeType: (_jscodeshift || _load_jscodeshift()).default.TypeParameterDeclaration,
  filters: [],
  getNodes: function getNodes(path) {
    return path.node.params;
  }
},

// TODO: remove these, they should be covered by TypeParameterDeclaration
// but there is a bug in jscodeshift
{
  nodeType: (_jscodeshift || _load_jscodeshift()).default.ClassDeclaration,
  filters: [function (path) {
    return path.node.typeParameters && Array.isArray(path.node.typeParameters.params);
  }],
  getNodes: function getNodes(path) {
    return path.node.typeParameters.params;
  }
}, {
  nodeType: (_jscodeshift || _load_jscodeshift()).default.DeclareClass,
  filters: [],
  getNodes: function getNodes(path) {
    return [path.node.id];
  }
}];

/**
 * This will get a list of all flow types that are declared within root's AST
 */
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 *
 * 
 */

function getDeclaredTypes(root, options, filters) {
  // Start with the built in types that are always declared.
  var moduleMap = options.moduleMap;

  var ids = new Set(moduleMap.getBuiltInTypes());
  var visitor = {};
  CONFIG.forEach(function (config) {
    visitor['visit' + config.nodeType] = function (path) {
      if ((!filters || filters.every(function (filter) {
        return filter(path);
      })) && config.filters.every(function (filter) {
        return filter(path);
      })) {
        var nodes = config.getNodes(path);
        nodes.forEach(function (node) {
          if ((_jscodeshift || _load_jscodeshift()).default.Identifier.check(node) || (_jscodeshift || _load_jscodeshift()).default.TypeParameter.check(node)) {
            ids.add(node.name);
          }
        });
      }
      this.traverse(path);
    };
  });
  (_jscodeshift || _load_jscodeshift()).default.types.visit(root.nodes()[0], visitor);
  return ids;
}

module.exports = getDeclaredTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvZ2V0RGVjbGFyZWRUeXBlcy5qcyJdLCJuYW1lcyI6WyJDT05GSUciLCJub2RlVHlwZSIsIkltcG9ydERlY2xhcmF0aW9uIiwiZmlsdGVycyIsInBhdGgiLCJ2YWx1ZSIsImltcG9ydEtpbmQiLCJnZXROb2RlcyIsIm5vZGUiLCJzcGVjaWZpZXJzIiwibWFwIiwic3BlY2lmaWVyIiwibG9jYWwiLCJUeXBlQWxpYXMiLCJpZCIsIlR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbiIsInBhcmFtcyIsIkNsYXNzRGVjbGFyYXRpb24iLCJ0eXBlUGFyYW1ldGVycyIsIkFycmF5IiwiaXNBcnJheSIsIkRlY2xhcmVDbGFzcyIsImdldERlY2xhcmVkVHlwZXMiLCJyb290Iiwib3B0aW9ucyIsIm1vZHVsZU1hcCIsImlkcyIsIlNldCIsImdldEJ1aWx0SW5UeXBlcyIsInZpc2l0b3IiLCJmb3JFYWNoIiwiY29uZmlnIiwiZXZlcnkiLCJmaWx0ZXIiLCJub2RlcyIsIklkZW50aWZpZXIiLCJjaGVjayIsIlR5cGVQYXJhbWV0ZXIiLCJhZGQiLCJuYW1lIiwidHJhdmVyc2UiLCJ0eXBlcyIsInZpc2l0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQWFBO0FBQUE7QUFBQTs7OztBQVFBLElBQU1BLFNBQTZCLENBQ2pDO0FBQ0VDLFlBQVUsOENBQUtDLGlCQURqQjtBQUVFQyxXQUFTLENBQ1A7QUFBQSxXQUFRQyxLQUFLQyxLQUFMLENBQVdDLFVBQVgsS0FBMEIsTUFBMUIsSUFDTkYsS0FBS0MsS0FBTCxDQUFXQyxVQUFYLEtBQTBCLFFBRDVCO0FBQUEsR0FETyxDQUZYO0FBTUVDLFlBQVU7QUFBQSxXQUFRSCxLQUFLSSxJQUFMLENBQVVDLFVBQVYsQ0FBcUJDLEdBQXJCLENBQXlCO0FBQUEsYUFBYUMsVUFBVUMsS0FBdkI7QUFBQSxLQUF6QixDQUFSO0FBQUE7QUFOWixDQURpQyxFQVNqQztBQUNFWCxZQUFVLDhDQUFLWSxTQURqQjtBQUVFVixXQUFTLEVBRlg7QUFHRUksWUFBVTtBQUFBLFdBQVEsQ0FBQ0gsS0FBS0ksSUFBTCxDQUFVTSxFQUFYLENBQVI7QUFBQTtBQUhaLENBVGlDLEVBY2pDO0FBQ0ViLFlBQVUsOENBQUtjLHdCQURqQjtBQUVFWixXQUFTLEVBRlg7QUFHRUksWUFBVTtBQUFBLFdBQVFILEtBQUtJLElBQUwsQ0FBVVEsTUFBbEI7QUFBQTtBQUhaLENBZGlDOztBQW9CakM7QUFDQTtBQUNBO0FBQ0VmLFlBQVUsOENBQUtnQixnQkFEakI7QUFFRWQsV0FBUyxDQUNQO0FBQUEsV0FDRUMsS0FBS0ksSUFBTCxDQUFVVSxjQUFWLElBQ0FDLE1BQU1DLE9BQU4sQ0FBY2hCLEtBQUtJLElBQUwsQ0FBVVUsY0FBVixDQUF5QkYsTUFBdkMsQ0FGRjtBQUFBLEdBRE8sQ0FGWDtBQVFFVCxZQUFVO0FBQUEsV0FBUUgsS0FBS0ksSUFBTCxDQUFVVSxjQUFWLENBQXlCRixNQUFqQztBQUFBO0FBUlosQ0F0QmlDLEVBZ0NqQztBQUNFZixZQUFVLDhDQUFLb0IsWUFEakI7QUFFRWxCLFdBQVMsRUFGWDtBQUdFSSxZQUFVO0FBQUEsV0FBUSxDQUFDSCxLQUFLSSxJQUFMLENBQVVNLEVBQVgsQ0FBUjtBQUFBO0FBSFosQ0FoQ2lDLENBQW5DOztBQXVDQTs7O0FBNURBOzs7Ozs7Ozs7O0FBK0RBLFNBQVNRLGdCQUFULENBQ0VDLElBREYsRUFFRUMsT0FGRixFQUdFckIsT0FIRixFQUllO0FBQ2I7QUFEYSxNQUVOc0IsU0FGTSxHQUVPRCxPQUZQLENBRU5DLFNBRk07O0FBR2IsTUFBTUMsTUFBTSxJQUFJQyxHQUFKLENBQVFGLFVBQVVHLGVBQVYsRUFBUixDQUFaO0FBQ0EsTUFBTUMsVUFBVSxFQUFoQjtBQUNBN0IsU0FBTzhCLE9BQVAsQ0FBZSxrQkFBVTtBQUN2QkQsc0JBQWdCRSxPQUFPOUIsUUFBdkIsSUFBcUMsVUFBU0csSUFBVCxFQUFlO0FBQ2xELFVBQ0UsQ0FBQyxDQUFDRCxPQUFELElBQVlBLFFBQVE2QixLQUFSLENBQWM7QUFBQSxlQUFVQyxPQUFPN0IsSUFBUCxDQUFWO0FBQUEsT0FBZCxDQUFiLEtBQ0EyQixPQUFPNUIsT0FBUCxDQUFlNkIsS0FBZixDQUFxQjtBQUFBLGVBQVVDLE9BQU83QixJQUFQLENBQVY7QUFBQSxPQUFyQixDQUZGLEVBR0U7QUFDQSxZQUFNOEIsUUFBUUgsT0FBT3hCLFFBQVAsQ0FBZ0JILElBQWhCLENBQWQ7QUFDQThCLGNBQU1KLE9BQU4sQ0FBYyxnQkFBUTtBQUNwQixjQUFJLDhDQUFLSyxVQUFMLENBQWdCQyxLQUFoQixDQUFzQjVCLElBQXRCLEtBQStCLDhDQUFLNkIsYUFBTCxDQUFtQkQsS0FBbkIsQ0FBeUI1QixJQUF6QixDQUFuQyxFQUFtRTtBQUNqRWtCLGdCQUFJWSxHQUFKLENBQVE5QixLQUFLK0IsSUFBYjtBQUNEO0FBQ0YsU0FKRDtBQUtEO0FBQ0QsV0FBS0MsUUFBTCxDQUFjcEMsSUFBZDtBQUNELEtBYkQ7QUFjRCxHQWZEO0FBZ0JBLGdEQUFLcUMsS0FBTCxDQUFXQyxLQUFYLENBQWlCbkIsS0FBS1csS0FBTCxHQUFhLENBQWIsQ0FBakIsRUFBa0NMLE9BQWxDO0FBQ0EsU0FBT0gsR0FBUDtBQUNEOztBQUVEaUIsT0FBT0MsT0FBUCxHQUFpQnRCLGdCQUFqQiIsImZpbGUiOiJnZXREZWNsYXJlZFR5cGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHR5cGUge0NvbGxlY3Rpb24sIE5vZGUsIE5vZGVQYXRofSBmcm9tICcuLi90eXBlcy9hc3QnO1xuaW1wb3J0IHR5cGUge1NvdXJjZU9wdGlvbnN9IGZyb20gJy4uL29wdGlvbnMvU291cmNlT3B0aW9ucyc7XG5cbmltcG9ydCBqc2NzIGZyb20gJy4uL3V0aWxzL2pzY29kZXNoaWZ0JztcblxudHlwZSBDb25maWdFbnRyeSA9IHtcbiAgbm9kZVR5cGU6IHN0cmluZyxcbiAgZmlsdGVyczogQXJyYXk8KHBhdGg6IE5vZGVQYXRoKSA9PiBib29sZWFuPixcbiAgZ2V0Tm9kZXM6IChwYXRoOiBOb2RlUGF0aCkgPT4gQXJyYXk8Tm9kZT4sXG59O1xuXG5jb25zdCBDT05GSUc6IEFycmF5PENvbmZpZ0VudHJ5PiA9IFtcbiAge1xuICAgIG5vZGVUeXBlOiBqc2NzLkltcG9ydERlY2xhcmF0aW9uLFxuICAgIGZpbHRlcnM6IFtcbiAgICAgIHBhdGggPT4gcGF0aC52YWx1ZS5pbXBvcnRLaW5kID09PSAndHlwZScgfHxcbiAgICAgICAgcGF0aC52YWx1ZS5pbXBvcnRLaW5kID09PSAndHlwZW9mJyxcbiAgICBdLFxuICAgIGdldE5vZGVzOiBwYXRoID0+IHBhdGgubm9kZS5zcGVjaWZpZXJzLm1hcChzcGVjaWZpZXIgPT4gc3BlY2lmaWVyLmxvY2FsKSxcbiAgfSxcbiAge1xuICAgIG5vZGVUeXBlOiBqc2NzLlR5cGVBbGlhcyxcbiAgICBmaWx0ZXJzOiBbXSxcbiAgICBnZXROb2RlczogcGF0aCA9PiBbcGF0aC5ub2RlLmlkXSxcbiAgfSxcbiAge1xuICAgIG5vZGVUeXBlOiBqc2NzLlR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbixcbiAgICBmaWx0ZXJzOiBbXSxcbiAgICBnZXROb2RlczogcGF0aCA9PiBwYXRoLm5vZGUucGFyYW1zLFxuICB9LFxuXG4gIC8vIFRPRE86IHJlbW92ZSB0aGVzZSwgdGhleSBzaG91bGQgYmUgY292ZXJlZCBieSBUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb25cbiAgLy8gYnV0IHRoZXJlIGlzIGEgYnVnIGluIGpzY29kZXNoaWZ0XG4gIHtcbiAgICBub2RlVHlwZToganNjcy5DbGFzc0RlY2xhcmF0aW9uLFxuICAgIGZpbHRlcnM6IFtcbiAgICAgIHBhdGggPT4gKFxuICAgICAgICBwYXRoLm5vZGUudHlwZVBhcmFtZXRlcnMgJiZcbiAgICAgICAgQXJyYXkuaXNBcnJheShwYXRoLm5vZGUudHlwZVBhcmFtZXRlcnMucGFyYW1zKVxuICAgICAgKSxcbiAgICBdLFxuICAgIGdldE5vZGVzOiBwYXRoID0+IHBhdGgubm9kZS50eXBlUGFyYW1ldGVycy5wYXJhbXMsXG4gIH0sXG4gIHtcbiAgICBub2RlVHlwZToganNjcy5EZWNsYXJlQ2xhc3MsXG4gICAgZmlsdGVyczogW10sXG4gICAgZ2V0Tm9kZXM6IHBhdGggPT4gW3BhdGgubm9kZS5pZF0sXG4gIH0sXG5dO1xuXG4vKipcbiAqIFRoaXMgd2lsbCBnZXQgYSBsaXN0IG9mIGFsbCBmbG93IHR5cGVzIHRoYXQgYXJlIGRlY2xhcmVkIHdpdGhpbiByb290J3MgQVNUXG4gKi9cbmZ1bmN0aW9uIGdldERlY2xhcmVkVHlwZXMoXG4gIHJvb3Q6IENvbGxlY3Rpb24sXG4gIG9wdGlvbnM6IFNvdXJjZU9wdGlvbnMsXG4gIGZpbHRlcnM/OiA/QXJyYXk8KHBhdGg6IE5vZGVQYXRoKSA9PiBib29sZWFuPixcbik6IFNldDxzdHJpbmc+IHtcbiAgLy8gU3RhcnQgd2l0aCB0aGUgYnVpbHQgaW4gdHlwZXMgdGhhdCBhcmUgYWx3YXlzIGRlY2xhcmVkLlxuICBjb25zdCB7bW9kdWxlTWFwfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGlkcyA9IG5ldyBTZXQobW9kdWxlTWFwLmdldEJ1aWx0SW5UeXBlcygpKTtcbiAgY29uc3QgdmlzaXRvciA9IHt9O1xuICBDT05GSUcuZm9yRWFjaChjb25maWcgPT4ge1xuICAgIHZpc2l0b3JbYHZpc2l0JHtjb25maWcubm9kZVR5cGV9YF0gPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgICBpZiAoXG4gICAgICAgICghZmlsdGVycyB8fCBmaWx0ZXJzLmV2ZXJ5KGZpbHRlciA9PiBmaWx0ZXIocGF0aCkpKSAmJlxuICAgICAgICBjb25maWcuZmlsdGVycy5ldmVyeShmaWx0ZXIgPT4gZmlsdGVyKHBhdGgpKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IG5vZGVzID0gY29uZmlnLmdldE5vZGVzKHBhdGgpO1xuICAgICAgICBub2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgICAgIGlmIChqc2NzLklkZW50aWZpZXIuY2hlY2sobm9kZSkgfHwganNjcy5UeXBlUGFyYW1ldGVyLmNoZWNrKG5vZGUpKSB7XG4gICAgICAgICAgICBpZHMuYWRkKG5vZGUubmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMudHJhdmVyc2UocGF0aCk7XG4gICAgfTtcbiAgfSk7XG4gIGpzY3MudHlwZXMudmlzaXQocm9vdC5ub2RlcygpWzBdLCB2aXNpdG9yKTtcbiAgcmV0dXJuIGlkcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXREZWNsYXJlZFR5cGVzO1xuIl19