const { CompositeDisposable } = require("atom");
const { writeFile } = require("fs");
const { join } = require("path");

const config = require("./config");

module.exports = {
  config,
  active: false,
  isActive() {
    return this.active;
  },
  activate() {
    atom.config.onDidChange("minimap-autohider.TransitionDuration", updateTransitionDuration);
    return this.subscriptions = new CompositeDisposable();
  },
  consumeMinimapServiceV1(minimap1) {
    this.minimap = minimap1;
    return this.minimap.registerPlugin("minimap-autohider", this);
  },
  deactivate() {
    this.minimap.unregisterPlugin("minimap-autohider");
    return this.minimap = null;
  },
  activatePlugin() {
    if (this.active) {
      return;
    }
    this.active = true;
    return this.minimapsSubscription = this.minimap.observeMinimaps(minimap => {
      let editor, minimapElement;
      minimapElement = atom.views.getView(minimap);
      editor = minimap.getTextEditor();
      minimapElement.classList.add(`visiblepercentage-${atom.config.get("minimap-autohider").VisiblePercentage}`);
      atom.config.onDidChange("minimap-autohider.VisiblePercentage", ({newValue, oldValue}) => {
        minimapElement.classList.remove(`visiblepercentage-${oldValue}`);
        minimapElement.classList.add(`visiblepercentage-${newValue}`);
      });

      editor.element.addEventListener("mouseup", () => this.handleAutohide({
        minimapElement,
        type: "ShowOnClick"
      }));
      return this.subscriptions.add(editor.element.onDidChangeScrollTop(() =>
        this.handleAutohide({
          minimapElement,
          type: "ShowOnScroll"
        })
      ));
    });
  },
  handleAutohide({ minimapElement, type }) {
    if(!atom.config.get("minimap-autohider")[type]) {
      return;
    }
    if(minimapElement.timer) {
      clearTimeout(minimapElement.timer);
    } else {
      minimapElement.classList.add("autovisible", "scrolling");
    }
    minimapElement.timer = setTimeout(
      () => {
        minimapElement.classList.remove("autovisible", "scrolling");
        minimapElement.timer = undefined;
      },
      atom.config.get("minimap-autohider").TimeToHide
    );
  },
  deactivatePlugin() {
    if (!this.active) {
      return;
    }
    this.active = false;
    this.minimapsSubscription.dispose();
    return this.subscriptions.dispose();
  }
};

function updateTransitionDuration({newValue}) {
  writeFile(join(__dirname, "..", "styles", "custom.less"), `// AUTOGENERATED\n@TransitionDuration: ${newValue / 1000}s;\n`, "utf8", err => {
    if(err) {
      atom.notifications.addWarning("Warning from minimap-autohider", {
        dismissable: true,
        description: "minimap-autohider failed to write your settings to a file. Transition Duration will reset to 100ms.",
        details: `error message from writeFile: ${err.message}`
      });
    }
  });
}
